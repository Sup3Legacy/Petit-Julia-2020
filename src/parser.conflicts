
** Conflict (reduce/reduce) in state 91.
** Tokens involved: END ELSEIF ELSE
** The following explanations concentrate on token END.
** This state is reached from fichier after reading:

IF expr bloc ELSEIF expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

fichier 
list(decl) EOF 
decl list(decl) 
expr SEMICOLON 
IF expr bloc else_exp 
             ELSEIF expr bloc else_exp // lookahead token appears because else_exp can begin with END
                         loption(separated_nonempty_list(SEMICOLON,option(expr))) // lookahead token is inherited
                         (?)

** In state 91, looking ahead at END, reducing production
** loption(separated_nonempty_list(SEMICOLON,option(expr))) -> 
** is permitted because of the following sub-derivation:

. 

** In state 91, looking ahead at END, reducing production
** option(expr) -> 
** is permitted because of the following sub-derivation:

separated_nonempty_list(SEMICOLON,option(expr)) // lookahead token is inherited
option(expr) // lookahead token is inherited
. 

** Conflict (shift/reduce) in state 86.
** Tokens involved: TIMES PLUS OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT AND
** The following explanations concentrate on token TIMES.
** This state is reached from fichier after reading:

RETURN expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

fichier 
list(decl) EOF 
decl list(decl) 
expr SEMICOLON 
(?)

** In state 86, looking ahead at TIMES, shifting is permitted
** because of the following sub-derivation:

RETURN option(expr) 
       expr 
       expr . TIMES expr 

** In state 86, looking ahead at TIMES, reducing production
** option(expr) -> expr 
** is permitted because of the following sub-derivation:

expr TIMES expr // lookahead token appears
RETURN option(expr) // lookahead token is inherited
       expr . 

** Conflict (reduce/reduce) in state 81.
** Tokens involved: END ELSEIF ELSE
** The following explanations concentrate on token END.
** This state is reached from fichier after reading:

IF expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

fichier 
list(decl) EOF 
decl list(decl) 
expr SEMICOLON 
IF expr bloc else_exp // lookahead token appears because else_exp can begin with END
        loption(separated_nonempty_list(SEMICOLON,option(expr))) // lookahead token is inherited
        (?)

** In state 81, looking ahead at END, reducing production
** loption(separated_nonempty_list(SEMICOLON,option(expr))) -> 
** is permitted because of the following sub-derivation:

. 

** In state 81, looking ahead at END, reducing production
** option(expr) -> 
** is permitted because of the following sub-derivation:

separated_nonempty_list(SEMICOLON,option(expr)) // lookahead token is inherited
option(expr) // lookahead token is inherited
. 

** Conflict (shift/reduce/reduce) in state 72.
** Tokens involved: SEMICOLON PLUS OR NEQ MINUS LEQ L GEQ G EQ END ELSEIF ELSE AND
** The following explanations concentrate on token PLUS.
** This state is reached from fichier after reading:

WHILE expr MINUS expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

fichier 
list(decl) EOF 
decl list(decl) 
expr SEMICOLON 
(?)

** In state 72, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

WHILE expr bloc_END 
      expr MINUS expr 
                 expr . PLUS expr 

** In state 72, looking ahead at PLUS, reducing production
** expr -> expr MINUS expr 
** is permitted because of the following sub-derivation:

WHILE expr bloc_END 
      expr PLUS expr // lookahead token appears
      expr MINUS expr . 

** In state 72, looking ahead at PLUS, reducing production
** expr -> MINUS expr 
** is permitted because of the following sub-derivation:

WHILE expr bloc_END 
           bloc_END2 
           expr END 
           expr PLUS expr // lookahead token appears
           MINUS expr . 

** Conflict (shift/reduce) in state 3.
** Tokens involved: WHILE TRUE RETURN PARG NOT MINUS INT IF IDENT_PARG IDENT FOR FALSE ENTIER_PARG ENTIER_IDENT CHAINE
** The following explanations concentrate on token MINUS.
** This state is reached from fichier after reading:

RETURN 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

fichier 
list(decl) EOF 
decl list(decl) 
expr SEMICOLON 
(?)

** In state 3, looking ahead at MINUS, shifting is permitted
** because of the following sub-derivation:

RETURN option(expr) 
       expr 
       . MINUS expr 

** In state 3, looking ahead at MINUS, reducing production
** option(expr) -> 
** is permitted because of the following sub-derivation:

expr MINUS expr // lookahead token appears
RETURN option(expr) // lookahead token is inherited
       . 
