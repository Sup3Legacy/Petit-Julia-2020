State 0:
fichier' -> . fichier [ # ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MUTABLE shift to state 93
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FUNCTION shift to state 94
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On structure shift to state 111
-- On option(MUTABLE) shift to state 112
-- On lvalue shift to state 18
-- On list(decl) shift to state 123
-- On fonction shift to state 125
-- On fichier shift to state 126
-- On expr shift to state 127
-- On decl shift to state 129
-- On STRUCT reduce production option(MUTABLE) -> 
-- On EOF reduce production list(decl) -> 

State 1:
expr -> WHILE . expr bloc END [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 90

State 2:
expr -> TRUE . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE reduce production expr -> TRUE 
-- On TRUE reduce production expr -> TRUE 
-- On TIMES reduce production expr -> TRUE 
-- On STRUCT reduce production expr -> TRUE 
-- On SEMICOLON reduce production expr -> TRUE 
-- On RETURN reduce production expr -> TRUE 
-- On PLUS reduce production expr -> TRUE 
-- On PARG reduce production expr -> TRUE 
-- On PARD_IDENT reduce production expr -> TRUE 
-- On PARD reduce production expr -> TRUE 
-- On OR reduce production expr -> TRUE 
-- On NOT reduce production expr -> TRUE 
-- On NEQ reduce production expr -> TRUE 
-- On MUTABLE reduce production expr -> TRUE 
-- On MODULO reduce production expr -> TRUE 
-- On MINUS reduce production expr -> TRUE 
-- On LEQ reduce production expr -> TRUE 
-- On L reduce production expr -> TRUE 
-- On INT reduce production expr -> TRUE 
-- On IF reduce production expr -> TRUE 
-- On IDENT_PARG reduce production expr -> TRUE 
-- On IDENT reduce production expr -> TRUE 
-- On GEQ reduce production expr -> TRUE 
-- On G reduce production expr -> TRUE 
-- On FUNCTION reduce production expr -> TRUE 
-- On FOR reduce production expr -> TRUE 
-- On FALSE reduce production expr -> TRUE 
-- On EXP reduce production expr -> TRUE 
-- On EQ reduce production expr -> TRUE 
-- On EOF reduce production expr -> TRUE 
-- On ENTIER_PARG reduce production expr -> TRUE 
-- On ENTIER_IDENT reduce production expr -> TRUE 
-- On END reduce production expr -> TRUE 
-- On ELSEIF reduce production expr -> TRUE 
-- On ELSE reduce production expr -> TRUE 
-- On DOT reduce production expr -> TRUE 
-- On COMMA reduce production expr -> TRUE 
-- On COLON reduce production expr -> TRUE 
-- On CHAINE reduce production expr -> TRUE 
-- On AND reduce production expr -> TRUE 

State 3:
expr -> RETURN . option(expr) [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On option(expr) shift to state 89
-- On lvalue shift to state 18
-- On expr shift to state 56
-- On WHILE reduce production option(expr) -> 
-- On TRUE reduce production option(expr) -> 
-- On TIMES reduce production option(expr) -> 
-- On STRUCT reduce production option(expr) -> 
-- On SEMICOLON reduce production option(expr) -> 
-- On RETURN reduce production option(expr) -> 
-- On PLUS reduce production option(expr) -> 
-- On PARG reduce production option(expr) -> 
-- On PARD_IDENT reduce production option(expr) -> 
-- On PARD reduce production option(expr) -> 
-- On OR reduce production option(expr) -> 
-- On NOT reduce production option(expr) -> 
-- On NEQ reduce production option(expr) -> 
-- On MUTABLE reduce production option(expr) -> 
-- On MODULO reduce production option(expr) -> 
-- On MINUS reduce production option(expr) -> 
-- On LEQ reduce production option(expr) -> 
-- On L reduce production option(expr) -> 
-- On INT reduce production option(expr) -> 
-- On IF reduce production option(expr) -> 
-- On IDENT_PARG reduce production option(expr) -> 
-- On IDENT reduce production option(expr) -> 
-- On GEQ reduce production option(expr) -> 
-- On G reduce production option(expr) -> 
-- On FUNCTION reduce production option(expr) -> 
-- On FOR reduce production option(expr) -> 
-- On FALSE reduce production option(expr) -> 
-- On EXP reduce production option(expr) -> 
-- On EQ reduce production option(expr) -> 
-- On EOF reduce production option(expr) -> 
-- On ENTIER_PARG reduce production option(expr) -> 
-- On ENTIER_IDENT reduce production option(expr) -> 
-- On END reduce production option(expr) -> 
-- On ELSEIF reduce production option(expr) -> 
-- On ELSE reduce production option(expr) -> 
-- On DOT reduce production option(expr) -> 
-- On COMMA reduce production option(expr) -> 
-- On COLON reduce production option(expr) -> 
-- On CHAINE reduce production option(expr) -> 
-- On AND reduce production option(expr) -> 
** Conflict on WHILE TRUE RETURN PARG NOT MINUS INT IF IDENT_PARG IDENT FOR FALSE ENTIER_PARG ENTIER_IDENT CHAINE

State 4:
expr -> PARG . bloc1 PARD [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 50
-- On bloc1 shift to state 87

State 5:
expr -> NOT . expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 86

State 6:
expr -> MINUS . expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 85

State 7:
expr -> INT . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE reduce production expr -> INT 
-- On TRUE reduce production expr -> INT 
-- On TIMES reduce production expr -> INT 
-- On STRUCT reduce production expr -> INT 
-- On SEMICOLON reduce production expr -> INT 
-- On RETURN reduce production expr -> INT 
-- On PLUS reduce production expr -> INT 
-- On PARG reduce production expr -> INT 
-- On PARD_IDENT reduce production expr -> INT 
-- On PARD reduce production expr -> INT 
-- On OR reduce production expr -> INT 
-- On NOT reduce production expr -> INT 
-- On NEQ reduce production expr -> INT 
-- On MUTABLE reduce production expr -> INT 
-- On MODULO reduce production expr -> INT 
-- On MINUS reduce production expr -> INT 
-- On LEQ reduce production expr -> INT 
-- On L reduce production expr -> INT 
-- On INT reduce production expr -> INT 
-- On IF reduce production expr -> INT 
-- On IDENT_PARG reduce production expr -> INT 
-- On IDENT reduce production expr -> INT 
-- On GEQ reduce production expr -> INT 
-- On G reduce production expr -> INT 
-- On FUNCTION reduce production expr -> INT 
-- On FOR reduce production expr -> INT 
-- On FALSE reduce production expr -> INT 
-- On EXP reduce production expr -> INT 
-- On EQ reduce production expr -> INT 
-- On EOF reduce production expr -> INT 
-- On ENTIER_PARG reduce production expr -> INT 
-- On ENTIER_IDENT reduce production expr -> INT 
-- On END reduce production expr -> INT 
-- On ELSEIF reduce production expr -> INT 
-- On ELSE reduce production expr -> INT 
-- On DOT reduce production expr -> INT 
-- On COMMA reduce production expr -> INT 
-- On COLON reduce production expr -> INT 
-- On CHAINE reduce production expr -> INT 
-- On AND reduce production expr -> INT 

State 8:
expr -> IF . expr bloc else_exp [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 74

State 9:
expr -> IDENT_PARG . loption(separated_nonempty_list(COMMA,expr)) PARD [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On separated_nonempty_list(COMMA,expr) shift to state 68
-- On lvalue shift to state 18
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 69
-- On expr shift to state 71
-- On PARD reduce production loption(separated_nonempty_list(COMMA,expr)) -> 

State 10:
lvalue -> IDENT . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND AFFECT ]
-- On WHILE reduce production lvalue -> IDENT 
-- On TRUE reduce production lvalue -> IDENT 
-- On TIMES reduce production lvalue -> IDENT 
-- On STRUCT reduce production lvalue -> IDENT 
-- On SEMICOLON reduce production lvalue -> IDENT 
-- On RETURN reduce production lvalue -> IDENT 
-- On PLUS reduce production lvalue -> IDENT 
-- On PARG reduce production lvalue -> IDENT 
-- On PARD_IDENT reduce production lvalue -> IDENT 
-- On PARD reduce production lvalue -> IDENT 
-- On OR reduce production lvalue -> IDENT 
-- On NOT reduce production lvalue -> IDENT 
-- On NEQ reduce production lvalue -> IDENT 
-- On MUTABLE reduce production lvalue -> IDENT 
-- On MODULO reduce production lvalue -> IDENT 
-- On MINUS reduce production lvalue -> IDENT 
-- On LEQ reduce production lvalue -> IDENT 
-- On L reduce production lvalue -> IDENT 
-- On INT reduce production lvalue -> IDENT 
-- On IF reduce production lvalue -> IDENT 
-- On IDENT_PARG reduce production lvalue -> IDENT 
-- On IDENT reduce production lvalue -> IDENT 
-- On GEQ reduce production lvalue -> IDENT 
-- On G reduce production lvalue -> IDENT 
-- On FUNCTION reduce production lvalue -> IDENT 
-- On FOR reduce production lvalue -> IDENT 
-- On FALSE reduce production lvalue -> IDENT 
-- On EXP reduce production lvalue -> IDENT 
-- On EQ reduce production lvalue -> IDENT 
-- On EOF reduce production lvalue -> IDENT 
-- On ENTIER_PARG reduce production lvalue -> IDENT 
-- On ENTIER_IDENT reduce production lvalue -> IDENT 
-- On END reduce production lvalue -> IDENT 
-- On ELSEIF reduce production lvalue -> IDENT 
-- On ELSE reduce production lvalue -> IDENT 
-- On DOT reduce production lvalue -> IDENT 
-- On COMMA reduce production lvalue -> IDENT 
-- On COLON reduce production lvalue -> IDENT 
-- On CHAINE reduce production lvalue -> IDENT 
-- On AND reduce production lvalue -> IDENT 
-- On AFFECT reduce production lvalue -> IDENT 

State 11:
expr -> FOR . IDENT AFFECT expr COLON expr bloc END [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On IDENT shift to state 12

State 12:
expr -> FOR IDENT . AFFECT expr COLON expr bloc END [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On AFFECT shift to state 13

State 13:
expr -> FOR IDENT AFFECT . expr COLON expr bloc END [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 61

State 14:
expr -> FALSE . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE reduce production expr -> FALSE 
-- On TRUE reduce production expr -> FALSE 
-- On TIMES reduce production expr -> FALSE 
-- On STRUCT reduce production expr -> FALSE 
-- On SEMICOLON reduce production expr -> FALSE 
-- On RETURN reduce production expr -> FALSE 
-- On PLUS reduce production expr -> FALSE 
-- On PARG reduce production expr -> FALSE 
-- On PARD_IDENT reduce production expr -> FALSE 
-- On PARD reduce production expr -> FALSE 
-- On OR reduce production expr -> FALSE 
-- On NOT reduce production expr -> FALSE 
-- On NEQ reduce production expr -> FALSE 
-- On MUTABLE reduce production expr -> FALSE 
-- On MODULO reduce production expr -> FALSE 
-- On MINUS reduce production expr -> FALSE 
-- On LEQ reduce production expr -> FALSE 
-- On L reduce production expr -> FALSE 
-- On INT reduce production expr -> FALSE 
-- On IF reduce production expr -> FALSE 
-- On IDENT_PARG reduce production expr -> FALSE 
-- On IDENT reduce production expr -> FALSE 
-- On GEQ reduce production expr -> FALSE 
-- On G reduce production expr -> FALSE 
-- On FUNCTION reduce production expr -> FALSE 
-- On FOR reduce production expr -> FALSE 
-- On FALSE reduce production expr -> FALSE 
-- On EXP reduce production expr -> FALSE 
-- On EQ reduce production expr -> FALSE 
-- On EOF reduce production expr -> FALSE 
-- On ENTIER_PARG reduce production expr -> FALSE 
-- On ENTIER_IDENT reduce production expr -> FALSE 
-- On END reduce production expr -> FALSE 
-- On ELSEIF reduce production expr -> FALSE 
-- On ELSE reduce production expr -> FALSE 
-- On DOT reduce production expr -> FALSE 
-- On COMMA reduce production expr -> FALSE 
-- On COLON reduce production expr -> FALSE 
-- On CHAINE reduce production expr -> FALSE 
-- On AND reduce production expr -> FALSE 

State 15:
expr -> ENTIER_PARG . bloc1 PARD [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 50
-- On bloc1 shift to state 59

State 16:
expr -> ENTIER_IDENT . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE reduce production expr -> ENTIER_IDENT 
-- On TRUE reduce production expr -> ENTIER_IDENT 
-- On TIMES reduce production expr -> ENTIER_IDENT 
-- On STRUCT reduce production expr -> ENTIER_IDENT 
-- On SEMICOLON reduce production expr -> ENTIER_IDENT 
-- On RETURN reduce production expr -> ENTIER_IDENT 
-- On PLUS reduce production expr -> ENTIER_IDENT 
-- On PARG reduce production expr -> ENTIER_IDENT 
-- On PARD_IDENT reduce production expr -> ENTIER_IDENT 
-- On PARD reduce production expr -> ENTIER_IDENT 
-- On OR reduce production expr -> ENTIER_IDENT 
-- On NOT reduce production expr -> ENTIER_IDENT 
-- On NEQ reduce production expr -> ENTIER_IDENT 
-- On MUTABLE reduce production expr -> ENTIER_IDENT 
-- On MODULO reduce production expr -> ENTIER_IDENT 
-- On MINUS reduce production expr -> ENTIER_IDENT 
-- On LEQ reduce production expr -> ENTIER_IDENT 
-- On L reduce production expr -> ENTIER_IDENT 
-- On INT reduce production expr -> ENTIER_IDENT 
-- On IF reduce production expr -> ENTIER_IDENT 
-- On IDENT_PARG reduce production expr -> ENTIER_IDENT 
-- On IDENT reduce production expr -> ENTIER_IDENT 
-- On GEQ reduce production expr -> ENTIER_IDENT 
-- On G reduce production expr -> ENTIER_IDENT 
-- On FUNCTION reduce production expr -> ENTIER_IDENT 
-- On FOR reduce production expr -> ENTIER_IDENT 
-- On FALSE reduce production expr -> ENTIER_IDENT 
-- On EXP reduce production expr -> ENTIER_IDENT 
-- On EQ reduce production expr -> ENTIER_IDENT 
-- On EOF reduce production expr -> ENTIER_IDENT 
-- On ENTIER_PARG reduce production expr -> ENTIER_IDENT 
-- On ENTIER_IDENT reduce production expr -> ENTIER_IDENT 
-- On END reduce production expr -> ENTIER_IDENT 
-- On ELSEIF reduce production expr -> ENTIER_IDENT 
-- On ELSE reduce production expr -> ENTIER_IDENT 
-- On DOT reduce production expr -> ENTIER_IDENT 
-- On COMMA reduce production expr -> ENTIER_IDENT 
-- On COLON reduce production expr -> ENTIER_IDENT 
-- On CHAINE reduce production expr -> ENTIER_IDENT 
-- On AND reduce production expr -> ENTIER_IDENT 

State 17:
expr -> CHAINE . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE reduce production expr -> CHAINE 
-- On TRUE reduce production expr -> CHAINE 
-- On TIMES reduce production expr -> CHAINE 
-- On STRUCT reduce production expr -> CHAINE 
-- On SEMICOLON reduce production expr -> CHAINE 
-- On RETURN reduce production expr -> CHAINE 
-- On PLUS reduce production expr -> CHAINE 
-- On PARG reduce production expr -> CHAINE 
-- On PARD_IDENT reduce production expr -> CHAINE 
-- On PARD reduce production expr -> CHAINE 
-- On OR reduce production expr -> CHAINE 
-- On NOT reduce production expr -> CHAINE 
-- On NEQ reduce production expr -> CHAINE 
-- On MUTABLE reduce production expr -> CHAINE 
-- On MODULO reduce production expr -> CHAINE 
-- On MINUS reduce production expr -> CHAINE 
-- On LEQ reduce production expr -> CHAINE 
-- On L reduce production expr -> CHAINE 
-- On INT reduce production expr -> CHAINE 
-- On IF reduce production expr -> CHAINE 
-- On IDENT_PARG reduce production expr -> CHAINE 
-- On IDENT reduce production expr -> CHAINE 
-- On GEQ reduce production expr -> CHAINE 
-- On G reduce production expr -> CHAINE 
-- On FUNCTION reduce production expr -> CHAINE 
-- On FOR reduce production expr -> CHAINE 
-- On FALSE reduce production expr -> CHAINE 
-- On EXP reduce production expr -> CHAINE 
-- On EQ reduce production expr -> CHAINE 
-- On EOF reduce production expr -> CHAINE 
-- On ENTIER_PARG reduce production expr -> CHAINE 
-- On ENTIER_IDENT reduce production expr -> CHAINE 
-- On END reduce production expr -> CHAINE 
-- On ELSEIF reduce production expr -> CHAINE 
-- On ELSE reduce production expr -> CHAINE 
-- On DOT reduce production expr -> CHAINE 
-- On COMMA reduce production expr -> CHAINE 
-- On COLON reduce production expr -> CHAINE 
-- On CHAINE reduce production expr -> CHAINE 
-- On AND reduce production expr -> CHAINE 

State 18:
expr -> lvalue . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> lvalue . AFFECT expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On AFFECT shift to state 19
-- On WHILE reduce production expr -> lvalue 
-- On TRUE reduce production expr -> lvalue 
-- On TIMES reduce production expr -> lvalue 
-- On STRUCT reduce production expr -> lvalue 
-- On SEMICOLON reduce production expr -> lvalue 
-- On RETURN reduce production expr -> lvalue 
-- On PLUS reduce production expr -> lvalue 
-- On PARG reduce production expr -> lvalue 
-- On PARD_IDENT reduce production expr -> lvalue 
-- On PARD reduce production expr -> lvalue 
-- On OR reduce production expr -> lvalue 
-- On NOT reduce production expr -> lvalue 
-- On NEQ reduce production expr -> lvalue 
-- On MUTABLE reduce production expr -> lvalue 
-- On MODULO reduce production expr -> lvalue 
-- On MINUS reduce production expr -> lvalue 
-- On LEQ reduce production expr -> lvalue 
-- On L reduce production expr -> lvalue 
-- On INT reduce production expr -> lvalue 
-- On IF reduce production expr -> lvalue 
-- On IDENT_PARG reduce production expr -> lvalue 
-- On IDENT reduce production expr -> lvalue 
-- On GEQ reduce production expr -> lvalue 
-- On G reduce production expr -> lvalue 
-- On FUNCTION reduce production expr -> lvalue 
-- On FOR reduce production expr -> lvalue 
-- On FALSE reduce production expr -> lvalue 
-- On EXP reduce production expr -> lvalue 
-- On EQ reduce production expr -> lvalue 
-- On EOF reduce production expr -> lvalue 
-- On ENTIER_PARG reduce production expr -> lvalue 
-- On ENTIER_IDENT reduce production expr -> lvalue 
-- On END reduce production expr -> lvalue 
-- On ELSEIF reduce production expr -> lvalue 
-- On ELSE reduce production expr -> lvalue 
-- On DOT reduce production expr -> lvalue 
-- On COMMA reduce production expr -> lvalue 
-- On COLON reduce production expr -> lvalue 
-- On CHAINE reduce production expr -> lvalue 
-- On AND reduce production expr -> lvalue 

State 19:
expr -> lvalue AFFECT . expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 20

State 20:
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> lvalue AFFECT expr . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND AFFECT ]
-- On TIMES shift to state 21
-- On PLUS shift to state 28
-- On PARD_IDENT shift to state 23
-- On OR shift to state 32
-- On NEQ shift to state 34
-- On MODULO shift to state 30
-- On MINUS shift to state 36
-- On LEQ shift to state 38
-- On L shift to state 40
-- On GEQ shift to state 42
-- On G shift to state 44
-- On EXP shift to state 24
-- On EQ shift to state 46
-- On DOT shift to state 26
-- On AND shift to state 48
-- On WHILE reduce production expr -> lvalue AFFECT expr 
-- On TRUE reduce production expr -> lvalue AFFECT expr 
-- On STRUCT reduce production expr -> lvalue AFFECT expr 
-- On SEMICOLON reduce production expr -> lvalue AFFECT expr 
-- On RETURN reduce production expr -> lvalue AFFECT expr 
-- On PARG reduce production expr -> lvalue AFFECT expr 
-- On PARD_IDENT reduce production expr -> lvalue AFFECT expr 
-- On PARD reduce production expr -> lvalue AFFECT expr 
-- On NOT reduce production expr -> lvalue AFFECT expr 
-- On MUTABLE reduce production expr -> lvalue AFFECT expr 
-- On INT reduce production expr -> lvalue AFFECT expr 
-- On IF reduce production expr -> lvalue AFFECT expr 
-- On IDENT_PARG reduce production expr -> lvalue AFFECT expr 
-- On IDENT reduce production expr -> lvalue AFFECT expr 
-- On FUNCTION reduce production expr -> lvalue AFFECT expr 
-- On FOR reduce production expr -> lvalue AFFECT expr 
-- On FALSE reduce production expr -> lvalue AFFECT expr 
-- On EOF reduce production expr -> lvalue AFFECT expr 
-- On ENTIER_PARG reduce production expr -> lvalue AFFECT expr 
-- On ENTIER_IDENT reduce production expr -> lvalue AFFECT expr 
-- On END reduce production expr -> lvalue AFFECT expr 
-- On ELSEIF reduce production expr -> lvalue AFFECT expr 
-- On ELSE reduce production expr -> lvalue AFFECT expr 
-- On COMMA reduce production expr -> lvalue AFFECT expr 
-- On COLON reduce production expr -> lvalue AFFECT expr 
-- On CHAINE reduce production expr -> lvalue AFFECT expr 
** Conflict on PARD_IDENT

State 21:
expr -> expr TIMES . expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 22

State 22:
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr TIMES expr . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND AFFECT ]
-- On PARD_IDENT shift to state 23
-- On EXP shift to state 24
-- On DOT shift to state 26
-- On WHILE reduce production expr -> expr TIMES expr 
-- On TRUE reduce production expr -> expr TIMES expr 
-- On TIMES reduce production expr -> expr TIMES expr 
-- On STRUCT reduce production expr -> expr TIMES expr 
-- On SEMICOLON reduce production expr -> expr TIMES expr 
-- On RETURN reduce production expr -> expr TIMES expr 
-- On PLUS reduce production expr -> expr TIMES expr 
-- On PARG reduce production expr -> expr TIMES expr 
-- On PARD_IDENT reduce production expr -> expr TIMES expr 
-- On PARD reduce production expr -> expr TIMES expr 
-- On OR reduce production expr -> expr TIMES expr 
-- On NOT reduce production expr -> expr TIMES expr 
-- On NEQ reduce production expr -> expr TIMES expr 
-- On MUTABLE reduce production expr -> expr TIMES expr 
-- On MODULO reduce production expr -> expr TIMES expr 
-- On MINUS reduce production expr -> expr TIMES expr 
-- On LEQ reduce production expr -> expr TIMES expr 
-- On L reduce production expr -> expr TIMES expr 
-- On INT reduce production expr -> expr TIMES expr 
-- On IF reduce production expr -> expr TIMES expr 
-- On IDENT_PARG reduce production expr -> expr TIMES expr 
-- On IDENT reduce production expr -> expr TIMES expr 
-- On GEQ reduce production expr -> expr TIMES expr 
-- On G reduce production expr -> expr TIMES expr 
-- On FUNCTION reduce production expr -> expr TIMES expr 
-- On FOR reduce production expr -> expr TIMES expr 
-- On FALSE reduce production expr -> expr TIMES expr 
-- On EQ reduce production expr -> expr TIMES expr 
-- On EOF reduce production expr -> expr TIMES expr 
-- On ENTIER_PARG reduce production expr -> expr TIMES expr 
-- On ENTIER_IDENT reduce production expr -> expr TIMES expr 
-- On END reduce production expr -> expr TIMES expr 
-- On ELSEIF reduce production expr -> expr TIMES expr 
-- On ELSE reduce production expr -> expr TIMES expr 
-- On COMMA reduce production expr -> expr TIMES expr 
-- On COLON reduce production expr -> expr TIMES expr 
-- On CHAINE reduce production expr -> expr TIMES expr 
-- On AND reduce production expr -> expr TIMES expr 
** Conflict on PARD_IDENT

State 23:
expr -> expr PARD_IDENT . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE reduce production expr -> expr PARD_IDENT 
-- On TRUE reduce production expr -> expr PARD_IDENT 
-- On TIMES reduce production expr -> expr PARD_IDENT 
-- On STRUCT reduce production expr -> expr PARD_IDENT 
-- On SEMICOLON reduce production expr -> expr PARD_IDENT 
-- On RETURN reduce production expr -> expr PARD_IDENT 
-- On PLUS reduce production expr -> expr PARD_IDENT 
-- On PARG reduce production expr -> expr PARD_IDENT 
-- On PARD_IDENT reduce production expr -> expr PARD_IDENT 
-- On PARD reduce production expr -> expr PARD_IDENT 
-- On OR reduce production expr -> expr PARD_IDENT 
-- On NOT reduce production expr -> expr PARD_IDENT 
-- On NEQ reduce production expr -> expr PARD_IDENT 
-- On MUTABLE reduce production expr -> expr PARD_IDENT 
-- On MODULO reduce production expr -> expr PARD_IDENT 
-- On MINUS reduce production expr -> expr PARD_IDENT 
-- On LEQ reduce production expr -> expr PARD_IDENT 
-- On L reduce production expr -> expr PARD_IDENT 
-- On INT reduce production expr -> expr PARD_IDENT 
-- On IF reduce production expr -> expr PARD_IDENT 
-- On IDENT_PARG reduce production expr -> expr PARD_IDENT 
-- On IDENT reduce production expr -> expr PARD_IDENT 
-- On GEQ reduce production expr -> expr PARD_IDENT 
-- On G reduce production expr -> expr PARD_IDENT 
-- On FUNCTION reduce production expr -> expr PARD_IDENT 
-- On FOR reduce production expr -> expr PARD_IDENT 
-- On FALSE reduce production expr -> expr PARD_IDENT 
-- On EXP reduce production expr -> expr PARD_IDENT 
-- On EQ reduce production expr -> expr PARD_IDENT 
-- On EOF reduce production expr -> expr PARD_IDENT 
-- On ENTIER_PARG reduce production expr -> expr PARD_IDENT 
-- On ENTIER_IDENT reduce production expr -> expr PARD_IDENT 
-- On END reduce production expr -> expr PARD_IDENT 
-- On ELSEIF reduce production expr -> expr PARD_IDENT 
-- On ELSE reduce production expr -> expr PARD_IDENT 
-- On DOT reduce production expr -> expr PARD_IDENT 
-- On COMMA reduce production expr -> expr PARD_IDENT 
-- On COLON reduce production expr -> expr PARD_IDENT 
-- On CHAINE reduce production expr -> expr PARD_IDENT 
-- On AND reduce production expr -> expr PARD_IDENT 

State 24:
expr -> expr EXP . expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 25

State 25:
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr EXP expr . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND AFFECT ]
-- On PARD_IDENT shift to state 23
-- On EXP shift to state 24
-- On DOT shift to state 26
-- On WHILE reduce production expr -> expr EXP expr 
-- On TRUE reduce production expr -> expr EXP expr 
-- On TIMES reduce production expr -> expr EXP expr 
-- On STRUCT reduce production expr -> expr EXP expr 
-- On SEMICOLON reduce production expr -> expr EXP expr 
-- On RETURN reduce production expr -> expr EXP expr 
-- On PLUS reduce production expr -> expr EXP expr 
-- On PARG reduce production expr -> expr EXP expr 
-- On PARD_IDENT reduce production expr -> expr EXP expr 
-- On PARD reduce production expr -> expr EXP expr 
-- On OR reduce production expr -> expr EXP expr 
-- On NOT reduce production expr -> expr EXP expr 
-- On NEQ reduce production expr -> expr EXP expr 
-- On MUTABLE reduce production expr -> expr EXP expr 
-- On MODULO reduce production expr -> expr EXP expr 
-- On MINUS reduce production expr -> expr EXP expr 
-- On LEQ reduce production expr -> expr EXP expr 
-- On L reduce production expr -> expr EXP expr 
-- On INT reduce production expr -> expr EXP expr 
-- On IF reduce production expr -> expr EXP expr 
-- On IDENT_PARG reduce production expr -> expr EXP expr 
-- On IDENT reduce production expr -> expr EXP expr 
-- On GEQ reduce production expr -> expr EXP expr 
-- On G reduce production expr -> expr EXP expr 
-- On FUNCTION reduce production expr -> expr EXP expr 
-- On FOR reduce production expr -> expr EXP expr 
-- On FALSE reduce production expr -> expr EXP expr 
-- On EQ reduce production expr -> expr EXP expr 
-- On EOF reduce production expr -> expr EXP expr 
-- On ENTIER_PARG reduce production expr -> expr EXP expr 
-- On ENTIER_IDENT reduce production expr -> expr EXP expr 
-- On END reduce production expr -> expr EXP expr 
-- On ELSEIF reduce production expr -> expr EXP expr 
-- On ELSE reduce production expr -> expr EXP expr 
-- On COMMA reduce production expr -> expr EXP expr 
-- On COLON reduce production expr -> expr EXP expr 
-- On CHAINE reduce production expr -> expr EXP expr 
-- On AND reduce production expr -> expr EXP expr 
** Conflict on PARD_IDENT

State 26:
lvalue -> expr DOT . IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND AFFECT ]
-- On IDENT shift to state 27

State 27:
lvalue -> expr DOT IDENT . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND AFFECT ]
-- On WHILE reduce production lvalue -> expr DOT IDENT 
-- On TRUE reduce production lvalue -> expr DOT IDENT 
-- On TIMES reduce production lvalue -> expr DOT IDENT 
-- On STRUCT reduce production lvalue -> expr DOT IDENT 
-- On SEMICOLON reduce production lvalue -> expr DOT IDENT 
-- On RETURN reduce production lvalue -> expr DOT IDENT 
-- On PLUS reduce production lvalue -> expr DOT IDENT 
-- On PARG reduce production lvalue -> expr DOT IDENT 
-- On PARD_IDENT reduce production lvalue -> expr DOT IDENT 
-- On PARD reduce production lvalue -> expr DOT IDENT 
-- On OR reduce production lvalue -> expr DOT IDENT 
-- On NOT reduce production lvalue -> expr DOT IDENT 
-- On NEQ reduce production lvalue -> expr DOT IDENT 
-- On MUTABLE reduce production lvalue -> expr DOT IDENT 
-- On MODULO reduce production lvalue -> expr DOT IDENT 
-- On MINUS reduce production lvalue -> expr DOT IDENT 
-- On LEQ reduce production lvalue -> expr DOT IDENT 
-- On L reduce production lvalue -> expr DOT IDENT 
-- On INT reduce production lvalue -> expr DOT IDENT 
-- On IF reduce production lvalue -> expr DOT IDENT 
-- On IDENT_PARG reduce production lvalue -> expr DOT IDENT 
-- On IDENT reduce production lvalue -> expr DOT IDENT 
-- On GEQ reduce production lvalue -> expr DOT IDENT 
-- On G reduce production lvalue -> expr DOT IDENT 
-- On FUNCTION reduce production lvalue -> expr DOT IDENT 
-- On FOR reduce production lvalue -> expr DOT IDENT 
-- On FALSE reduce production lvalue -> expr DOT IDENT 
-- On EXP reduce production lvalue -> expr DOT IDENT 
-- On EQ reduce production lvalue -> expr DOT IDENT 
-- On EOF reduce production lvalue -> expr DOT IDENT 
-- On ENTIER_PARG reduce production lvalue -> expr DOT IDENT 
-- On ENTIER_IDENT reduce production lvalue -> expr DOT IDENT 
-- On END reduce production lvalue -> expr DOT IDENT 
-- On ELSEIF reduce production lvalue -> expr DOT IDENT 
-- On ELSE reduce production lvalue -> expr DOT IDENT 
-- On DOT reduce production lvalue -> expr DOT IDENT 
-- On COMMA reduce production lvalue -> expr DOT IDENT 
-- On COLON reduce production lvalue -> expr DOT IDENT 
-- On CHAINE reduce production lvalue -> expr DOT IDENT 
-- On AND reduce production lvalue -> expr DOT IDENT 
-- On AFFECT reduce production lvalue -> expr DOT IDENT 

State 28:
expr -> expr PLUS . expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 29

State 29:
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr PLUS expr . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND AFFECT ]
-- On TIMES shift to state 21
-- On PARD_IDENT shift to state 23
-- On MODULO shift to state 30
-- On EXP shift to state 24
-- On DOT shift to state 26
-- On WHILE reduce production expr -> expr PLUS expr 
-- On TRUE reduce production expr -> expr PLUS expr 
-- On STRUCT reduce production expr -> expr PLUS expr 
-- On SEMICOLON reduce production expr -> expr PLUS expr 
-- On RETURN reduce production expr -> expr PLUS expr 
-- On PLUS reduce production expr -> expr PLUS expr 
-- On PARG reduce production expr -> expr PLUS expr 
-- On PARD_IDENT reduce production expr -> expr PLUS expr 
-- On PARD reduce production expr -> expr PLUS expr 
-- On OR reduce production expr -> expr PLUS expr 
-- On NOT reduce production expr -> expr PLUS expr 
-- On NEQ reduce production expr -> expr PLUS expr 
-- On MUTABLE reduce production expr -> expr PLUS expr 
-- On MINUS reduce production expr -> expr PLUS expr 
-- On LEQ reduce production expr -> expr PLUS expr 
-- On L reduce production expr -> expr PLUS expr 
-- On INT reduce production expr -> expr PLUS expr 
-- On IF reduce production expr -> expr PLUS expr 
-- On IDENT_PARG reduce production expr -> expr PLUS expr 
-- On IDENT reduce production expr -> expr PLUS expr 
-- On GEQ reduce production expr -> expr PLUS expr 
-- On G reduce production expr -> expr PLUS expr 
-- On FUNCTION reduce production expr -> expr PLUS expr 
-- On FOR reduce production expr -> expr PLUS expr 
-- On FALSE reduce production expr -> expr PLUS expr 
-- On EQ reduce production expr -> expr PLUS expr 
-- On EOF reduce production expr -> expr PLUS expr 
-- On ENTIER_PARG reduce production expr -> expr PLUS expr 
-- On ENTIER_IDENT reduce production expr -> expr PLUS expr 
-- On END reduce production expr -> expr PLUS expr 
-- On ELSEIF reduce production expr -> expr PLUS expr 
-- On ELSE reduce production expr -> expr PLUS expr 
-- On COMMA reduce production expr -> expr PLUS expr 
-- On COLON reduce production expr -> expr PLUS expr 
-- On CHAINE reduce production expr -> expr PLUS expr 
-- On AND reduce production expr -> expr PLUS expr 
** Conflict on PARD_IDENT

State 30:
expr -> expr MODULO . expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 31

State 31:
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr MODULO expr . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND AFFECT ]
-- On PARD_IDENT shift to state 23
-- On EXP shift to state 24
-- On DOT shift to state 26
-- On WHILE reduce production expr -> expr MODULO expr 
-- On TRUE reduce production expr -> expr MODULO expr 
-- On TIMES reduce production expr -> expr MODULO expr 
-- On STRUCT reduce production expr -> expr MODULO expr 
-- On SEMICOLON reduce production expr -> expr MODULO expr 
-- On RETURN reduce production expr -> expr MODULO expr 
-- On PLUS reduce production expr -> expr MODULO expr 
-- On PARG reduce production expr -> expr MODULO expr 
-- On PARD_IDENT reduce production expr -> expr MODULO expr 
-- On PARD reduce production expr -> expr MODULO expr 
-- On OR reduce production expr -> expr MODULO expr 
-- On NOT reduce production expr -> expr MODULO expr 
-- On NEQ reduce production expr -> expr MODULO expr 
-- On MUTABLE reduce production expr -> expr MODULO expr 
-- On MODULO reduce production expr -> expr MODULO expr 
-- On MINUS reduce production expr -> expr MODULO expr 
-- On LEQ reduce production expr -> expr MODULO expr 
-- On L reduce production expr -> expr MODULO expr 
-- On INT reduce production expr -> expr MODULO expr 
-- On IF reduce production expr -> expr MODULO expr 
-- On IDENT_PARG reduce production expr -> expr MODULO expr 
-- On IDENT reduce production expr -> expr MODULO expr 
-- On GEQ reduce production expr -> expr MODULO expr 
-- On G reduce production expr -> expr MODULO expr 
-- On FUNCTION reduce production expr -> expr MODULO expr 
-- On FOR reduce production expr -> expr MODULO expr 
-- On FALSE reduce production expr -> expr MODULO expr 
-- On EQ reduce production expr -> expr MODULO expr 
-- On EOF reduce production expr -> expr MODULO expr 
-- On ENTIER_PARG reduce production expr -> expr MODULO expr 
-- On ENTIER_IDENT reduce production expr -> expr MODULO expr 
-- On END reduce production expr -> expr MODULO expr 
-- On ELSEIF reduce production expr -> expr MODULO expr 
-- On ELSE reduce production expr -> expr MODULO expr 
-- On COMMA reduce production expr -> expr MODULO expr 
-- On COLON reduce production expr -> expr MODULO expr 
-- On CHAINE reduce production expr -> expr MODULO expr 
-- On AND reduce production expr -> expr MODULO expr 
** Conflict on PARD_IDENT

State 32:
expr -> expr OR . expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 33

State 33:
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr OR expr . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND AFFECT ]
-- On TIMES shift to state 21
-- On PLUS shift to state 28
-- On PARD_IDENT shift to state 23
-- On NEQ shift to state 34
-- On MODULO shift to state 30
-- On MINUS shift to state 36
-- On LEQ shift to state 38
-- On L shift to state 40
-- On GEQ shift to state 42
-- On G shift to state 44
-- On EXP shift to state 24
-- On EQ shift to state 46
-- On DOT shift to state 26
-- On AND shift to state 48
-- On WHILE reduce production expr -> expr OR expr 
-- On TRUE reduce production expr -> expr OR expr 
-- On STRUCT reduce production expr -> expr OR expr 
-- On SEMICOLON reduce production expr -> expr OR expr 
-- On RETURN reduce production expr -> expr OR expr 
-- On PARG reduce production expr -> expr OR expr 
-- On PARD_IDENT reduce production expr -> expr OR expr 
-- On PARD reduce production expr -> expr OR expr 
-- On OR reduce production expr -> expr OR expr 
-- On NOT reduce production expr -> expr OR expr 
-- On MUTABLE reduce production expr -> expr OR expr 
-- On INT reduce production expr -> expr OR expr 
-- On IF reduce production expr -> expr OR expr 
-- On IDENT_PARG reduce production expr -> expr OR expr 
-- On IDENT reduce production expr -> expr OR expr 
-- On FUNCTION reduce production expr -> expr OR expr 
-- On FOR reduce production expr -> expr OR expr 
-- On FALSE reduce production expr -> expr OR expr 
-- On EOF reduce production expr -> expr OR expr 
-- On ENTIER_PARG reduce production expr -> expr OR expr 
-- On ENTIER_IDENT reduce production expr -> expr OR expr 
-- On END reduce production expr -> expr OR expr 
-- On ELSEIF reduce production expr -> expr OR expr 
-- On ELSE reduce production expr -> expr OR expr 
-- On COMMA reduce production expr -> expr OR expr 
-- On COLON reduce production expr -> expr OR expr 
-- On CHAINE reduce production expr -> expr OR expr 
** Conflict on PARD_IDENT

State 34:
expr -> expr NEQ . expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 35

State 35:
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr NEQ expr . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND AFFECT ]
-- On TIMES shift to state 21
-- On PLUS shift to state 28
-- On PARD_IDENT shift to state 23
-- On MODULO shift to state 30
-- On MINUS shift to state 36
-- On EXP shift to state 24
-- On DOT shift to state 26
-- On WHILE reduce production expr -> expr NEQ expr 
-- On TRUE reduce production expr -> expr NEQ expr 
-- On STRUCT reduce production expr -> expr NEQ expr 
-- On SEMICOLON reduce production expr -> expr NEQ expr 
-- On RETURN reduce production expr -> expr NEQ expr 
-- On PARG reduce production expr -> expr NEQ expr 
-- On PARD_IDENT reduce production expr -> expr NEQ expr 
-- On PARD reduce production expr -> expr NEQ expr 
-- On OR reduce production expr -> expr NEQ expr 
-- On NOT reduce production expr -> expr NEQ expr 
-- On NEQ reduce production expr -> expr NEQ expr 
-- On MUTABLE reduce production expr -> expr NEQ expr 
-- On LEQ reduce production expr -> expr NEQ expr 
-- On L reduce production expr -> expr NEQ expr 
-- On INT reduce production expr -> expr NEQ expr 
-- On IF reduce production expr -> expr NEQ expr 
-- On IDENT_PARG reduce production expr -> expr NEQ expr 
-- On IDENT reduce production expr -> expr NEQ expr 
-- On GEQ reduce production expr -> expr NEQ expr 
-- On G reduce production expr -> expr NEQ expr 
-- On FUNCTION reduce production expr -> expr NEQ expr 
-- On FOR reduce production expr -> expr NEQ expr 
-- On FALSE reduce production expr -> expr NEQ expr 
-- On EQ reduce production expr -> expr NEQ expr 
-- On EOF reduce production expr -> expr NEQ expr 
-- On ENTIER_PARG reduce production expr -> expr NEQ expr 
-- On ENTIER_IDENT reduce production expr -> expr NEQ expr 
-- On END reduce production expr -> expr NEQ expr 
-- On ELSEIF reduce production expr -> expr NEQ expr 
-- On ELSE reduce production expr -> expr NEQ expr 
-- On COMMA reduce production expr -> expr NEQ expr 
-- On COLON reduce production expr -> expr NEQ expr 
-- On CHAINE reduce production expr -> expr NEQ expr 
-- On AND reduce production expr -> expr NEQ expr 
** Conflict on PARD_IDENT

State 36:
expr -> expr MINUS . expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 37

State 37:
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr MINUS expr . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND AFFECT ]
-- On TIMES shift to state 21
-- On PARD_IDENT shift to state 23
-- On MODULO shift to state 30
-- On EXP shift to state 24
-- On DOT shift to state 26
-- On WHILE reduce production expr -> expr MINUS expr 
-- On TRUE reduce production expr -> expr MINUS expr 
-- On STRUCT reduce production expr -> expr MINUS expr 
-- On SEMICOLON reduce production expr -> expr MINUS expr 
-- On RETURN reduce production expr -> expr MINUS expr 
-- On PLUS reduce production expr -> expr MINUS expr 
-- On PARG reduce production expr -> expr MINUS expr 
-- On PARD_IDENT reduce production expr -> expr MINUS expr 
-- On PARD reduce production expr -> expr MINUS expr 
-- On OR reduce production expr -> expr MINUS expr 
-- On NOT reduce production expr -> expr MINUS expr 
-- On NEQ reduce production expr -> expr MINUS expr 
-- On MUTABLE reduce production expr -> expr MINUS expr 
-- On MINUS reduce production expr -> expr MINUS expr 
-- On LEQ reduce production expr -> expr MINUS expr 
-- On L reduce production expr -> expr MINUS expr 
-- On INT reduce production expr -> expr MINUS expr 
-- On IF reduce production expr -> expr MINUS expr 
-- On IDENT_PARG reduce production expr -> expr MINUS expr 
-- On IDENT reduce production expr -> expr MINUS expr 
-- On GEQ reduce production expr -> expr MINUS expr 
-- On G reduce production expr -> expr MINUS expr 
-- On FUNCTION reduce production expr -> expr MINUS expr 
-- On FOR reduce production expr -> expr MINUS expr 
-- On FALSE reduce production expr -> expr MINUS expr 
-- On EQ reduce production expr -> expr MINUS expr 
-- On EOF reduce production expr -> expr MINUS expr 
-- On ENTIER_PARG reduce production expr -> expr MINUS expr 
-- On ENTIER_IDENT reduce production expr -> expr MINUS expr 
-- On END reduce production expr -> expr MINUS expr 
-- On ELSEIF reduce production expr -> expr MINUS expr 
-- On ELSE reduce production expr -> expr MINUS expr 
-- On COMMA reduce production expr -> expr MINUS expr 
-- On COLON reduce production expr -> expr MINUS expr 
-- On CHAINE reduce production expr -> expr MINUS expr 
-- On AND reduce production expr -> expr MINUS expr 
** Conflict on PARD_IDENT

State 38:
expr -> expr LEQ . expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 39

State 39:
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr LEQ expr . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND AFFECT ]
-- On TIMES shift to state 21
-- On PLUS shift to state 28
-- On PARD_IDENT shift to state 23
-- On MODULO shift to state 30
-- On MINUS shift to state 36
-- On EXP shift to state 24
-- On DOT shift to state 26
-- On WHILE reduce production expr -> expr LEQ expr 
-- On TRUE reduce production expr -> expr LEQ expr 
-- On STRUCT reduce production expr -> expr LEQ expr 
-- On SEMICOLON reduce production expr -> expr LEQ expr 
-- On RETURN reduce production expr -> expr LEQ expr 
-- On PARG reduce production expr -> expr LEQ expr 
-- On PARD_IDENT reduce production expr -> expr LEQ expr 
-- On PARD reduce production expr -> expr LEQ expr 
-- On OR reduce production expr -> expr LEQ expr 
-- On NOT reduce production expr -> expr LEQ expr 
-- On NEQ reduce production expr -> expr LEQ expr 
-- On MUTABLE reduce production expr -> expr LEQ expr 
-- On LEQ reduce production expr -> expr LEQ expr 
-- On L reduce production expr -> expr LEQ expr 
-- On INT reduce production expr -> expr LEQ expr 
-- On IF reduce production expr -> expr LEQ expr 
-- On IDENT_PARG reduce production expr -> expr LEQ expr 
-- On IDENT reduce production expr -> expr LEQ expr 
-- On GEQ reduce production expr -> expr LEQ expr 
-- On G reduce production expr -> expr LEQ expr 
-- On FUNCTION reduce production expr -> expr LEQ expr 
-- On FOR reduce production expr -> expr LEQ expr 
-- On FALSE reduce production expr -> expr LEQ expr 
-- On EQ reduce production expr -> expr LEQ expr 
-- On EOF reduce production expr -> expr LEQ expr 
-- On ENTIER_PARG reduce production expr -> expr LEQ expr 
-- On ENTIER_IDENT reduce production expr -> expr LEQ expr 
-- On END reduce production expr -> expr LEQ expr 
-- On ELSEIF reduce production expr -> expr LEQ expr 
-- On ELSE reduce production expr -> expr LEQ expr 
-- On COMMA reduce production expr -> expr LEQ expr 
-- On COLON reduce production expr -> expr LEQ expr 
-- On CHAINE reduce production expr -> expr LEQ expr 
-- On AND reduce production expr -> expr LEQ expr 
** Conflict on PARD_IDENT

State 40:
expr -> expr L . expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 41

State 41:
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr L expr . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND AFFECT ]
-- On TIMES shift to state 21
-- On PLUS shift to state 28
-- On PARD_IDENT shift to state 23
-- On MODULO shift to state 30
-- On MINUS shift to state 36
-- On EXP shift to state 24
-- On DOT shift to state 26
-- On WHILE reduce production expr -> expr L expr 
-- On TRUE reduce production expr -> expr L expr 
-- On STRUCT reduce production expr -> expr L expr 
-- On SEMICOLON reduce production expr -> expr L expr 
-- On RETURN reduce production expr -> expr L expr 
-- On PARG reduce production expr -> expr L expr 
-- On PARD_IDENT reduce production expr -> expr L expr 
-- On PARD reduce production expr -> expr L expr 
-- On OR reduce production expr -> expr L expr 
-- On NOT reduce production expr -> expr L expr 
-- On NEQ reduce production expr -> expr L expr 
-- On MUTABLE reduce production expr -> expr L expr 
-- On LEQ reduce production expr -> expr L expr 
-- On L reduce production expr -> expr L expr 
-- On INT reduce production expr -> expr L expr 
-- On IF reduce production expr -> expr L expr 
-- On IDENT_PARG reduce production expr -> expr L expr 
-- On IDENT reduce production expr -> expr L expr 
-- On GEQ reduce production expr -> expr L expr 
-- On G reduce production expr -> expr L expr 
-- On FUNCTION reduce production expr -> expr L expr 
-- On FOR reduce production expr -> expr L expr 
-- On FALSE reduce production expr -> expr L expr 
-- On EQ reduce production expr -> expr L expr 
-- On EOF reduce production expr -> expr L expr 
-- On ENTIER_PARG reduce production expr -> expr L expr 
-- On ENTIER_IDENT reduce production expr -> expr L expr 
-- On END reduce production expr -> expr L expr 
-- On ELSEIF reduce production expr -> expr L expr 
-- On ELSE reduce production expr -> expr L expr 
-- On COMMA reduce production expr -> expr L expr 
-- On COLON reduce production expr -> expr L expr 
-- On CHAINE reduce production expr -> expr L expr 
-- On AND reduce production expr -> expr L expr 
** Conflict on PARD_IDENT

State 42:
expr -> expr GEQ . expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 43

State 43:
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr GEQ expr . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND AFFECT ]
-- On TIMES shift to state 21
-- On PLUS shift to state 28
-- On PARD_IDENT shift to state 23
-- On MODULO shift to state 30
-- On MINUS shift to state 36
-- On EXP shift to state 24
-- On DOT shift to state 26
-- On WHILE reduce production expr -> expr GEQ expr 
-- On TRUE reduce production expr -> expr GEQ expr 
-- On STRUCT reduce production expr -> expr GEQ expr 
-- On SEMICOLON reduce production expr -> expr GEQ expr 
-- On RETURN reduce production expr -> expr GEQ expr 
-- On PARG reduce production expr -> expr GEQ expr 
-- On PARD_IDENT reduce production expr -> expr GEQ expr 
-- On PARD reduce production expr -> expr GEQ expr 
-- On OR reduce production expr -> expr GEQ expr 
-- On NOT reduce production expr -> expr GEQ expr 
-- On NEQ reduce production expr -> expr GEQ expr 
-- On MUTABLE reduce production expr -> expr GEQ expr 
-- On LEQ reduce production expr -> expr GEQ expr 
-- On L reduce production expr -> expr GEQ expr 
-- On INT reduce production expr -> expr GEQ expr 
-- On IF reduce production expr -> expr GEQ expr 
-- On IDENT_PARG reduce production expr -> expr GEQ expr 
-- On IDENT reduce production expr -> expr GEQ expr 
-- On GEQ reduce production expr -> expr GEQ expr 
-- On G reduce production expr -> expr GEQ expr 
-- On FUNCTION reduce production expr -> expr GEQ expr 
-- On FOR reduce production expr -> expr GEQ expr 
-- On FALSE reduce production expr -> expr GEQ expr 
-- On EQ reduce production expr -> expr GEQ expr 
-- On EOF reduce production expr -> expr GEQ expr 
-- On ENTIER_PARG reduce production expr -> expr GEQ expr 
-- On ENTIER_IDENT reduce production expr -> expr GEQ expr 
-- On END reduce production expr -> expr GEQ expr 
-- On ELSEIF reduce production expr -> expr GEQ expr 
-- On ELSE reduce production expr -> expr GEQ expr 
-- On COMMA reduce production expr -> expr GEQ expr 
-- On COLON reduce production expr -> expr GEQ expr 
-- On CHAINE reduce production expr -> expr GEQ expr 
-- On AND reduce production expr -> expr GEQ expr 
** Conflict on PARD_IDENT

State 44:
expr -> expr G . expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 45

State 45:
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr G expr . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND AFFECT ]
-- On TIMES shift to state 21
-- On PLUS shift to state 28
-- On PARD_IDENT shift to state 23
-- On MODULO shift to state 30
-- On MINUS shift to state 36
-- On EXP shift to state 24
-- On DOT shift to state 26
-- On WHILE reduce production expr -> expr G expr 
-- On TRUE reduce production expr -> expr G expr 
-- On STRUCT reduce production expr -> expr G expr 
-- On SEMICOLON reduce production expr -> expr G expr 
-- On RETURN reduce production expr -> expr G expr 
-- On PARG reduce production expr -> expr G expr 
-- On PARD_IDENT reduce production expr -> expr G expr 
-- On PARD reduce production expr -> expr G expr 
-- On OR reduce production expr -> expr G expr 
-- On NOT reduce production expr -> expr G expr 
-- On NEQ reduce production expr -> expr G expr 
-- On MUTABLE reduce production expr -> expr G expr 
-- On LEQ reduce production expr -> expr G expr 
-- On L reduce production expr -> expr G expr 
-- On INT reduce production expr -> expr G expr 
-- On IF reduce production expr -> expr G expr 
-- On IDENT_PARG reduce production expr -> expr G expr 
-- On IDENT reduce production expr -> expr G expr 
-- On GEQ reduce production expr -> expr G expr 
-- On G reduce production expr -> expr G expr 
-- On FUNCTION reduce production expr -> expr G expr 
-- On FOR reduce production expr -> expr G expr 
-- On FALSE reduce production expr -> expr G expr 
-- On EQ reduce production expr -> expr G expr 
-- On EOF reduce production expr -> expr G expr 
-- On ENTIER_PARG reduce production expr -> expr G expr 
-- On ENTIER_IDENT reduce production expr -> expr G expr 
-- On END reduce production expr -> expr G expr 
-- On ELSEIF reduce production expr -> expr G expr 
-- On ELSE reduce production expr -> expr G expr 
-- On COMMA reduce production expr -> expr G expr 
-- On COLON reduce production expr -> expr G expr 
-- On CHAINE reduce production expr -> expr G expr 
-- On AND reduce production expr -> expr G expr 
** Conflict on PARD_IDENT

State 46:
expr -> expr EQ . expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 47

State 47:
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr EQ expr . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND AFFECT ]
-- On TIMES shift to state 21
-- On PLUS shift to state 28
-- On PARD_IDENT shift to state 23
-- On MODULO shift to state 30
-- On MINUS shift to state 36
-- On EXP shift to state 24
-- On DOT shift to state 26
-- On WHILE reduce production expr -> expr EQ expr 
-- On TRUE reduce production expr -> expr EQ expr 
-- On STRUCT reduce production expr -> expr EQ expr 
-- On SEMICOLON reduce production expr -> expr EQ expr 
-- On RETURN reduce production expr -> expr EQ expr 
-- On PARG reduce production expr -> expr EQ expr 
-- On PARD_IDENT reduce production expr -> expr EQ expr 
-- On PARD reduce production expr -> expr EQ expr 
-- On OR reduce production expr -> expr EQ expr 
-- On NOT reduce production expr -> expr EQ expr 
-- On NEQ reduce production expr -> expr EQ expr 
-- On MUTABLE reduce production expr -> expr EQ expr 
-- On LEQ reduce production expr -> expr EQ expr 
-- On L reduce production expr -> expr EQ expr 
-- On INT reduce production expr -> expr EQ expr 
-- On IF reduce production expr -> expr EQ expr 
-- On IDENT_PARG reduce production expr -> expr EQ expr 
-- On IDENT reduce production expr -> expr EQ expr 
-- On GEQ reduce production expr -> expr EQ expr 
-- On G reduce production expr -> expr EQ expr 
-- On FUNCTION reduce production expr -> expr EQ expr 
-- On FOR reduce production expr -> expr EQ expr 
-- On FALSE reduce production expr -> expr EQ expr 
-- On EQ reduce production expr -> expr EQ expr 
-- On EOF reduce production expr -> expr EQ expr 
-- On ENTIER_PARG reduce production expr -> expr EQ expr 
-- On ENTIER_IDENT reduce production expr -> expr EQ expr 
-- On END reduce production expr -> expr EQ expr 
-- On ELSEIF reduce production expr -> expr EQ expr 
-- On ELSE reduce production expr -> expr EQ expr 
-- On COMMA reduce production expr -> expr EQ expr 
-- On COLON reduce production expr -> expr EQ expr 
-- On CHAINE reduce production expr -> expr EQ expr 
-- On AND reduce production expr -> expr EQ expr 
** Conflict on PARD_IDENT

State 48:
expr -> expr AND . expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 49

State 49:
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr AND expr . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND AFFECT ]
-- On TIMES shift to state 21
-- On PLUS shift to state 28
-- On PARD_IDENT shift to state 23
-- On NEQ shift to state 34
-- On MODULO shift to state 30
-- On MINUS shift to state 36
-- On LEQ shift to state 38
-- On L shift to state 40
-- On GEQ shift to state 42
-- On G shift to state 44
-- On EXP shift to state 24
-- On EQ shift to state 46
-- On DOT shift to state 26
-- On WHILE reduce production expr -> expr AND expr 
-- On TRUE reduce production expr -> expr AND expr 
-- On STRUCT reduce production expr -> expr AND expr 
-- On SEMICOLON reduce production expr -> expr AND expr 
-- On RETURN reduce production expr -> expr AND expr 
-- On PARG reduce production expr -> expr AND expr 
-- On PARD_IDENT reduce production expr -> expr AND expr 
-- On PARD reduce production expr -> expr AND expr 
-- On OR reduce production expr -> expr AND expr 
-- On NOT reduce production expr -> expr AND expr 
-- On MUTABLE reduce production expr -> expr AND expr 
-- On INT reduce production expr -> expr AND expr 
-- On IF reduce production expr -> expr AND expr 
-- On IDENT_PARG reduce production expr -> expr AND expr 
-- On IDENT reduce production expr -> expr AND expr 
-- On FUNCTION reduce production expr -> expr AND expr 
-- On FOR reduce production expr -> expr AND expr 
-- On FALSE reduce production expr -> expr AND expr 
-- On EOF reduce production expr -> expr AND expr 
-- On ENTIER_PARG reduce production expr -> expr AND expr 
-- On ENTIER_IDENT reduce production expr -> expr AND expr 
-- On END reduce production expr -> expr AND expr 
-- On ELSEIF reduce production expr -> expr AND expr 
-- On ELSE reduce production expr -> expr AND expr 
-- On COMMA reduce production expr -> expr AND expr 
-- On COLON reduce production expr -> expr AND expr 
-- On CHAINE reduce production expr -> expr AND expr 
-- On AND reduce production expr -> expr AND expr 
** Conflict on PARD_IDENT

State 50:
bloc1 -> expr . [ PARD ]
bloc1 -> expr . SEMICOLON bloc [ PARD ]
expr -> expr . PARD_IDENT [ TIMES SEMICOLON PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT AND ]
expr -> expr . EQ expr [ TIMES SEMICOLON PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT AND ]
expr -> expr . NEQ expr [ TIMES SEMICOLON PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT AND ]
expr -> expr . L expr [ TIMES SEMICOLON PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT AND ]
expr -> expr . G expr [ TIMES SEMICOLON PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT AND ]
expr -> expr . LEQ expr [ TIMES SEMICOLON PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT AND ]
expr -> expr . GEQ expr [ TIMES SEMICOLON PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT AND ]
expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT AND ]
expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT AND ]
expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT AND ]
expr -> expr . MODULO expr [ TIMES SEMICOLON PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT AND ]
expr -> expr . EXP expr [ TIMES SEMICOLON PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT AND ]
expr -> expr . AND expr [ TIMES SEMICOLON PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT AND ]
expr -> expr . OR expr [ TIMES SEMICOLON PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT AND ]
lvalue -> expr . DOT IDENT [ TIMES SEMICOLON PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT AND AFFECT ]
-- On TIMES shift to state 21
-- On SEMICOLON shift to state 51
-- On PLUS shift to state 28
-- On PARD_IDENT shift to state 23
-- On OR shift to state 32
-- On NEQ shift to state 34
-- On MODULO shift to state 30
-- On MINUS shift to state 36
-- On LEQ shift to state 38
-- On L shift to state 40
-- On GEQ shift to state 42
-- On G shift to state 44
-- On EXP shift to state 24
-- On EQ shift to state 46
-- On DOT shift to state 26
-- On AND shift to state 48
-- On PARD reduce production bloc1 -> expr 

State 51:
bloc1 -> expr SEMICOLON . bloc [ PARD ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On separated_nonempty_list(SEMICOLON,option(expr)) shift to state 52
-- On option(expr) shift to state 53
-- On lvalue shift to state 18
-- On loption(separated_nonempty_list(SEMICOLON,option(expr))) shift to state 57
-- On expr shift to state 56
-- On bloc shift to state 58
-- On SEMICOLON reduce production option(expr) -> 
-- On PARD reduce production loption(separated_nonempty_list(SEMICOLON,option(expr))) -> 
-- On PARD reduce production option(expr) -> 
** Conflict on PARD

State 52:
loption(separated_nonempty_list(SEMICOLON,option(expr))) -> separated_nonempty_list(SEMICOLON,option(expr)) . [ PARD END ELSEIF ELSE ]
-- On PARD reduce production loption(separated_nonempty_list(SEMICOLON,option(expr))) -> separated_nonempty_list(SEMICOLON,option(expr)) 
-- On END reduce production loption(separated_nonempty_list(SEMICOLON,option(expr))) -> separated_nonempty_list(SEMICOLON,option(expr)) 
-- On ELSEIF reduce production loption(separated_nonempty_list(SEMICOLON,option(expr))) -> separated_nonempty_list(SEMICOLON,option(expr)) 
-- On ELSE reduce production loption(separated_nonempty_list(SEMICOLON,option(expr))) -> separated_nonempty_list(SEMICOLON,option(expr)) 

State 53:
separated_nonempty_list(SEMICOLON,option(expr)) -> option(expr) . [ PARD END ELSEIF ELSE ]
separated_nonempty_list(SEMICOLON,option(expr)) -> option(expr) . SEMICOLON separated_nonempty_list(SEMICOLON,option(expr)) [ PARD END ELSEIF ELSE ]
-- On SEMICOLON shift to state 54
-- On PARD reduce production separated_nonempty_list(SEMICOLON,option(expr)) -> option(expr) 
-- On END reduce production separated_nonempty_list(SEMICOLON,option(expr)) -> option(expr) 
-- On ELSEIF reduce production separated_nonempty_list(SEMICOLON,option(expr)) -> option(expr) 
-- On ELSE reduce production separated_nonempty_list(SEMICOLON,option(expr)) -> option(expr) 

State 54:
separated_nonempty_list(SEMICOLON,option(expr)) -> option(expr) SEMICOLON . separated_nonempty_list(SEMICOLON,option(expr)) [ PARD END ELSEIF ELSE ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On separated_nonempty_list(SEMICOLON,option(expr)) shift to state 55
-- On option(expr) shift to state 53
-- On lvalue shift to state 18
-- On expr shift to state 56
-- On SEMICOLON reduce production option(expr) -> 
-- On PARD reduce production option(expr) -> 
-- On END reduce production option(expr) -> 
-- On ELSEIF reduce production option(expr) -> 
-- On ELSE reduce production option(expr) -> 

State 55:
separated_nonempty_list(SEMICOLON,option(expr)) -> option(expr) SEMICOLON separated_nonempty_list(SEMICOLON,option(expr)) . [ PARD END ELSEIF ELSE ]
-- On PARD reduce production separated_nonempty_list(SEMICOLON,option(expr)) -> option(expr) SEMICOLON separated_nonempty_list(SEMICOLON,option(expr)) 
-- On END reduce production separated_nonempty_list(SEMICOLON,option(expr)) -> option(expr) SEMICOLON separated_nonempty_list(SEMICOLON,option(expr)) 
-- On ELSEIF reduce production separated_nonempty_list(SEMICOLON,option(expr)) -> option(expr) SEMICOLON separated_nonempty_list(SEMICOLON,option(expr)) 
-- On ELSE reduce production separated_nonempty_list(SEMICOLON,option(expr)) -> option(expr) SEMICOLON separated_nonempty_list(SEMICOLON,option(expr)) 

State 56:
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND AFFECT ]
option(expr) -> expr . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On TIMES shift to state 21
-- On PLUS shift to state 28
-- On PARD_IDENT shift to state 23
-- On OR shift to state 32
-- On NEQ shift to state 34
-- On MODULO shift to state 30
-- On MINUS shift to state 36
-- On LEQ shift to state 38
-- On L shift to state 40
-- On GEQ shift to state 42
-- On G shift to state 44
-- On EXP shift to state 24
-- On EQ shift to state 46
-- On DOT shift to state 26
-- On AND shift to state 48
-- On WHILE reduce production option(expr) -> expr 
-- On TRUE reduce production option(expr) -> expr 
-- On TIMES reduce production option(expr) -> expr 
-- On STRUCT reduce production option(expr) -> expr 
-- On SEMICOLON reduce production option(expr) -> expr 
-- On RETURN reduce production option(expr) -> expr 
-- On PLUS reduce production option(expr) -> expr 
-- On PARG reduce production option(expr) -> expr 
-- On PARD_IDENT reduce production option(expr) -> expr 
-- On PARD reduce production option(expr) -> expr 
-- On OR reduce production option(expr) -> expr 
-- On NOT reduce production option(expr) -> expr 
-- On NEQ reduce production option(expr) -> expr 
-- On MUTABLE reduce production option(expr) -> expr 
-- On MODULO reduce production option(expr) -> expr 
-- On MINUS reduce production option(expr) -> expr 
-- On LEQ reduce production option(expr) -> expr 
-- On L reduce production option(expr) -> expr 
-- On INT reduce production option(expr) -> expr 
-- On IF reduce production option(expr) -> expr 
-- On IDENT_PARG reduce production option(expr) -> expr 
-- On IDENT reduce production option(expr) -> expr 
-- On GEQ reduce production option(expr) -> expr 
-- On G reduce production option(expr) -> expr 
-- On FUNCTION reduce production option(expr) -> expr 
-- On FOR reduce production option(expr) -> expr 
-- On FALSE reduce production option(expr) -> expr 
-- On EXP reduce production option(expr) -> expr 
-- On EQ reduce production option(expr) -> expr 
-- On EOF reduce production option(expr) -> expr 
-- On ENTIER_PARG reduce production option(expr) -> expr 
-- On ENTIER_IDENT reduce production option(expr) -> expr 
-- On END reduce production option(expr) -> expr 
-- On ELSEIF reduce production option(expr) -> expr 
-- On ELSE reduce production option(expr) -> expr 
-- On DOT reduce production option(expr) -> expr 
-- On COMMA reduce production option(expr) -> expr 
-- On COLON reduce production option(expr) -> expr 
-- On CHAINE reduce production option(expr) -> expr 
-- On AND reduce production option(expr) -> expr 
** Conflict on TIMES PLUS PARD_IDENT OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT AND

State 57:
bloc -> loption(separated_nonempty_list(SEMICOLON,option(expr))) . [ PARD END ELSEIF ELSE ]
-- On PARD reduce production bloc -> loption(separated_nonempty_list(SEMICOLON,option(expr))) 
-- On END reduce production bloc -> loption(separated_nonempty_list(SEMICOLON,option(expr))) 
-- On ELSEIF reduce production bloc -> loption(separated_nonempty_list(SEMICOLON,option(expr))) 
-- On ELSE reduce production bloc -> loption(separated_nonempty_list(SEMICOLON,option(expr))) 

State 58:
bloc1 -> expr SEMICOLON bloc . [ PARD ]
-- On PARD reduce production bloc1 -> expr SEMICOLON bloc 

State 59:
expr -> ENTIER_PARG bloc1 . PARD [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On PARD shift to state 60

State 60:
expr -> ENTIER_PARG bloc1 PARD . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On TRUE reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On TIMES reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On STRUCT reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On SEMICOLON reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On RETURN reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On PLUS reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On PARG reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On PARD_IDENT reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On PARD reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On OR reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On NOT reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On NEQ reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On MUTABLE reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On MODULO reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On MINUS reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On LEQ reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On L reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On INT reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On IF reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On IDENT_PARG reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On IDENT reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On GEQ reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On G reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On FUNCTION reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On FOR reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On FALSE reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On EXP reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On EQ reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On EOF reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On ENTIER_PARG reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On ENTIER_IDENT reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On END reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On ELSEIF reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On ELSE reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On DOT reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On COMMA reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On COLON reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On CHAINE reduce production expr -> ENTIER_PARG bloc1 PARD 
-- On AND reduce production expr -> ENTIER_PARG bloc1 PARD 

State 61:
expr -> expr . PARD_IDENT [ TIMES PLUS PARD_IDENT OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COLON AND ]
expr -> expr . EQ expr [ TIMES PLUS PARD_IDENT OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COLON AND ]
expr -> expr . NEQ expr [ TIMES PLUS PARD_IDENT OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COLON AND ]
expr -> expr . L expr [ TIMES PLUS PARD_IDENT OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COLON AND ]
expr -> expr . G expr [ TIMES PLUS PARD_IDENT OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COLON AND ]
expr -> expr . LEQ expr [ TIMES PLUS PARD_IDENT OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COLON AND ]
expr -> expr . GEQ expr [ TIMES PLUS PARD_IDENT OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COLON AND ]
expr -> expr . PLUS expr [ TIMES PLUS PARD_IDENT OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COLON AND ]
expr -> expr . MINUS expr [ TIMES PLUS PARD_IDENT OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COLON AND ]
expr -> expr . TIMES expr [ TIMES PLUS PARD_IDENT OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COLON AND ]
expr -> expr . MODULO expr [ TIMES PLUS PARD_IDENT OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COLON AND ]
expr -> expr . EXP expr [ TIMES PLUS PARD_IDENT OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COLON AND ]
expr -> expr . AND expr [ TIMES PLUS PARD_IDENT OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COLON AND ]
expr -> expr . OR expr [ TIMES PLUS PARD_IDENT OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COLON AND ]
expr -> FOR IDENT AFFECT expr . COLON expr bloc END [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
lvalue -> expr . DOT IDENT [ TIMES PLUS PARD_IDENT OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COLON AND AFFECT ]
-- On TIMES shift to state 21
-- On PLUS shift to state 28
-- On PARD_IDENT shift to state 23
-- On OR shift to state 32
-- On NEQ shift to state 34
-- On MODULO shift to state 30
-- On MINUS shift to state 36
-- On LEQ shift to state 38
-- On L shift to state 40
-- On GEQ shift to state 42
-- On G shift to state 44
-- On EXP shift to state 24
-- On EQ shift to state 46
-- On DOT shift to state 26
-- On COLON shift to state 62
-- On AND shift to state 48

State 62:
expr -> FOR IDENT AFFECT expr COLON . expr bloc END [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 63

State 63:
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> FOR IDENT AFFECT expr COLON expr . bloc END [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND AFFECT ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 21
-- On RETURN shift to state 3
-- On PLUS shift to state 28
-- On PARG shift to state 4
-- On PARD_IDENT shift to state 23
-- On OR shift to state 32
-- On NOT shift to state 5
-- On NEQ shift to state 34
-- On MODULO shift to state 30
-- On MINUS shift to state 64
-- On LEQ shift to state 38
-- On L shift to state 40
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On GEQ shift to state 42
-- On G shift to state 44
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On EXP shift to state 24
-- On EQ shift to state 46
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On DOT shift to state 26
-- On CHAINE shift to state 17
-- On AND shift to state 48
-- On separated_nonempty_list(SEMICOLON,option(expr)) shift to state 52
-- On option(expr) shift to state 53
-- On lvalue shift to state 18
-- On loption(separated_nonempty_list(SEMICOLON,option(expr))) shift to state 57
-- On expr shift to state 56
-- On bloc shift to state 66
-- On SEMICOLON reduce production option(expr) -> 
-- On END reduce production loption(separated_nonempty_list(SEMICOLON,option(expr))) -> 
-- On END reduce production option(expr) -> 
** Conflict on END

State 64:
expr -> MINUS . expr [ TIMES SEMICOLON PLUS PARD_IDENT OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ END ELSEIF ELSE DOT AND ]
expr -> expr MINUS . expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 65

State 65:
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> MINUS expr . [ TIMES SEMICOLON PLUS PARD_IDENT OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ END ELSEIF ELSE DOT AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr MINUS expr . [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND AFFECT ]
-- On TIMES shift to state 21
-- On PLUS shift to state 28
-- On PARD_IDENT shift to state 23
-- On OR shift to state 32
-- On NEQ shift to state 34
-- On MODULO shift to state 30
-- On MINUS shift to state 36
-- On LEQ shift to state 38
-- On L shift to state 40
-- On GEQ shift to state 42
-- On G shift to state 44
-- On EXP shift to state 24
-- On EQ shift to state 46
-- On DOT shift to state 26
-- On AND shift to state 48
-- On WHILE reduce production expr -> expr MINUS expr 
-- On TRUE reduce production expr -> expr MINUS expr 
-- On TIMES reduce production expr -> MINUS expr 
-- On TIMES reduce production expr -> expr MINUS expr 
-- On SEMICOLON reduce production expr -> MINUS expr 
-- On SEMICOLON reduce production expr -> expr MINUS expr 
-- On RETURN reduce production expr -> expr MINUS expr 
-- On PLUS reduce production expr -> MINUS expr 
-- On PLUS reduce production expr -> expr MINUS expr 
-- On PARG reduce production expr -> expr MINUS expr 
-- On PARD_IDENT reduce production expr -> MINUS expr 
-- On PARD_IDENT reduce production expr -> expr MINUS expr 
-- On OR reduce production expr -> MINUS expr 
-- On OR reduce production expr -> expr MINUS expr 
-- On NOT reduce production expr -> expr MINUS expr 
-- On NEQ reduce production expr -> MINUS expr 
-- On NEQ reduce production expr -> expr MINUS expr 
-- On MODULO reduce production expr -> MINUS expr 
-- On MODULO reduce production expr -> expr MINUS expr 
-- On MINUS reduce production expr -> MINUS expr 
-- On MINUS reduce production expr -> expr MINUS expr 
-- On LEQ reduce production expr -> MINUS expr 
-- On LEQ reduce production expr -> expr MINUS expr 
-- On L reduce production expr -> MINUS expr 
-- On L reduce production expr -> expr MINUS expr 
-- On INT reduce production expr -> expr MINUS expr 
-- On IF reduce production expr -> expr MINUS expr 
-- On IDENT_PARG reduce production expr -> expr MINUS expr 
-- On IDENT reduce production expr -> expr MINUS expr 
-- On GEQ reduce production expr -> MINUS expr 
-- On GEQ reduce production expr -> expr MINUS expr 
-- On G reduce production expr -> MINUS expr 
-- On G reduce production expr -> expr MINUS expr 
-- On FOR reduce production expr -> expr MINUS expr 
-- On FALSE reduce production expr -> expr MINUS expr 
-- On EQ reduce production expr -> MINUS expr 
-- On EQ reduce production expr -> expr MINUS expr 
-- On ENTIER_PARG reduce production expr -> expr MINUS expr 
-- On ENTIER_IDENT reduce production expr -> expr MINUS expr 
-- On END reduce production expr -> MINUS expr 
-- On END reduce production expr -> expr MINUS expr 
-- On ELSEIF reduce production expr -> MINUS expr 
-- On ELSEIF reduce production expr -> expr MINUS expr 
-- On ELSE reduce production expr -> MINUS expr 
-- On ELSE reduce production expr -> expr MINUS expr 
-- On CHAINE reduce production expr -> expr MINUS expr 
-- On AND reduce production expr -> MINUS expr 
-- On AND reduce production expr -> expr MINUS expr 
** Conflict on TIMES SEMICOLON PLUS PARD_IDENT OR NEQ MODULO MINUS LEQ L GEQ G EQ END ELSEIF ELSE AND

State 66:
expr -> FOR IDENT AFFECT expr COLON expr bloc . END [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On END shift to state 67

State 67:
expr -> FOR IDENT AFFECT expr COLON expr bloc END . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On TRUE reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On TIMES reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On STRUCT reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On SEMICOLON reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On RETURN reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On PLUS reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On PARG reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On PARD_IDENT reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On PARD reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On OR reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On NOT reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On NEQ reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On MUTABLE reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On MODULO reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On MINUS reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On LEQ reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On L reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On INT reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On IF reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On IDENT_PARG reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On IDENT reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On GEQ reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On G reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On FUNCTION reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On FOR reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On FALSE reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On EXP reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On EQ reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On EOF reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On ENTIER_PARG reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On ENTIER_IDENT reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On END reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On ELSEIF reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On ELSE reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On DOT reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On COMMA reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On COLON reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On CHAINE reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 
-- On AND reduce production expr -> FOR IDENT AFFECT expr COLON expr bloc END 

State 68:
loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) . [ PARD ]
-- On PARD reduce production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 

State 69:
expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) . PARD [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On PARD shift to state 70

State 70:
expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On TRUE reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On TIMES reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On STRUCT reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On SEMICOLON reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On RETURN reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On PLUS reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On PARG reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On PARD_IDENT reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On PARD reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On OR reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On NOT reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On NEQ reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On MUTABLE reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On MODULO reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On MINUS reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On LEQ reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On L reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On INT reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On IF reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On IDENT_PARG reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On IDENT reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On GEQ reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On G reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On FUNCTION reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On FOR reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On FALSE reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On EXP reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On EQ reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On EOF reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On ENTIER_PARG reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On ENTIER_IDENT reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On END reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On ELSEIF reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On ELSE reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On DOT reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On COMMA reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On COLON reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On CHAINE reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 
-- On AND reduce production expr -> IDENT_PARG loption(separated_nonempty_list(COMMA,expr)) PARD 

State 71:
expr -> expr . PARD_IDENT [ TIMES PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COMMA AND ]
expr -> expr . EQ expr [ TIMES PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COMMA AND ]
expr -> expr . NEQ expr [ TIMES PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COMMA AND ]
expr -> expr . L expr [ TIMES PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COMMA AND ]
expr -> expr . G expr [ TIMES PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COMMA AND ]
expr -> expr . LEQ expr [ TIMES PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COMMA AND ]
expr -> expr . GEQ expr [ TIMES PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COMMA AND ]
expr -> expr . PLUS expr [ TIMES PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COMMA AND ]
expr -> expr . MINUS expr [ TIMES PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COMMA AND ]
expr -> expr . TIMES expr [ TIMES PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COMMA AND ]
expr -> expr . MODULO expr [ TIMES PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COMMA AND ]
expr -> expr . EXP expr [ TIMES PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COMMA AND ]
expr -> expr . AND expr [ TIMES PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COMMA AND ]
expr -> expr . OR expr [ TIMES PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COMMA AND ]
lvalue -> expr . DOT IDENT [ TIMES PLUS PARD_IDENT PARD OR NEQ MODULO MINUS LEQ L GEQ G EXP EQ DOT COMMA AND AFFECT ]
separated_nonempty_list(COMMA,expr) -> expr . [ PARD ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ PARD ]
-- On TIMES shift to state 21
-- On PLUS shift to state 28
-- On PARD_IDENT shift to state 23
-- On OR shift to state 32
-- On NEQ shift to state 34
-- On MODULO shift to state 30
-- On MINUS shift to state 36
-- On LEQ shift to state 38
-- On L shift to state 40
-- On GEQ shift to state 42
-- On G shift to state 44
-- On EXP shift to state 24
-- On EQ shift to state 46
-- On DOT shift to state 26
-- On COMMA shift to state 72
-- On AND shift to state 48
-- On PARD reduce production separated_nonempty_list(COMMA,expr) -> expr 

State 72:
separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ PARD ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On separated_nonempty_list(COMMA,expr) shift to state 73
-- On lvalue shift to state 18
-- On expr shift to state 71

State 73:
separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) . [ PARD ]
-- On PARD reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) 

State 74:
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> IF expr . bloc else_exp [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND AFFECT ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 21
-- On RETURN shift to state 3
-- On PLUS shift to state 28
-- On PARG shift to state 4
-- On PARD_IDENT shift to state 23
-- On OR shift to state 32
-- On NOT shift to state 5
-- On NEQ shift to state 34
-- On MODULO shift to state 30
-- On MINUS shift to state 64
-- On LEQ shift to state 38
-- On L shift to state 40
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On GEQ shift to state 42
-- On G shift to state 44
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On EXP shift to state 24
-- On EQ shift to state 46
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On DOT shift to state 26
-- On CHAINE shift to state 17
-- On AND shift to state 48
-- On separated_nonempty_list(SEMICOLON,option(expr)) shift to state 52
-- On option(expr) shift to state 53
-- On lvalue shift to state 18
-- On loption(separated_nonempty_list(SEMICOLON,option(expr))) shift to state 57
-- On expr shift to state 56
-- On bloc shift to state 75
-- On SEMICOLON reduce production option(expr) -> 
-- On END reduce production loption(separated_nonempty_list(SEMICOLON,option(expr))) -> 
-- On END reduce production option(expr) -> 
-- On ELSEIF reduce production loption(separated_nonempty_list(SEMICOLON,option(expr))) -> 
-- On ELSEIF reduce production option(expr) -> 
-- On ELSE reduce production loption(separated_nonempty_list(SEMICOLON,option(expr))) -> 
-- On ELSE reduce production option(expr) -> 
** Conflict on END ELSEIF ELSE

State 75:
expr -> IF expr bloc . else_exp [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On END shift to state 76
-- On ELSEIF shift to state 77
-- On ELSE shift to state 80
-- On else_exp shift to state 84

State 76:
else_exp -> END . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE reduce production else_exp -> END 
-- On TRUE reduce production else_exp -> END 
-- On TIMES reduce production else_exp -> END 
-- On STRUCT reduce production else_exp -> END 
-- On SEMICOLON reduce production else_exp -> END 
-- On RETURN reduce production else_exp -> END 
-- On PLUS reduce production else_exp -> END 
-- On PARG reduce production else_exp -> END 
-- On PARD_IDENT reduce production else_exp -> END 
-- On PARD reduce production else_exp -> END 
-- On OR reduce production else_exp -> END 
-- On NOT reduce production else_exp -> END 
-- On NEQ reduce production else_exp -> END 
-- On MUTABLE reduce production else_exp -> END 
-- On MODULO reduce production else_exp -> END 
-- On MINUS reduce production else_exp -> END 
-- On LEQ reduce production else_exp -> END 
-- On L reduce production else_exp -> END 
-- On INT reduce production else_exp -> END 
-- On IF reduce production else_exp -> END 
-- On IDENT_PARG reduce production else_exp -> END 
-- On IDENT reduce production else_exp -> END 
-- On GEQ reduce production else_exp -> END 
-- On G reduce production else_exp -> END 
-- On FUNCTION reduce production else_exp -> END 
-- On FOR reduce production else_exp -> END 
-- On FALSE reduce production else_exp -> END 
-- On EXP reduce production else_exp -> END 
-- On EQ reduce production else_exp -> END 
-- On EOF reduce production else_exp -> END 
-- On ENTIER_PARG reduce production else_exp -> END 
-- On ENTIER_IDENT reduce production else_exp -> END 
-- On END reduce production else_exp -> END 
-- On ELSEIF reduce production else_exp -> END 
-- On ELSE reduce production else_exp -> END 
-- On DOT reduce production else_exp -> END 
-- On COMMA reduce production else_exp -> END 
-- On COLON reduce production else_exp -> END 
-- On CHAINE reduce production else_exp -> END 
-- On AND reduce production else_exp -> END 

State 77:
else_exp -> ELSEIF . expr bloc else_exp [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On lvalue shift to state 18
-- On expr shift to state 78

State 78:
else_exp -> ELSEIF expr . bloc else_exp [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT CHAINE AND AFFECT ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 21
-- On RETURN shift to state 3
-- On PLUS shift to state 28
-- On PARG shift to state 4
-- On PARD_IDENT shift to state 23
-- On OR shift to state 32
-- On NOT shift to state 5
-- On NEQ shift to state 34
-- On MODULO shift to state 30
-- On MINUS shift to state 64
-- On LEQ shift to state 38
-- On L shift to state 40
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On GEQ shift to state 42
-- On G shift to state 44
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On EXP shift to state 24
-- On EQ shift to state 46
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On DOT shift to state 26
-- On CHAINE shift to state 17
-- On AND shift to state 48
-- On separated_nonempty_list(SEMICOLON,option(expr)) shift to state 52
-- On option(expr) shift to state 53
-- On lvalue shift to state 18
-- On loption(separated_nonempty_list(SEMICOLON,option(expr))) shift to state 57
-- On expr shift to state 56
-- On bloc shift to state 79
-- On SEMICOLON reduce production option(expr) -> 
-- On END reduce production loption(separated_nonempty_list(SEMICOLON,option(expr))) -> 
-- On END reduce production option(expr) -> 
-- On ELSEIF reduce production loption(separated_nonempty_list(SEMICOLON,option(expr))) -> 
-- On ELSEIF reduce production option(expr) -> 
-- On ELSE reduce production loption(separated_nonempty_list(SEMICOLON,option(expr))) -> 
-- On ELSE reduce production option(expr) -> 
** Conflict on END ELSEIF ELSE

State 79:
else_exp -> ELSEIF expr bloc . else_exp [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On END shift to state 76
-- On ELSEIF shift to state 77
-- On ELSE shift to state 80
-- On else_exp shift to state 83

State 80:
else_exp -> ELSE . bloc END [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On separated_nonempty_list(SEMICOLON,option(expr)) shift to state 52
-- On option(expr) shift to state 53
-- On lvalue shift to state 18
-- On loption(separated_nonempty_list(SEMICOLON,option(expr))) shift to state 57
-- On expr shift to state 56
-- On bloc shift to state 81
-- On SEMICOLON reduce production option(expr) -> 
-- On END reduce production loption(separated_nonempty_list(SEMICOLON,option(expr))) -> 
-- On END reduce production option(expr) -> 
** Conflict on END

State 81:
else_exp -> ELSE bloc . END [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On END shift to state 82

State 82:
else_exp -> ELSE bloc END . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE reduce production else_exp -> ELSE bloc END 
-- On TRUE reduce production else_exp -> ELSE bloc END 
-- On TIMES reduce production else_exp -> ELSE bloc END 
-- On STRUCT reduce production else_exp -> ELSE bloc END 
-- On SEMICOLON reduce production else_exp -> ELSE bloc END 
-- On RETURN reduce production else_exp -> ELSE bloc END 
-- On PLUS reduce production else_exp -> ELSE bloc END 
-- On PARG reduce production else_exp -> ELSE bloc END 
-- On PARD_IDENT reduce production else_exp -> ELSE bloc END 
-- On PARD reduce production else_exp -> ELSE bloc END 
-- On OR reduce production else_exp -> ELSE bloc END 
-- On NOT reduce production else_exp -> ELSE bloc END 
-- On NEQ reduce production else_exp -> ELSE bloc END 
-- On MUTABLE reduce production else_exp -> ELSE bloc END 
-- On MODULO reduce production else_exp -> ELSE bloc END 
-- On MINUS reduce production else_exp -> ELSE bloc END 
-- On LEQ reduce production else_exp -> ELSE bloc END 
-- On L reduce production else_exp -> ELSE bloc END 
-- On INT reduce production else_exp -> ELSE bloc END 
-- On IF reduce production else_exp -> ELSE bloc END 
-- On IDENT_PARG reduce production else_exp -> ELSE bloc END 
-- On IDENT reduce production else_exp -> ELSE bloc END 
-- On GEQ reduce production else_exp -> ELSE bloc END 
-- On G reduce production else_exp -> ELSE bloc END 
-- On FUNCTION reduce production else_exp -> ELSE bloc END 
-- On FOR reduce production else_exp -> ELSE bloc END 
-- On FALSE reduce production else_exp -> ELSE bloc END 
-- On EXP reduce production else_exp -> ELSE bloc END 
-- On EQ reduce production else_exp -> ELSE bloc END 
-- On EOF reduce production else_exp -> ELSE bloc END 
-- On ENTIER_PARG reduce production else_exp -> ELSE bloc END 
-- On ENTIER_IDENT reduce production else_exp -> ELSE bloc END 
-- On END reduce production else_exp -> ELSE bloc END 
-- On ELSEIF reduce production else_exp -> ELSE bloc END 
-- On ELSE reduce production else_exp -> ELSE bloc END 
-- On DOT reduce production else_exp -> ELSE bloc END 
-- On COMMA reduce production else_exp -> ELSE bloc END 
-- On COLON reduce production else_exp -> ELSE bloc END 
-- On CHAINE reduce production else_exp -> ELSE bloc END 
-- On AND reduce production else_exp -> ELSE bloc END 

State 83:
else_exp -> ELSEIF expr bloc else_exp . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On TRUE reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On TIMES reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On STRUCT reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On SEMICOLON reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On RETURN reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On PLUS reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On PARG reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On PARD_IDENT reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On PARD reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On OR reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On NOT reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On NEQ reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On MUTABLE reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On MODULO reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On MINUS reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On LEQ reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On L reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On INT reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On IF reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On IDENT_PARG reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On IDENT reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On GEQ reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On G reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On FUNCTION reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On FOR reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On FALSE reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On EXP reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On EQ reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On EOF reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On ENTIER_PARG reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On ENTIER_IDENT reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On END reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On ELSEIF reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On ELSE reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On DOT reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On COMMA reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On COLON reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On CHAINE reduce production else_exp -> ELSEIF expr bloc else_exp 
-- On AND reduce production else_exp -> ELSEIF expr bloc else_exp 

State 84:
expr -> IF expr bloc else_exp . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE reduce production expr -> IF expr bloc else_exp 
-- On TRUE reduce production expr -> IF expr bloc else_exp 
-- On TIMES reduce production expr -> IF expr bloc else_exp 
-- On STRUCT reduce production expr -> IF expr bloc else_exp 
-- On SEMICOLON reduce production expr -> IF expr bloc else_exp 
-- On RETURN reduce production expr -> IF expr bloc else_exp 
-- On PLUS reduce production expr -> IF expr bloc else_exp 
-- On PARG reduce production expr -> IF expr bloc else_exp 
-- On PARD_IDENT reduce production expr -> IF expr bloc else_exp 
-- On PARD reduce production expr -> IF expr bloc else_exp 
-- On OR reduce production expr -> IF expr bloc else_exp 
-- On NOT reduce production expr -> IF expr bloc else_exp 
-- On NEQ reduce production expr -> IF expr bloc else_exp 
-- On MUTABLE reduce production expr -> IF expr bloc else_exp 
-- On MODULO reduce production expr -> IF expr bloc else_exp 
-- On MINUS reduce production expr -> IF expr bloc else_exp 
-- On LEQ reduce production expr -> IF expr bloc else_exp 
-- On L reduce production expr -> IF expr bloc else_exp 
-- On INT reduce production expr -> IF expr bloc else_exp 
-- On IF reduce production expr -> IF expr bloc else_exp 
-- On IDENT_PARG reduce production expr -> IF expr bloc else_exp 
-- On IDENT reduce production expr -> IF expr bloc else_exp 
-- On GEQ reduce production expr -> IF expr bloc else_exp 
-- On G reduce production expr -> IF expr bloc else_exp 
-- On FUNCTION reduce production expr -> IF expr bloc else_exp 
-- On FOR reduce production expr -> IF expr bloc else_exp 
-- On FALSE reduce production expr -> IF expr bloc else_exp 
-- On EXP reduce production expr -> IF expr bloc else_exp 
-- On EQ reduce production expr -> IF expr bloc else_exp 
-- On EOF reduce production expr -> IF expr bloc else_exp 
-- On ENTIER_PARG reduce production expr -> IF expr bloc else_exp 
-- On ENTIER_IDENT reduce production expr -> IF expr bloc else_exp 
-- On END reduce production expr -> IF expr bloc else_exp 
-- On ELSEIF reduce production expr -> IF expr bloc else_exp 
-- On ELSE reduce production expr -> IF expr bloc else_exp 
-- On DOT reduce production expr -> IF expr bloc else_exp 
-- On COMMA reduce production expr -> IF expr bloc else_exp 
-- On COLON reduce production expr -> IF expr bloc else_exp 
-- On CHAINE reduce production expr -> IF expr bloc else_exp 
-- On AND reduce production expr -> IF expr bloc else_exp 

State 85:
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> MINUS expr . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND AFFECT ]
-- On PARD_IDENT shift to state 23
-- On EXP shift to state 24
-- On DOT shift to state 26
-- On WHILE reduce production expr -> MINUS expr 
-- On TRUE reduce production expr -> MINUS expr 
-- On TIMES reduce production expr -> MINUS expr 
-- On STRUCT reduce production expr -> MINUS expr 
-- On SEMICOLON reduce production expr -> MINUS expr 
-- On RETURN reduce production expr -> MINUS expr 
-- On PLUS reduce production expr -> MINUS expr 
-- On PARG reduce production expr -> MINUS expr 
-- On PARD_IDENT reduce production expr -> MINUS expr 
-- On PARD reduce production expr -> MINUS expr 
-- On OR reduce production expr -> MINUS expr 
-- On NOT reduce production expr -> MINUS expr 
-- On NEQ reduce production expr -> MINUS expr 
-- On MUTABLE reduce production expr -> MINUS expr 
-- On MODULO reduce production expr -> MINUS expr 
-- On MINUS reduce production expr -> MINUS expr 
-- On LEQ reduce production expr -> MINUS expr 
-- On L reduce production expr -> MINUS expr 
-- On INT reduce production expr -> MINUS expr 
-- On IF reduce production expr -> MINUS expr 
-- On IDENT_PARG reduce production expr -> MINUS expr 
-- On IDENT reduce production expr -> MINUS expr 
-- On GEQ reduce production expr -> MINUS expr 
-- On G reduce production expr -> MINUS expr 
-- On FUNCTION reduce production expr -> MINUS expr 
-- On FOR reduce production expr -> MINUS expr 
-- On FALSE reduce production expr -> MINUS expr 
-- On EQ reduce production expr -> MINUS expr 
-- On EOF reduce production expr -> MINUS expr 
-- On ENTIER_PARG reduce production expr -> MINUS expr 
-- On ENTIER_IDENT reduce production expr -> MINUS expr 
-- On END reduce production expr -> MINUS expr 
-- On ELSEIF reduce production expr -> MINUS expr 
-- On ELSE reduce production expr -> MINUS expr 
-- On COMMA reduce production expr -> MINUS expr 
-- On COLON reduce production expr -> MINUS expr 
-- On CHAINE reduce production expr -> MINUS expr 
-- On AND reduce production expr -> MINUS expr 
** Conflict on PARD_IDENT

State 86:
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> NOT expr . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND AFFECT ]
-- On PARD_IDENT shift to state 23
-- On EXP shift to state 24
-- On DOT shift to state 26
-- On WHILE reduce production expr -> NOT expr 
-- On TRUE reduce production expr -> NOT expr 
-- On TIMES reduce production expr -> NOT expr 
-- On STRUCT reduce production expr -> NOT expr 
-- On SEMICOLON reduce production expr -> NOT expr 
-- On RETURN reduce production expr -> NOT expr 
-- On PLUS reduce production expr -> NOT expr 
-- On PARG reduce production expr -> NOT expr 
-- On PARD_IDENT reduce production expr -> NOT expr 
-- On PARD reduce production expr -> NOT expr 
-- On OR reduce production expr -> NOT expr 
-- On NOT reduce production expr -> NOT expr 
-- On NEQ reduce production expr -> NOT expr 
-- On MUTABLE reduce production expr -> NOT expr 
-- On MODULO reduce production expr -> NOT expr 
-- On MINUS reduce production expr -> NOT expr 
-- On LEQ reduce production expr -> NOT expr 
-- On L reduce production expr -> NOT expr 
-- On INT reduce production expr -> NOT expr 
-- On IF reduce production expr -> NOT expr 
-- On IDENT_PARG reduce production expr -> NOT expr 
-- On IDENT reduce production expr -> NOT expr 
-- On GEQ reduce production expr -> NOT expr 
-- On G reduce production expr -> NOT expr 
-- On FUNCTION reduce production expr -> NOT expr 
-- On FOR reduce production expr -> NOT expr 
-- On FALSE reduce production expr -> NOT expr 
-- On EQ reduce production expr -> NOT expr 
-- On EOF reduce production expr -> NOT expr 
-- On ENTIER_PARG reduce production expr -> NOT expr 
-- On ENTIER_IDENT reduce production expr -> NOT expr 
-- On END reduce production expr -> NOT expr 
-- On ELSEIF reduce production expr -> NOT expr 
-- On ELSE reduce production expr -> NOT expr 
-- On COMMA reduce production expr -> NOT expr 
-- On COLON reduce production expr -> NOT expr 
-- On CHAINE reduce production expr -> NOT expr 
-- On AND reduce production expr -> NOT expr 
** Conflict on PARD_IDENT

State 87:
expr -> PARG bloc1 . PARD [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On PARD shift to state 88

State 88:
expr -> PARG bloc1 PARD . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE reduce production expr -> PARG bloc1 PARD 
-- On TRUE reduce production expr -> PARG bloc1 PARD 
-- On TIMES reduce production expr -> PARG bloc1 PARD 
-- On STRUCT reduce production expr -> PARG bloc1 PARD 
-- On SEMICOLON reduce production expr -> PARG bloc1 PARD 
-- On RETURN reduce production expr -> PARG bloc1 PARD 
-- On PLUS reduce production expr -> PARG bloc1 PARD 
-- On PARG reduce production expr -> PARG bloc1 PARD 
-- On PARD_IDENT reduce production expr -> PARG bloc1 PARD 
-- On PARD reduce production expr -> PARG bloc1 PARD 
-- On OR reduce production expr -> PARG bloc1 PARD 
-- On NOT reduce production expr -> PARG bloc1 PARD 
-- On NEQ reduce production expr -> PARG bloc1 PARD 
-- On MUTABLE reduce production expr -> PARG bloc1 PARD 
-- On MODULO reduce production expr -> PARG bloc1 PARD 
-- On MINUS reduce production expr -> PARG bloc1 PARD 
-- On LEQ reduce production expr -> PARG bloc1 PARD 
-- On L reduce production expr -> PARG bloc1 PARD 
-- On INT reduce production expr -> PARG bloc1 PARD 
-- On IF reduce production expr -> PARG bloc1 PARD 
-- On IDENT_PARG reduce production expr -> PARG bloc1 PARD 
-- On IDENT reduce production expr -> PARG bloc1 PARD 
-- On GEQ reduce production expr -> PARG bloc1 PARD 
-- On G reduce production expr -> PARG bloc1 PARD 
-- On FUNCTION reduce production expr -> PARG bloc1 PARD 
-- On FOR reduce production expr -> PARG bloc1 PARD 
-- On FALSE reduce production expr -> PARG bloc1 PARD 
-- On EXP reduce production expr -> PARG bloc1 PARD 
-- On EQ reduce production expr -> PARG bloc1 PARD 
-- On EOF reduce production expr -> PARG bloc1 PARD 
-- On ENTIER_PARG reduce production expr -> PARG bloc1 PARD 
-- On ENTIER_IDENT reduce production expr -> PARG bloc1 PARD 
-- On END reduce production expr -> PARG bloc1 PARD 
-- On ELSEIF reduce production expr -> PARG bloc1 PARD 
-- On ELSE reduce production expr -> PARG bloc1 PARD 
-- On DOT reduce production expr -> PARG bloc1 PARD 
-- On COMMA reduce production expr -> PARG bloc1 PARD 
-- On COLON reduce production expr -> PARG bloc1 PARD 
-- On CHAINE reduce production expr -> PARG bloc1 PARD 
-- On AND reduce production expr -> PARG bloc1 PARD 

State 89:
expr -> RETURN option(expr) . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE reduce production expr -> RETURN option(expr) 
-- On TRUE reduce production expr -> RETURN option(expr) 
-- On TIMES reduce production expr -> RETURN option(expr) 
-- On STRUCT reduce production expr -> RETURN option(expr) 
-- On SEMICOLON reduce production expr -> RETURN option(expr) 
-- On RETURN reduce production expr -> RETURN option(expr) 
-- On PLUS reduce production expr -> RETURN option(expr) 
-- On PARG reduce production expr -> RETURN option(expr) 
-- On PARD_IDENT reduce production expr -> RETURN option(expr) 
-- On PARD reduce production expr -> RETURN option(expr) 
-- On OR reduce production expr -> RETURN option(expr) 
-- On NOT reduce production expr -> RETURN option(expr) 
-- On NEQ reduce production expr -> RETURN option(expr) 
-- On MUTABLE reduce production expr -> RETURN option(expr) 
-- On MODULO reduce production expr -> RETURN option(expr) 
-- On MINUS reduce production expr -> RETURN option(expr) 
-- On LEQ reduce production expr -> RETURN option(expr) 
-- On L reduce production expr -> RETURN option(expr) 
-- On INT reduce production expr -> RETURN option(expr) 
-- On IF reduce production expr -> RETURN option(expr) 
-- On IDENT_PARG reduce production expr -> RETURN option(expr) 
-- On IDENT reduce production expr -> RETURN option(expr) 
-- On GEQ reduce production expr -> RETURN option(expr) 
-- On G reduce production expr -> RETURN option(expr) 
-- On FUNCTION reduce production expr -> RETURN option(expr) 
-- On FOR reduce production expr -> RETURN option(expr) 
-- On FALSE reduce production expr -> RETURN option(expr) 
-- On EXP reduce production expr -> RETURN option(expr) 
-- On EQ reduce production expr -> RETURN option(expr) 
-- On EOF reduce production expr -> RETURN option(expr) 
-- On ENTIER_PARG reduce production expr -> RETURN option(expr) 
-- On ENTIER_IDENT reduce production expr -> RETURN option(expr) 
-- On END reduce production expr -> RETURN option(expr) 
-- On ELSEIF reduce production expr -> RETURN option(expr) 
-- On ELSE reduce production expr -> RETURN option(expr) 
-- On DOT reduce production expr -> RETURN option(expr) 
-- On COMMA reduce production expr -> RETURN option(expr) 
-- On COLON reduce production expr -> RETURN option(expr) 
-- On CHAINE reduce production expr -> RETURN option(expr) 
-- On AND reduce production expr -> RETURN option(expr) 

State 90:
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND ]
expr -> WHILE expr . bloc END [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FOR FALSE EXP EQ ENTIER_PARG ENTIER_IDENT END DOT CHAINE AND AFFECT ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On TIMES shift to state 21
-- On RETURN shift to state 3
-- On PLUS shift to state 28
-- On PARG shift to state 4
-- On PARD_IDENT shift to state 23
-- On OR shift to state 32
-- On NOT shift to state 5
-- On NEQ shift to state 34
-- On MODULO shift to state 30
-- On MINUS shift to state 64
-- On LEQ shift to state 38
-- On L shift to state 40
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On GEQ shift to state 42
-- On G shift to state 44
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On EXP shift to state 24
-- On EQ shift to state 46
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On DOT shift to state 26
-- On CHAINE shift to state 17
-- On AND shift to state 48
-- On separated_nonempty_list(SEMICOLON,option(expr)) shift to state 52
-- On option(expr) shift to state 53
-- On lvalue shift to state 18
-- On loption(separated_nonempty_list(SEMICOLON,option(expr))) shift to state 57
-- On expr shift to state 56
-- On bloc shift to state 91
-- On SEMICOLON reduce production option(expr) -> 
-- On END reduce production loption(separated_nonempty_list(SEMICOLON,option(expr))) -> 
-- On END reduce production option(expr) -> 
** Conflict on END

State 91:
expr -> WHILE expr bloc . END [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On END shift to state 92

State 92:
expr -> WHILE expr bloc END . [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT PARD OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT END ELSEIF ELSE DOT COMMA COLON CHAINE AND ]
-- On WHILE reduce production expr -> WHILE expr bloc END 
-- On TRUE reduce production expr -> WHILE expr bloc END 
-- On TIMES reduce production expr -> WHILE expr bloc END 
-- On STRUCT reduce production expr -> WHILE expr bloc END 
-- On SEMICOLON reduce production expr -> WHILE expr bloc END 
-- On RETURN reduce production expr -> WHILE expr bloc END 
-- On PLUS reduce production expr -> WHILE expr bloc END 
-- On PARG reduce production expr -> WHILE expr bloc END 
-- On PARD_IDENT reduce production expr -> WHILE expr bloc END 
-- On PARD reduce production expr -> WHILE expr bloc END 
-- On OR reduce production expr -> WHILE expr bloc END 
-- On NOT reduce production expr -> WHILE expr bloc END 
-- On NEQ reduce production expr -> WHILE expr bloc END 
-- On MUTABLE reduce production expr -> WHILE expr bloc END 
-- On MODULO reduce production expr -> WHILE expr bloc END 
-- On MINUS reduce production expr -> WHILE expr bloc END 
-- On LEQ reduce production expr -> WHILE expr bloc END 
-- On L reduce production expr -> WHILE expr bloc END 
-- On INT reduce production expr -> WHILE expr bloc END 
-- On IF reduce production expr -> WHILE expr bloc END 
-- On IDENT_PARG reduce production expr -> WHILE expr bloc END 
-- On IDENT reduce production expr -> WHILE expr bloc END 
-- On GEQ reduce production expr -> WHILE expr bloc END 
-- On G reduce production expr -> WHILE expr bloc END 
-- On FUNCTION reduce production expr -> WHILE expr bloc END 
-- On FOR reduce production expr -> WHILE expr bloc END 
-- On FALSE reduce production expr -> WHILE expr bloc END 
-- On EXP reduce production expr -> WHILE expr bloc END 
-- On EQ reduce production expr -> WHILE expr bloc END 
-- On EOF reduce production expr -> WHILE expr bloc END 
-- On ENTIER_PARG reduce production expr -> WHILE expr bloc END 
-- On ENTIER_IDENT reduce production expr -> WHILE expr bloc END 
-- On END reduce production expr -> WHILE expr bloc END 
-- On ELSEIF reduce production expr -> WHILE expr bloc END 
-- On ELSE reduce production expr -> WHILE expr bloc END 
-- On DOT reduce production expr -> WHILE expr bloc END 
-- On COMMA reduce production expr -> WHILE expr bloc END 
-- On COLON reduce production expr -> WHILE expr bloc END 
-- On CHAINE reduce production expr -> WHILE expr bloc END 
-- On AND reduce production expr -> WHILE expr bloc END 

State 93:
option(MUTABLE) -> MUTABLE . [ STRUCT ]
-- On STRUCT reduce production option(MUTABLE) -> MUTABLE 

State 94:
fonction -> FUNCTION . IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON [ WHILE TRUE STRUCT RETURN PARG NOT MUTABLE MINUS INT IF IDENT_PARG IDENT FUNCTION FOR FALSE EOF ENTIER_PARG ENTIER_IDENT CHAINE ]
-- On IDENT_PARG shift to state 95

State 95:
fonction -> FUNCTION IDENT_PARG . loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON [ WHILE TRUE STRUCT RETURN PARG NOT MUTABLE MINUS INT IF IDENT_PARG IDENT FUNCTION FOR FALSE EOF ENTIER_PARG ENTIER_IDENT CHAINE ]
-- On IDENT shift to state 96
-- On separated_nonempty_list(COMMA,param) shift to state 101
-- On param shift to state 102
-- On loption(separated_nonempty_list(COMMA,param)) shift to state 105
-- On PARD reduce production loption(separated_nonempty_list(COMMA,param)) -> 

State 96:
param -> IDENT . option(typage) [ SEMICOLON PARD END COMMA ]
-- On TYPE shift to state 97
-- On typage shift to state 99
-- On option(typage) shift to state 100
-- On SEMICOLON reduce production option(typage) -> 
-- On PARD reduce production option(typage) -> 
-- On END reduce production option(typage) -> 
-- On COMMA reduce production option(typage) -> 

State 97:
typage -> TYPE . IDENT [ WHILE TRUE SEMICOLON RETURN PARG PARD NOT MINUS INT IF IDENT_PARG IDENT FOR FALSE ENTIER_PARG ENTIER_IDENT END COMMA CHAINE ]
-- On IDENT shift to state 98

State 98:
typage -> TYPE IDENT . [ WHILE TRUE SEMICOLON RETURN PARG PARD NOT MINUS INT IF IDENT_PARG IDENT FOR FALSE ENTIER_PARG ENTIER_IDENT END COMMA CHAINE ]
-- On WHILE reduce production typage -> TYPE IDENT 
-- On TRUE reduce production typage -> TYPE IDENT 
-- On SEMICOLON reduce production typage -> TYPE IDENT 
-- On RETURN reduce production typage -> TYPE IDENT 
-- On PARG reduce production typage -> TYPE IDENT 
-- On PARD reduce production typage -> TYPE IDENT 
-- On NOT reduce production typage -> TYPE IDENT 
-- On MINUS reduce production typage -> TYPE IDENT 
-- On INT reduce production typage -> TYPE IDENT 
-- On IF reduce production typage -> TYPE IDENT 
-- On IDENT_PARG reduce production typage -> TYPE IDENT 
-- On IDENT reduce production typage -> TYPE IDENT 
-- On FOR reduce production typage -> TYPE IDENT 
-- On FALSE reduce production typage -> TYPE IDENT 
-- On ENTIER_PARG reduce production typage -> TYPE IDENT 
-- On ENTIER_IDENT reduce production typage -> TYPE IDENT 
-- On END reduce production typage -> TYPE IDENT 
-- On COMMA reduce production typage -> TYPE IDENT 
-- On CHAINE reduce production typage -> TYPE IDENT 

State 99:
option(typage) -> typage . [ WHILE TRUE SEMICOLON RETURN PARG PARD NOT MINUS INT IF IDENT_PARG IDENT FOR FALSE ENTIER_PARG ENTIER_IDENT END COMMA CHAINE ]
-- On WHILE reduce production option(typage) -> typage 
-- On TRUE reduce production option(typage) -> typage 
-- On SEMICOLON reduce production option(typage) -> typage 
-- On RETURN reduce production option(typage) -> typage 
-- On PARG reduce production option(typage) -> typage 
-- On PARD reduce production option(typage) -> typage 
-- On NOT reduce production option(typage) -> typage 
-- On MINUS reduce production option(typage) -> typage 
-- On INT reduce production option(typage) -> typage 
-- On IF reduce production option(typage) -> typage 
-- On IDENT_PARG reduce production option(typage) -> typage 
-- On IDENT reduce production option(typage) -> typage 
-- On FOR reduce production option(typage) -> typage 
-- On FALSE reduce production option(typage) -> typage 
-- On ENTIER_PARG reduce production option(typage) -> typage 
-- On ENTIER_IDENT reduce production option(typage) -> typage 
-- On END reduce production option(typage) -> typage 
-- On COMMA reduce production option(typage) -> typage 
-- On CHAINE reduce production option(typage) -> typage 

State 100:
param -> IDENT option(typage) . [ SEMICOLON PARD END COMMA ]
-- On SEMICOLON reduce production param -> IDENT option(typage) 
-- On PARD reduce production param -> IDENT option(typage) 
-- On END reduce production param -> IDENT option(typage) 
-- On COMMA reduce production param -> IDENT option(typage) 

State 101:
loption(separated_nonempty_list(COMMA,param)) -> separated_nonempty_list(COMMA,param) . [ PARD ]
-- On PARD reduce production loption(separated_nonempty_list(COMMA,param)) -> separated_nonempty_list(COMMA,param) 

State 102:
separated_nonempty_list(COMMA,param) -> param . [ PARD ]
separated_nonempty_list(COMMA,param) -> param . COMMA separated_nonempty_list(COMMA,param) [ PARD ]
-- On COMMA shift to state 103
-- On PARD reduce production separated_nonempty_list(COMMA,param) -> param 

State 103:
separated_nonempty_list(COMMA,param) -> param COMMA . separated_nonempty_list(COMMA,param) [ PARD ]
-- On IDENT shift to state 96
-- On separated_nonempty_list(COMMA,param) shift to state 104
-- On param shift to state 102

State 104:
separated_nonempty_list(COMMA,param) -> param COMMA separated_nonempty_list(COMMA,param) . [ PARD ]
-- On PARD reduce production separated_nonempty_list(COMMA,param) -> param COMMA separated_nonempty_list(COMMA,param) 

State 105:
fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) . PARD option(typage) bloc END SEMICOLON [ WHILE TRUE STRUCT RETURN PARG NOT MUTABLE MINUS INT IF IDENT_PARG IDENT FUNCTION FOR FALSE EOF ENTIER_PARG ENTIER_IDENT CHAINE ]
-- On PARD shift to state 106

State 106:
fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD . option(typage) bloc END SEMICOLON [ WHILE TRUE STRUCT RETURN PARG NOT MUTABLE MINUS INT IF IDENT_PARG IDENT FUNCTION FOR FALSE EOF ENTIER_PARG ENTIER_IDENT CHAINE ]
-- On TYPE shift to state 97
-- On typage shift to state 99
-- On option(typage) shift to state 107
-- On WHILE reduce production option(typage) -> 
-- On TRUE reduce production option(typage) -> 
-- On SEMICOLON reduce production option(typage) -> 
-- On RETURN reduce production option(typage) -> 
-- On PARG reduce production option(typage) -> 
-- On NOT reduce production option(typage) -> 
-- On MINUS reduce production option(typage) -> 
-- On INT reduce production option(typage) -> 
-- On IF reduce production option(typage) -> 
-- On IDENT_PARG reduce production option(typage) -> 
-- On IDENT reduce production option(typage) -> 
-- On FOR reduce production option(typage) -> 
-- On FALSE reduce production option(typage) -> 
-- On ENTIER_PARG reduce production option(typage) -> 
-- On ENTIER_IDENT reduce production option(typage) -> 
-- On END reduce production option(typage) -> 
-- On CHAINE reduce production option(typage) -> 

State 107:
fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) . bloc END SEMICOLON [ WHILE TRUE STRUCT RETURN PARG NOT MUTABLE MINUS INT IF IDENT_PARG IDENT FUNCTION FOR FALSE EOF ENTIER_PARG ENTIER_IDENT CHAINE ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On separated_nonempty_list(SEMICOLON,option(expr)) shift to state 52
-- On option(expr) shift to state 53
-- On lvalue shift to state 18
-- On loption(separated_nonempty_list(SEMICOLON,option(expr))) shift to state 57
-- On expr shift to state 56
-- On bloc shift to state 108
-- On SEMICOLON reduce production option(expr) -> 
-- On END reduce production loption(separated_nonempty_list(SEMICOLON,option(expr))) -> 
-- On END reduce production option(expr) -> 
** Conflict on END

State 108:
fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc . END SEMICOLON [ WHILE TRUE STRUCT RETURN PARG NOT MUTABLE MINUS INT IF IDENT_PARG IDENT FUNCTION FOR FALSE EOF ENTIER_PARG ENTIER_IDENT CHAINE ]
-- On END shift to state 109

State 109:
fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END . SEMICOLON [ WHILE TRUE STRUCT RETURN PARG NOT MUTABLE MINUS INT IF IDENT_PARG IDENT FUNCTION FOR FALSE EOF ENTIER_PARG ENTIER_IDENT CHAINE ]
-- On SEMICOLON shift to state 110

State 110:
fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON . [ WHILE TRUE STRUCT RETURN PARG NOT MUTABLE MINUS INT IF IDENT_PARG IDENT FUNCTION FOR FALSE EOF ENTIER_PARG ENTIER_IDENT CHAINE ]
-- On WHILE reduce production fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON 
-- On TRUE reduce production fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON 
-- On STRUCT reduce production fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON 
-- On RETURN reduce production fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON 
-- On PARG reduce production fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON 
-- On NOT reduce production fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON 
-- On MUTABLE reduce production fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON 
-- On MINUS reduce production fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON 
-- On INT reduce production fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON 
-- On IF reduce production fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON 
-- On IDENT_PARG reduce production fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON 
-- On IDENT reduce production fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON 
-- On FUNCTION reduce production fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON 
-- On FOR reduce production fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON 
-- On FALSE reduce production fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON 
-- On EOF reduce production fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON 
-- On ENTIER_PARG reduce production fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON 
-- On ENTIER_IDENT reduce production fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON 
-- On CHAINE reduce production fonction -> FUNCTION IDENT_PARG loption(separated_nonempty_list(COMMA,param)) PARD option(typage) bloc END SEMICOLON 

State 111:
decl -> structure . [ WHILE TRUE STRUCT RETURN PARG NOT MUTABLE MINUS INT IF IDENT_PARG IDENT FUNCTION FOR FALSE EOF ENTIER_PARG ENTIER_IDENT CHAINE ]
-- On WHILE reduce production decl -> structure 
-- On TRUE reduce production decl -> structure 
-- On STRUCT reduce production decl -> structure 
-- On RETURN reduce production decl -> structure 
-- On PARG reduce production decl -> structure 
-- On NOT reduce production decl -> structure 
-- On MUTABLE reduce production decl -> structure 
-- On MINUS reduce production decl -> structure 
-- On INT reduce production decl -> structure 
-- On IF reduce production decl -> structure 
-- On IDENT_PARG reduce production decl -> structure 
-- On IDENT reduce production decl -> structure 
-- On FUNCTION reduce production decl -> structure 
-- On FOR reduce production decl -> structure 
-- On FALSE reduce production decl -> structure 
-- On EOF reduce production decl -> structure 
-- On ENTIER_PARG reduce production decl -> structure 
-- On ENTIER_IDENT reduce production decl -> structure 
-- On CHAINE reduce production decl -> structure 

State 112:
structure -> option(MUTABLE) . STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON [ WHILE TRUE STRUCT RETURN PARG NOT MUTABLE MINUS INT IF IDENT_PARG IDENT FUNCTION FOR FALSE EOF ENTIER_PARG ENTIER_IDENT CHAINE ]
-- On STRUCT shift to state 113

State 113:
structure -> option(MUTABLE) STRUCT . IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON [ WHILE TRUE STRUCT RETURN PARG NOT MUTABLE MINUS INT IF IDENT_PARG IDENT FUNCTION FOR FALSE EOF ENTIER_PARG ENTIER_IDENT CHAINE ]
-- On IDENT shift to state 114

State 114:
structure -> option(MUTABLE) STRUCT IDENT . loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON [ WHILE TRUE STRUCT RETURN PARG NOT MUTABLE MINUS INT IF IDENT_PARG IDENT FUNCTION FOR FALSE EOF ENTIER_PARG ENTIER_IDENT CHAINE ]
-- On IDENT shift to state 96
-- On separated_nonempty_list(SEMICOLON,option(param)) shift to state 115
-- On param shift to state 116
-- On option(param) shift to state 117
-- On loption(separated_nonempty_list(SEMICOLON,option(param))) shift to state 120
-- On SEMICOLON reduce production option(param) -> 
-- On END reduce production loption(separated_nonempty_list(SEMICOLON,option(param))) -> 
-- On END reduce production option(param) -> 
** Conflict on END

State 115:
loption(separated_nonempty_list(SEMICOLON,option(param))) -> separated_nonempty_list(SEMICOLON,option(param)) . [ END ]
-- On END reduce production loption(separated_nonempty_list(SEMICOLON,option(param))) -> separated_nonempty_list(SEMICOLON,option(param)) 

State 116:
option(param) -> param . [ SEMICOLON END ]
-- On SEMICOLON reduce production option(param) -> param 
-- On END reduce production option(param) -> param 

State 117:
separated_nonempty_list(SEMICOLON,option(param)) -> option(param) . [ END ]
separated_nonempty_list(SEMICOLON,option(param)) -> option(param) . SEMICOLON separated_nonempty_list(SEMICOLON,option(param)) [ END ]
-- On SEMICOLON shift to state 118
-- On END reduce production separated_nonempty_list(SEMICOLON,option(param)) -> option(param) 

State 118:
separated_nonempty_list(SEMICOLON,option(param)) -> option(param) SEMICOLON . separated_nonempty_list(SEMICOLON,option(param)) [ END ]
-- On IDENT shift to state 96
-- On separated_nonempty_list(SEMICOLON,option(param)) shift to state 119
-- On param shift to state 116
-- On option(param) shift to state 117
-- On SEMICOLON reduce production option(param) -> 
-- On END reduce production option(param) -> 

State 119:
separated_nonempty_list(SEMICOLON,option(param)) -> option(param) SEMICOLON separated_nonempty_list(SEMICOLON,option(param)) . [ END ]
-- On END reduce production separated_nonempty_list(SEMICOLON,option(param)) -> option(param) SEMICOLON separated_nonempty_list(SEMICOLON,option(param)) 

State 120:
structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) . END SEMICOLON [ WHILE TRUE STRUCT RETURN PARG NOT MUTABLE MINUS INT IF IDENT_PARG IDENT FUNCTION FOR FALSE EOF ENTIER_PARG ENTIER_IDENT CHAINE ]
-- On END shift to state 121

State 121:
structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END . SEMICOLON [ WHILE TRUE STRUCT RETURN PARG NOT MUTABLE MINUS INT IF IDENT_PARG IDENT FUNCTION FOR FALSE EOF ENTIER_PARG ENTIER_IDENT CHAINE ]
-- On SEMICOLON shift to state 122

State 122:
structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON . [ WHILE TRUE STRUCT RETURN PARG NOT MUTABLE MINUS INT IF IDENT_PARG IDENT FUNCTION FOR FALSE EOF ENTIER_PARG ENTIER_IDENT CHAINE ]
-- On WHILE reduce production structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON 
-- On TRUE reduce production structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON 
-- On STRUCT reduce production structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON 
-- On RETURN reduce production structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON 
-- On PARG reduce production structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON 
-- On NOT reduce production structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON 
-- On MUTABLE reduce production structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON 
-- On MINUS reduce production structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON 
-- On INT reduce production structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON 
-- On IF reduce production structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON 
-- On IDENT_PARG reduce production structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON 
-- On IDENT reduce production structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON 
-- On FUNCTION reduce production structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON 
-- On FOR reduce production structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON 
-- On FALSE reduce production structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON 
-- On EOF reduce production structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON 
-- On ENTIER_PARG reduce production structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON 
-- On ENTIER_IDENT reduce production structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON 
-- On CHAINE reduce production structure -> option(MUTABLE) STRUCT IDENT loption(separated_nonempty_list(SEMICOLON,option(param))) END SEMICOLON 

State 123:
fichier -> list(decl) . EOF [ # ]
-- On EOF shift to state 124

State 124:
fichier -> list(decl) EOF . [ # ]
-- On # reduce production fichier -> list(decl) EOF 

State 125:
decl -> fonction . [ WHILE TRUE STRUCT RETURN PARG NOT MUTABLE MINUS INT IF IDENT_PARG IDENT FUNCTION FOR FALSE EOF ENTIER_PARG ENTIER_IDENT CHAINE ]
-- On WHILE reduce production decl -> fonction 
-- On TRUE reduce production decl -> fonction 
-- On STRUCT reduce production decl -> fonction 
-- On RETURN reduce production decl -> fonction 
-- On PARG reduce production decl -> fonction 
-- On NOT reduce production decl -> fonction 
-- On MUTABLE reduce production decl -> fonction 
-- On MINUS reduce production decl -> fonction 
-- On INT reduce production decl -> fonction 
-- On IF reduce production decl -> fonction 
-- On IDENT_PARG reduce production decl -> fonction 
-- On IDENT reduce production decl -> fonction 
-- On FUNCTION reduce production decl -> fonction 
-- On FOR reduce production decl -> fonction 
-- On FALSE reduce production decl -> fonction 
-- On EOF reduce production decl -> fonction 
-- On ENTIER_PARG reduce production decl -> fonction 
-- On ENTIER_IDENT reduce production decl -> fonction 
-- On CHAINE reduce production decl -> fonction 

State 126:
fichier' -> fichier . [ # ]
-- On # accept fichier

State 127:
decl -> expr . SEMICOLON [ WHILE TRUE STRUCT RETURN PARG NOT MUTABLE MINUS INT IF IDENT_PARG IDENT FUNCTION FOR FALSE EOF ENTIER_PARG ENTIER_IDENT CHAINE ]
decl -> expr . [ WHILE TRUE STRUCT RETURN PARG NOT MUTABLE MINUS INT IF IDENT_PARG IDENT FUNCTION FOR FALSE EOF ENTIER_PARG ENTIER_IDENT CHAINE ]
expr -> expr . PARD_IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT DOT CHAINE AND ]
expr -> expr . EQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT DOT CHAINE AND ]
expr -> expr . NEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT DOT CHAINE AND ]
expr -> expr . L expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT DOT CHAINE AND ]
expr -> expr . G expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT DOT CHAINE AND ]
expr -> expr . LEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT DOT CHAINE AND ]
expr -> expr . GEQ expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT DOT CHAINE AND ]
expr -> expr . PLUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT DOT CHAINE AND ]
expr -> expr . MINUS expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT DOT CHAINE AND ]
expr -> expr . TIMES expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT DOT CHAINE AND ]
expr -> expr . MODULO expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT DOT CHAINE AND ]
expr -> expr . EXP expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT DOT CHAINE AND ]
expr -> expr . AND expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT DOT CHAINE AND ]
expr -> expr . OR expr [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT DOT CHAINE AND ]
lvalue -> expr . DOT IDENT [ WHILE TRUE TIMES STRUCT SEMICOLON RETURN PLUS PARG PARD_IDENT OR NOT NEQ MUTABLE MODULO MINUS LEQ L INT IF IDENT_PARG IDENT GEQ G FUNCTION FOR FALSE EXP EQ EOF ENTIER_PARG ENTIER_IDENT DOT CHAINE AND AFFECT ]
-- On TIMES shift to state 21
-- On SEMICOLON shift to state 128
-- On PLUS shift to state 28
-- On PARD_IDENT shift to state 23
-- On OR shift to state 32
-- On NEQ shift to state 34
-- On MODULO shift to state 30
-- On MINUS shift to state 36
-- On LEQ shift to state 38
-- On L shift to state 40
-- On GEQ shift to state 42
-- On G shift to state 44
-- On EXP shift to state 24
-- On EQ shift to state 46
-- On DOT shift to state 26
-- On AND shift to state 48
-- On WHILE reduce production decl -> expr 
-- On TRUE reduce production decl -> expr 
-- On STRUCT reduce production decl -> expr 
-- On RETURN reduce production decl -> expr 
-- On PARG reduce production decl -> expr 
-- On NOT reduce production decl -> expr 
-- On MUTABLE reduce production decl -> expr 
-- On MINUS reduce production decl -> expr 
-- On INT reduce production decl -> expr 
-- On IF reduce production decl -> expr 
-- On IDENT_PARG reduce production decl -> expr 
-- On IDENT reduce production decl -> expr 
-- On FUNCTION reduce production decl -> expr 
-- On FOR reduce production decl -> expr 
-- On FALSE reduce production decl -> expr 
-- On EOF reduce production decl -> expr 
-- On ENTIER_PARG reduce production decl -> expr 
-- On ENTIER_IDENT reduce production decl -> expr 
-- On CHAINE reduce production decl -> expr 
** Conflict on MINUS

State 128:
decl -> expr SEMICOLON . [ WHILE TRUE STRUCT RETURN PARG NOT MUTABLE MINUS INT IF IDENT_PARG IDENT FUNCTION FOR FALSE EOF ENTIER_PARG ENTIER_IDENT CHAINE ]
-- On WHILE reduce production decl -> expr SEMICOLON 
-- On TRUE reduce production decl -> expr SEMICOLON 
-- On STRUCT reduce production decl -> expr SEMICOLON 
-- On RETURN reduce production decl -> expr SEMICOLON 
-- On PARG reduce production decl -> expr SEMICOLON 
-- On NOT reduce production decl -> expr SEMICOLON 
-- On MUTABLE reduce production decl -> expr SEMICOLON 
-- On MINUS reduce production decl -> expr SEMICOLON 
-- On INT reduce production decl -> expr SEMICOLON 
-- On IF reduce production decl -> expr SEMICOLON 
-- On IDENT_PARG reduce production decl -> expr SEMICOLON 
-- On IDENT reduce production decl -> expr SEMICOLON 
-- On FUNCTION reduce production decl -> expr SEMICOLON 
-- On FOR reduce production decl -> expr SEMICOLON 
-- On FALSE reduce production decl -> expr SEMICOLON 
-- On EOF reduce production decl -> expr SEMICOLON 
-- On ENTIER_PARG reduce production decl -> expr SEMICOLON 
-- On ENTIER_IDENT reduce production decl -> expr SEMICOLON 
-- On CHAINE reduce production decl -> expr SEMICOLON 

State 129:
list(decl) -> decl . list(decl) [ EOF ]
-- On WHILE shift to state 1
-- On TRUE shift to state 2
-- On RETURN shift to state 3
-- On PARG shift to state 4
-- On NOT shift to state 5
-- On MUTABLE shift to state 93
-- On MINUS shift to state 6
-- On INT shift to state 7
-- On IF shift to state 8
-- On IDENT_PARG shift to state 9
-- On IDENT shift to state 10
-- On FUNCTION shift to state 94
-- On FOR shift to state 11
-- On FALSE shift to state 14
-- On ENTIER_PARG shift to state 15
-- On ENTIER_IDENT shift to state 16
-- On CHAINE shift to state 17
-- On structure shift to state 111
-- On option(MUTABLE) shift to state 112
-- On lvalue shift to state 18
-- On list(decl) shift to state 130
-- On fonction shift to state 125
-- On expr shift to state 127
-- On decl shift to state 129
-- On STRUCT reduce production option(MUTABLE) -> 
-- On EOF reduce production list(decl) -> 

State 130:
list(decl) -> decl list(decl) . [ EOF ]
-- On EOF reduce production list(decl) -> decl list(decl) 

