
  open Ast
  open Astype
  open Hyper2



let samFail i = raise (SamenhirAst.Samenhir_Parsing_Error i)


type token =
	|Not_a_token
	|INT of (Ast.position*int)
	|CHAINE of (Ast.position*string)
	|IDENT of (Ast.position*string)
	|EOF
	|PARG of (Ast.position)
	|PARD of (Ast.position)
	|AFFECT of (Ast.position)
	|OR of (Ast.position)
	|AND of (Ast.position)
	|EQ of (Ast.position)
	|NEQ of (Ast.position)
	|L of (Ast.position)
	|G of (Ast.position)
	|LEQ of (Ast.position)
	|GEQ of (Ast.position)
	|PLUS of (Ast.position)
	|MINUS of (Ast.position)
	|TIMES of (Ast.position)
	|MODULO of (Ast.position)
	|EXP of (Ast.position)
	|NOT of (Ast.position)
	|DOT of (Ast.position)
	|ELSE of (Ast.position)
	|ELSEIF of (Ast.position)
	|END of (Ast.position)
	|FALSE of (Ast.position)
	|FOR of (Ast.position)
	|FUNCTION of (Ast.position)
	|IF of (Ast.position)
	|MUTABLE
	|RETURN of (Ast.position)
	|STRUCT of (Ast.position)
	|TRUE of (Ast.position)
	|WHILE of (Ast.position)
	|ENTIER_IDENT of (Ast.position*int * string)
	|IDENT_PARG of (Ast.position*string)
	|ENTIER_PARG of (Ast.position*int)
	|PARD_IDENT of (Ast.position*string)
	|TYPE
	|COLON of (Ast.position)
	|SEMICOLON of (Ast.position)
	|COMMA of (Ast.position)
	|DOCSTRING of (string)

type rulesType =
	| BLOC  of (Ast.bloc)
	| BLOC1  of (Ast.bloc)
	| BLOC1BIS  of (Ast.bloc)
	| BLOC_END  of (Ast.position * Ast.bloc)
	| DECLARATIONS_LIST  of (Ast.declaration list)
	| ELSE_EXP  of (Ast.position * Ast.else_)
	| EXPR  of (Ast.expression)
	| EXPR_BLOC  of (Ast.expression * Ast.bloc)
	| EXPR_BLOC2  of (Ast.bloc)
	| EXPR_WMIN_  of (Ast.expression)
	| EXPR_W_RET  of (Ast.expression)
	| FICHIER  of (Ast.fichier)
	| FONCTION  of (Ast.declaration)
	| LVALUE  of (Ast.position * Ast.lvalue)
	| LVALUE_WMIN_  of (Ast.position * Ast.lvalue)
	| OPERATEUR  of (Ast.position * Ast.operateur)
	| PARAM  of (Ast.param)
	| PARAM_LIST  of (Ast.param list)
	| SEPARATED_LIST_COMMA_EXPR  of (Ast.expression list)
	| SEPARATED_LIST_COMMA_PARAM  of (Ast.param list)
	| SEPARATED_LIST_C_E  of (Ast.expression list)
	| SEPARATED_LIST_C_P  of (Ast.param list)
	| STRUCTURE  of (Ast.declaration)
	| TYPAGE  of (Ast.position * string)
	| WHILEEXP  of (Ast.expression)
	|Tok of token
exception Output of (Ast.fichier)
exception FailureParse of rulesType list

let rec _sam1 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (1::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (1::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (1::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (1::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (1::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (1::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (1::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (1::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (1::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (1::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (1::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (1::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (1::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (1::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (1::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 1
and _sam2 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (2::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (2::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (2::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (2::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (2::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (2::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (2::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (2::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (2::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (2::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (2::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (2::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (2::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (2::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (2::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 2
and _sam3 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (3::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (3::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (3::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (3::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (3::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (3::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (3::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (3::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (3::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (3::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (3::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (3::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (3::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (3::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (3::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 3
and _sam4 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (4::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (4::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (4::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (4::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (4::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (4::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (4::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (4::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (4::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (4::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (4::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (4::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (4::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (4::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (4::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 4
and _sam5 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (5::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (5::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (5::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (5::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (5::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (5::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (5::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (5::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (5::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (5::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (5::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (5::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (5::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (5::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (5::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 5
and _sam6 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (6::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (6::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (6::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (6::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (6::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (6::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (6::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (6::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (6::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (6::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (6::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (6::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (6::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (6::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (6::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 6
and _sam7 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (7::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (7::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (7::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (7::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (7::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (7::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (7::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (7::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (7::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (7::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (7::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (7::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (7::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (7::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (7::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 7
and _sam8 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (8::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (8::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (8::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (8::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (8::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (8::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (8::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (8::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (8::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (8::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (8::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (8::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (8::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (8::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (8::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 8
and _sam9 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (9::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (9::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (9::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (9::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (9::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (9::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (9::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (9::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (9::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (9::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (9::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (9::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (9::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (9::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (9::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 9
and _sam10 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (10::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (10::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (10::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (10::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (10::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (10::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (10::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (10::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (10::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (10::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (10::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (10::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (10::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (10::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (10::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 10
and _sam11 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (11::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (11::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (11::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (11::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (11::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (11::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (11::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (11::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (11::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (11::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (11::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (11::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (11::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (11::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (11::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 11
and _sam12 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (12::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (12::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (12::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (12::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (12::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (12::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (12::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (12::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (12::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (12::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (12::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (12::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (12::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (12::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (12::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 12
and _sam13 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (13::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (13::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (13::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (13::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (13::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (13::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (13::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (13::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (13::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (13::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (13::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (13::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (13::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (13::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (13::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 13
and _sam14 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (14::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (14::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (14::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (14::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (14::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (14::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (14::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (14::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (14::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (14::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (14::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (14::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (14::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (14::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (14::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 14
and _sam15 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (15::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (15::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (15::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (15::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (15::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (15::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (15::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (15::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (15::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (15::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (15::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (15::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (15::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (15::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (15::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 15
and _sam16 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (16::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (16::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (16::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (16::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (16::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (16::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (16::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (16::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (16::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (16::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (16::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (16::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (16::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (16::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (16::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 16
and _sam17 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (17::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (17::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (17::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (17::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (17::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (17::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (17::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (17::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (17::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (17::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (17::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (17::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (17::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (17::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (17::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 17
and _sam18 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (18::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (18::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (18::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (18::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (18::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (18::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (18::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (18::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (18::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (18::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (18::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (18::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (18::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (18::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (18::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 18
and _sam19 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (19::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (19::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (19::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (19::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (19::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (19::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (19::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (19::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (19::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (19::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (19::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (19::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (19::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (19::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (19::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 19
and _sam20 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (20::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (20::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (20::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (20::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (20::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (20::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (20::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (20::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (20::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (20::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (20::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (20::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (20::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (20::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (20::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 20
and _sam21 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (21::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (21::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (21::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (21::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (21::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (21::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (21::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (21::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (21::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (21::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (21::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (21::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (21::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (21::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (21::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 21
and _sam22 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (22::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (22::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (22::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (22::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (22::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (22::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (22::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (22::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (22::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (22::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (22::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (22::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (22::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (22::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (22::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 22
and _sam23 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam419 (23::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam420 (23::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam923 (23::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam421 (23::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam422 (23::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam423 (23::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam424 (23::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam425 (23::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam426 (23::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam427 (23::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam428 (23::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam429 (23::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam430 (23::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PARD data)->
			let e,pMem = match pMem with |(EXPR t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ((fst e), [e]) in
		goto (List.hd pEtats) "bloc1" pEtats ((BLOC1 valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
		_sam612 (23::pEtats) (Tok(PARD_IDENT data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam431 (23::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam36 (23::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam432 (23::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 23
and _sam24 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam419 (24::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam420 (24::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam923 (24::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam421 (24::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam422 (24::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam423 (24::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam424 (24::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam425 (24::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam426 (24::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam427 (24::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam428 (24::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam429 (24::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam430 (24::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PARD data)->
			let e,pMem = match pMem with |(EXPR t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ((fst e), [e]) in
		goto (List.hd pEtats) "bloc1" pEtats ((BLOC1 valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
		_sam613 (24::pEtats) (Tok(PARD_IDENT data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam431 (24::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam36 (24::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam432 (24::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 24
and _sam25 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam419 (25::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam420 (25::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam923 (25::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam421 (25::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam422 (25::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam423 (25::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam424 (25::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam425 (25::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam426 (25::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam427 (25::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam428 (25::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam429 (25::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam430 (25::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PARD data)->
			let e,pMem = match pMem with |(EXPR t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ((fst e), [e]) in
		goto (List.hd pEtats) "bloc1" pEtats ((BLOC1 valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
		_sam615 (25::pEtats) (Tok(PARD_IDENT data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam431 (25::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam36 (25::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam432 (25::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 25
and _sam26 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam419 (26::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam420 (26::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam923 (26::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam421 (26::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam422 (26::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam423 (26::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam424 (26::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam425 (26::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam426 (26::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam427 (26::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam428 (26::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam429 (26::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam430 (26::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PARD data)->
			let e,pMem = match pMem with |(EXPR t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ((fst e), [e]) in
		goto (List.hd pEtats) "bloc1" pEtats ((BLOC1 valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
		_sam614 (26::pEtats) (Tok(PARD_IDENT data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam431 (26::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam36 (26::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam432 (26::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 26
and _sam27 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam419 (27::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam420 (27::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam923 (27::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam421 (27::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam422 (27::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam423 (27::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam424 (27::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam425 (27::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam426 (27::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam427 (27::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam428 (27::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam429 (27::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam430 (27::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PARD data)->
			let e,pMem = match pMem with |(EXPR t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ((fst e), [e]) in
		goto (List.hd pEtats) "bloc1" pEtats ((BLOC1 valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
		_sam617 (27::pEtats) (Tok(PARD_IDENT data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam431 (27::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam36 (27::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam432 (27::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 27
and _sam28 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam419 (28::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam420 (28::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam923 (28::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam421 (28::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam422 (28::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam423 (28::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam424 (28::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam425 (28::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam426 (28::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam427 (28::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam428 (28::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam429 (28::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam430 (28::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PARD data)->
			let e,pMem = match pMem with |(EXPR t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ((fst e), [e]) in
		goto (List.hd pEtats) "bloc1" pEtats ((BLOC1 valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
		_sam616 (28::pEtats) (Tok(PARD_IDENT data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam431 (28::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam36 (28::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam432 (28::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 28
and _sam29 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam419 (29::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam420 (29::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam923 (29::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam421 (29::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam422 (29::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam423 (29::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam424 (29::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam425 (29::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam426 (29::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam427 (29::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam428 (29::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam429 (29::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam430 (29::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PARD data)->
			let e,pMem = match pMem with |(EXPR t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ((fst e), [e]) in
		goto (List.hd pEtats) "bloc1" pEtats ((BLOC1 valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
		_sam618 (29::pEtats) (Tok(PARD_IDENT data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam431 (29::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam36 (29::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam432 (29::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 29
and _sam30 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam419 (30::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam420 (30::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam923 (30::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam421 (30::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam422 (30::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam423 (30::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam424 (30::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam425 (30::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam426 (30::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam427 (30::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam428 (30::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam429 (30::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam430 (30::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PARD data)->
			let e,pMem = match pMem with |(EXPR t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ((fst e), [e]) in
		goto (List.hd pEtats) "bloc1" pEtats ((BLOC1 valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
		_sam619 (30::pEtats) (Tok(PARD_IDENT data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam431 (30::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam36 (30::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam432 (30::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 30
and _sam31 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam419 (31::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam420 (31::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam923 (31::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam421 (31::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam422 (31::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam423 (31::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam424 (31::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam425 (31::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam426 (31::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam427 (31::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam428 (31::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam429 (31::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam430 (31::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PARD data)->
			let e,pMem = match pMem with |(EXPR t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ((fst e), [e]) in
		goto (List.hd pEtats) "bloc1" pEtats ((BLOC1 valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
		_sam620 (31::pEtats) (Tok(PARD_IDENT data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam431 (31::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam36 (31::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam432 (31::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 31
and _sam32 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam419 (32::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam420 (32::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam923 (32::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam421 (32::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam422 (32::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam423 (32::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam424 (32::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam425 (32::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam426 (32::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam427 (32::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam428 (32::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam429 (32::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam430 (32::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PARD data)->
			let e,pMem = match pMem with |(EXPR t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ((fst e), [e]) in
		goto (List.hd pEtats) "bloc1" pEtats ((BLOC1 valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
		_sam874 (32::pEtats) (Tok(PARD_IDENT data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam431 (32::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam36 (32::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam432 (32::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 32
and _sam33 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam419 (33::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam420 (33::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam923 (33::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam421 (33::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam422 (33::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam423 (33::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam424 (33::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam425 (33::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam426 (33::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam427 (33::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam428 (33::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam429 (33::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam430 (33::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PARD data)->
			let e,pMem = match pMem with |(EXPR t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ((fst e), [e]) in
		goto (List.hd pEtats) "bloc1" pEtats ((BLOC1 valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
		_sam875 (33::pEtats) (Tok(PARD_IDENT data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam431 (33::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam36 (33::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam432 (33::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 33
and _sam34 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam436 (34::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam437 (34::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam924 (34::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam438 (34::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam439 (34::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam440 (34::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam441 (34::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam442 (34::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam443 (34::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam444 (34::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam445 (34::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam446 (34::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam447 (34::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PARD data)->
			let e,pMem = match pMem with |(EXPR t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ((fst e), [e]) in
		goto (List.hd pEtats) "bloc1" pEtats ((BLOC1 valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam448 (34::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam36 (34::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam449 (34::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 34
and _sam35 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC1BIS t1)::(EXPR t0)::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p, eL) = pb in
    Hyper2.fusionPos (fst e) p, (e::eL)) in
		goto (List.hd pEtats) "bloc1" pEtats ((BLOC1 valeur)::pMem) newToken (PARD data)
	|_->samFail 35
and _sam36 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (36::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (36::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (36::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (36::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (36::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (36::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (36::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (36::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (36::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (36::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (36::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARD data)->
			let p,pMem = match pMem with |(Tok (SEMICOLON t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
    (p, [])
  ) in
		goto (List.hd pEtats) "bloc1bis" pEtats ((BLOC1BIS valeur)::pMem) newToken (PARD data)
	|(PARG data)->
		_sam9 (36::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (36::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam36 (36::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (36::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (36::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 36
and _sam37 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam436 (37::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam437 (37::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam924 (37::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam438 (37::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam439 (37::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam440 (37::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam441 (37::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam442 (37::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam443 (37::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam444 (37::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam445 (37::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam446 (37::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam447 (37::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    (Hyper2.fusionPos p (fst e), [e])
  ) in
		goto (List.hd pEtats) "bloc1bis" pEtats ((BLOC1BIS valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam448 (37::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam36 (37::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam449 (37::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 37
and _sam38 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p,pMem = match pMem with |(BLOC1BIS t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,eL) = pb in (Hyper2.fusionPos p p2, eL)
  ) in
		goto (List.hd pEtats) "bloc1bis" pEtats ((BLOC1BIS valeur)::pMem) newToken (PARD data)
	|_->samFail 38
and _sam39 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p,pMem = match pMem with |(BLOC1BIS t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,eL) = pb in (Hyper2.fusionPos p p2, e::eL)
  ) in
		goto (List.hd pEtats) "bloc1bis" pEtats ((BLOC1BIS valeur)::pMem) newToken (PARD data)
	|_->samFail 39
and _sam40 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (40::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
		_sam100 (40::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (40::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (40::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (40::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (40::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (40::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (40::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (40::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (40::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (40::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (40::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (40::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (40::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam40 (40::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (40::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (40::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 40
and _sam41 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (41::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (41::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (41::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam100 (41::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam348 (41::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (41::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (41::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (41::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (41::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (41::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (41::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (41::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (41::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (41::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (41::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam40 (41::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (41::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 41
and _sam42 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (42::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
		_sam100 (42::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (42::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (42::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (42::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (42::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (42::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (42::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (42::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (42::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (42::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (42::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (42::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (42::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam40 (42::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (42::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (42::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 42
and _sam43 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (43::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (43::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (43::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam100 (43::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam348 (43::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (43::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (43::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (43::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (43::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (43::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (43::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (43::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (43::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (43::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (43::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam40 (43::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (43::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 43
and _sam44 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam343 (44::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam345 (44::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam917 (44::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam100 (44::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam347 (44::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam349 (44::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam351 (44::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam353 (44::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam355 (44::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam357 (44::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam359 (44::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam361 (44::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam363 (44::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam365 (44::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam367 (44::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam40 (44::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam369 (44::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 44
and _sam45 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam376 (45::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam377 (45::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam937 (45::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam100 (45::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam378 (45::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam379 (45::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam380 (45::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam381 (45::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam382 (45::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam383 (45::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam384 (45::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam385 (45::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam386 (45::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam387 (45::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam388 (45::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam40 (45::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam389 (45::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 45
and _sam46 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (46::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
		_sam101 (46::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (46::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (46::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (46::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (46::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (46::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (46::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (46::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (46::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (46::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (46::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (46::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (46::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam46 (46::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (46::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (46::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 46
and _sam47 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (47::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (47::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (47::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam101 (47::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam348 (47::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (47::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (47::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (47::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (47::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (47::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (47::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (47::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (47::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (47::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (47::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam46 (47::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (47::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 47
and _sam48 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (48::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
		_sam101 (48::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (48::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (48::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (48::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (48::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (48::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (48::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (48::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (48::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (48::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (48::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (48::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (48::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam46 (48::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (48::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (48::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 48
and _sam49 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (49::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (49::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (49::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam101 (49::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam348 (49::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (49::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (49::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (49::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (49::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (49::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (49::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (49::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (49::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (49::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (49::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam46 (49::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (49::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 49
and _sam50 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam343 (50::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam345 (50::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam917 (50::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam101 (50::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam347 (50::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam349 (50::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam351 (50::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam353 (50::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam355 (50::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam357 (50::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam359 (50::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam361 (50::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam363 (50::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam365 (50::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam367 (50::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam46 (50::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam369 (50::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 50
and _sam51 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam376 (51::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam377 (51::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam937 (51::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam101 (51::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam378 (51::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam379 (51::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam380 (51::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam381 (51::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam382 (51::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam383 (51::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam384 (51::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam385 (51::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam386 (51::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam387 (51::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam388 (51::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam46 (51::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam389 (51::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 51
and _sam52 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (52::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
		_sam102 (52::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (52::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (52::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (52::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (52::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (52::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (52::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (52::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (52::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (52::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (52::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (52::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (52::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam52 (52::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (52::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (52::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 52
and _sam53 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (53::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (53::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (53::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam102 (53::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam348 (53::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (53::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (53::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (53::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (53::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (53::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (53::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (53::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (53::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (53::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (53::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam52 (53::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (53::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 53
and _sam54 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (54::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
		_sam102 (54::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (54::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (54::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (54::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (54::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (54::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (54::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (54::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (54::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (54::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (54::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (54::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (54::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam52 (54::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (54::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (54::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 54
and _sam55 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (55::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (55::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (55::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam102 (55::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam348 (55::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (55::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (55::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (55::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (55::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (55::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (55::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (55::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (55::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (55::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (55::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam52 (55::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (55::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 55
and _sam56 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam343 (56::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam345 (56::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam917 (56::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam102 (56::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam347 (56::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam349 (56::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam351 (56::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam353 (56::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam355 (56::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam357 (56::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam359 (56::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam361 (56::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam363 (56::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam365 (56::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam367 (56::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam52 (56::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam369 (56::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 56
and _sam57 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam376 (57::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam377 (57::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam937 (57::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam102 (57::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam378 (57::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam379 (57::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam380 (57::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam381 (57::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam382 (57::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam383 (57::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam384 (57::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam385 (57::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam386 (57::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam387 (57::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam388 (57::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam52 (57::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam389 (57::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 57
and _sam58 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (58::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
		_sam103 (58::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (58::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (58::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (58::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (58::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (58::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (58::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (58::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (58::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (58::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (58::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (58::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (58::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam58 (58::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (58::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (58::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 58
and _sam59 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (59::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (59::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (59::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam103 (59::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam348 (59::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (59::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (59::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (59::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (59::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (59::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (59::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (59::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (59::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (59::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (59::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam58 (59::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (59::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 59
and _sam60 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (60::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
		_sam103 (60::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (60::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (60::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (60::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (60::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (60::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (60::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (60::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (60::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (60::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (60::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (60::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (60::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam58 (60::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (60::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (60::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 60
and _sam61 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (61::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (61::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (61::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam103 (61::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam348 (61::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (61::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (61::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (61::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (61::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (61::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (61::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (61::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (61::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (61::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (61::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam58 (61::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (61::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 61
and _sam62 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam343 (62::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam345 (62::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam917 (62::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam103 (62::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam347 (62::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam349 (62::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam351 (62::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam353 (62::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam355 (62::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam357 (62::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam359 (62::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam361 (62::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam363 (62::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam365 (62::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam367 (62::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam58 (62::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam369 (62::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 62
and _sam63 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam376 (63::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam377 (63::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam937 (63::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam103 (63::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam378 (63::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam379 (63::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam380 (63::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam381 (63::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam382 (63::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam383 (63::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam384 (63::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam385 (63::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam386 (63::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam387 (63::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam388 (63::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam58 (63::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam389 (63::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 63
and _sam64 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (64::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
		_sam104 (64::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (64::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (64::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (64::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (64::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (64::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (64::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (64::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (64::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (64::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (64::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (64::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (64::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam64 (64::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (64::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (64::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 64
and _sam65 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (65::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (65::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (65::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam104 (65::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam348 (65::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (65::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (65::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (65::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (65::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (65::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (65::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (65::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (65::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (65::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (65::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam64 (65::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (65::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 65
and _sam66 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (66::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
		_sam104 (66::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (66::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (66::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (66::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (66::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (66::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (66::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (66::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (66::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (66::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (66::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (66::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (66::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam64 (66::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (66::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (66::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 66
and _sam67 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (67::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (67::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (67::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam104 (67::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam348 (67::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (67::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (67::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (67::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (67::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (67::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (67::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (67::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (67::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (67::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (67::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam64 (67::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (67::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 67
and _sam68 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam343 (68::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam345 (68::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam917 (68::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam104 (68::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam347 (68::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam349 (68::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam351 (68::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam353 (68::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam355 (68::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam357 (68::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam359 (68::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam361 (68::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam363 (68::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam365 (68::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam367 (68::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam64 (68::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam369 (68::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 68
and _sam69 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam376 (69::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam377 (69::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam937 (69::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam104 (69::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam378 (69::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam379 (69::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam380 (69::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam381 (69::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam382 (69::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam383 (69::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam384 (69::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam385 (69::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam386 (69::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam387 (69::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam388 (69::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam64 (69::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam389 (69::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 69
and _sam70 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (70::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
		_sam105 (70::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (70::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (70::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (70::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (70::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (70::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (70::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (70::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (70::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (70::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (70::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (70::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (70::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam70 (70::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (70::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (70::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 70
and _sam71 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (71::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (71::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (71::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam105 (71::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam348 (71::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (71::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (71::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (71::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (71::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (71::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (71::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (71::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (71::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (71::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (71::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam70 (71::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (71::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 71
and _sam72 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (72::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
		_sam105 (72::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (72::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (72::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (72::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (72::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (72::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (72::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (72::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (72::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (72::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (72::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (72::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (72::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam70 (72::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (72::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (72::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 72
and _sam73 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (73::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (73::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (73::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam105 (73::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam348 (73::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (73::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (73::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (73::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (73::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (73::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (73::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (73::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (73::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (73::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (73::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam70 (73::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (73::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 73
and _sam74 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam343 (74::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam345 (74::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam917 (74::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam105 (74::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam347 (74::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam349 (74::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam351 (74::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam353 (74::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam355 (74::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam357 (74::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam359 (74::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam361 (74::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam363 (74::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam365 (74::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam367 (74::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam70 (74::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam369 (74::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 74
and _sam75 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam376 (75::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam377 (75::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam937 (75::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam105 (75::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam378 (75::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam379 (75::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam380 (75::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam381 (75::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam382 (75::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam383 (75::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam384 (75::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam385 (75::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam386 (75::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam387 (75::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam388 (75::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam70 (75::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam389 (75::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 75
and _sam76 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (76::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
		_sam106 (76::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (76::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (76::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (76::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (76::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (76::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (76::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (76::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (76::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (76::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (76::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (76::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (76::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam76 (76::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (76::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (76::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 76
and _sam77 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (77::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (77::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (77::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam106 (77::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam348 (77::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (77::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (77::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (77::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (77::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (77::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (77::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (77::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (77::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (77::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (77::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam76 (77::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (77::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 77
and _sam78 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (78::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
		_sam106 (78::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (78::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (78::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (78::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (78::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (78::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (78::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (78::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (78::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (78::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (78::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (78::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (78::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam76 (78::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (78::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (78::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 78
and _sam79 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (79::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (79::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (79::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam106 (79::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam348 (79::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (79::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (79::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (79::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (79::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (79::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (79::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (79::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (79::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (79::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (79::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam76 (79::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (79::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 79
and _sam80 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam343 (80::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam345 (80::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam917 (80::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam106 (80::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam347 (80::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam349 (80::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam351 (80::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam353 (80::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam355 (80::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam357 (80::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam359 (80::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam361 (80::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam363 (80::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam365 (80::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam367 (80::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam76 (80::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam369 (80::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 80
and _sam81 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam376 (81::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam377 (81::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam937 (81::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam106 (81::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam378 (81::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam379 (81::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam380 (81::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam381 (81::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam382 (81::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam383 (81::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam384 (81::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam385 (81::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam386 (81::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam387 (81::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam388 (81::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam76 (81::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam389 (81::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 81
and _sam82 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (82::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
		_sam107 (82::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (82::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (82::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (82::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (82::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (82::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (82::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (82::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (82::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (82::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (82::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (82::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (82::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam82 (82::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (82::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (82::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 82
and _sam83 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (83::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (83::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (83::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam107 (83::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam348 (83::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (83::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (83::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (83::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (83::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (83::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (83::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (83::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (83::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (83::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (83::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam82 (83::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (83::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 83
and _sam84 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (84::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
		_sam107 (84::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (84::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (84::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (84::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (84::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (84::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (84::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (84::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (84::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (84::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (84::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (84::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (84::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam82 (84::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (84::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (84::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 84
and _sam85 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (85::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (85::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (85::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam107 (85::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam348 (85::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (85::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (85::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (85::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (85::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (85::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (85::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (85::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (85::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (85::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (85::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam82 (85::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (85::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 85
and _sam86 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam343 (86::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam345 (86::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam917 (86::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam107 (86::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam347 (86::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam349 (86::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam351 (86::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam353 (86::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam355 (86::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam357 (86::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam359 (86::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam361 (86::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam363 (86::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam365 (86::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam367 (86::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam82 (86::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam369 (86::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 86
and _sam87 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam376 (87::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam377 (87::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam937 (87::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam107 (87::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam378 (87::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam379 (87::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam380 (87::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam381 (87::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam382 (87::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam383 (87::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam384 (87::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam385 (87::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam386 (87::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam387 (87::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam388 (87::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam82 (87::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam389 (87::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 87
and _sam88 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (88::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
		_sam108 (88::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (88::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (88::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (88::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (88::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (88::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (88::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (88::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (88::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (88::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (88::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (88::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (88::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam88 (88::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (88::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (88::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 88
and _sam89 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (89::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (89::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (89::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam108 (89::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam348 (89::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (89::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (89::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (89::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (89::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (89::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (89::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (89::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (89::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (89::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (89::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam88 (89::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (89::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 89
and _sam90 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (90::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
		_sam108 (90::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (90::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (90::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (90::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (90::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (90::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (90::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (90::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (90::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (90::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (90::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (90::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (90::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam88 (90::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (90::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (90::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 90
and _sam91 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (91::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (91::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (91::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam108 (91::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam348 (91::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (91::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (91::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (91::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (91::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (91::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (91::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (91::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (91::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (91::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (91::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam88 (91::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (91::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 91
and _sam92 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam343 (92::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam345 (92::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam917 (92::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam108 (92::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam347 (92::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam349 (92::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam351 (92::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam353 (92::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam355 (92::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam357 (92::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam359 (92::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam361 (92::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam363 (92::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam365 (92::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam367 (92::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam88 (92::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam369 (92::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 92
and _sam93 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam376 (93::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam377 (93::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam937 (93::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam108 (93::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam378 (93::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam379 (93::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam380 (93::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam381 (93::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam382 (93::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam383 (93::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam384 (93::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam385 (93::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam386 (93::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam387 (93::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam388 (93::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam88 (93::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam389 (93::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 93
and _sam94 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (94::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
		_sam109 (94::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (94::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (94::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (94::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (94::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (94::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (94::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (94::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (94::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (94::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (94::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (94::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (94::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam94 (94::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (94::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (94::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 94
and _sam95 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (95::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (95::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (95::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam109 (95::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam348 (95::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (95::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (95::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (95::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (95::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (95::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (95::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (95::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (95::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (95::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (95::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam94 (95::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (95::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 95
and _sam96 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (96::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
		_sam109 (96::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (96::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (96::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (96::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (96::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (96::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (96::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (96::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (96::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (96::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (96::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (96::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (96::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam94 (96::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (96::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|TYPE->
		_sam965 (96::pEtats) (Tok TYPE::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (96::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 96
and _sam97 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (97::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
		_sam109 (97::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (97::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (97::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (97::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (97::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (97::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (97::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (97::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (97::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (97::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (97::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (97::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (97::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam94 (97::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (97::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (97::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 97
and _sam98 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (98::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (98::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (98::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam109 (98::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam348 (98::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (98::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (98::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (98::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (98::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (98::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (98::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (98::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (98::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (98::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (98::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam94 (98::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (98::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 98
and _sam99 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (99::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (99::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (99::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
		_sam109 (99::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam348 (99::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (99::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (99::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (99::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (99::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (99::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (99::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (99::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (99::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (99::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (99::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam94 (99::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (99::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 99
and _sam100 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (FOR data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (IF data)
	|(INT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (INT data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (WHILE data)
	|_->samFail 100
and _sam101 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (FOR data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (IF data)
	|(INT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (INT data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (WHILE data)
	|_->samFail 101
and _sam102 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|_->samFail 102
and _sam103 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|_->samFail 103
and _sam104 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (END data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|_->samFail 104
and _sam105 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (END data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|_->samFail 105
and _sam106 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|EOF->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken EOF
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|_->samFail 106
and _sam107 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|_->samFail 107
and _sam108 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|_->samFail 108
and _sam109 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken EOF
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p,(p,[])) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|_->samFail 109
and _sam110 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (WHILE data)
	|_->samFail 110
and _sam111 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (WHILE data)
	|_->samFail 111
and _sam112 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|_->samFail 112
and _sam113 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|_->samFail 113
and _sam114 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|_->samFail 114
and _sam115 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|_->samFail 115
and _sam116 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|EOF->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|_->samFail 116
and _sam117 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|_->samFail 117
and _sam118 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|_->samFail 118
and _sam119 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken EOF
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(BLOC_END t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    (pEnd, (Hyper2.fusionPos p1 p2, eL))) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|_->samFail 119
and _sam120 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (WHILE data)
	|_->samFail 120
and _sam121 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (WHILE data)
	|_->samFail 121
and _sam122 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|_->samFail 122
and _sam123 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|_->samFail 123
and _sam124 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|_->samFail 124
and _sam125 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|_->samFail 125
and _sam126 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|_->samFail 126
and _sam127 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|_->samFail 127
and _sam128 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (TIMES data)
	|_->samFail 128
and _sam129 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken EOF
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let pEnd, (p2, eL) = pb in
    pEnd, (Hyper2.fusionPos p1 p2, (e::eL))
  ) in
		goto (List.hd pEtats) "bloc_END" pEtats ((BLOC_END valeur)::pMem) newToken (SEMICOLON data)
	|_->samFail 129
and _sam130 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam456 (130::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam465 (130::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam18 (130::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|EOF->
		_sam134 (130::pEtats) (Tok EOF::pMem) newToken (newToken())
	|(FALSE data)->
		_sam492 (130::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam501 (130::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(FUNCTION data)->
		_sam900 (130::pEtats) (Tok(FUNCTION data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam913 (130::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam243 (130::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam272 (130::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam573 (130::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam399 (130::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|MUTABLE->
		_sam960 (130::pEtats) (Tok MUTABLE::pMem) newToken (newToken())
	|(NOT data)->
		_sam400 (130::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam7 (130::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam401 (130::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(STRUCT data)->
		_sam963 (130::pEtats) (Tok(STRUCT data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam636 (130::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam396 (130::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 130
and _sam131 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam456 (131::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam465 (131::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam18 (131::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|EOF->
		_sam134 (131::pEtats) (Tok EOF::pMem) newToken (newToken())
	|(FALSE data)->
		_sam492 (131::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam501 (131::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(FUNCTION data)->
		_sam900 (131::pEtats) (Tok(FUNCTION data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam913 (131::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam243 (131::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam272 (131::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam573 (131::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam399 (131::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|MUTABLE->
		_sam960 (131::pEtats) (Tok MUTABLE::pMem) newToken (newToken())
	|(NOT data)->
		_sam400 (131::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam7 (131::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam401 (131::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(STRUCT data)->
		_sam963 (131::pEtats) (Tok(STRUCT data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam636 (131::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam396 (131::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 131
and _sam132 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam456 (132::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam465 (132::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam18 (132::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|EOF->
		_sam134 (132::pEtats) (Tok EOF::pMem) newToken (newToken())
	|(FALSE data)->
		_sam492 (132::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam501 (132::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(FUNCTION data)->
		_sam900 (132::pEtats) (Tok(FUNCTION data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam913 (132::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam243 (132::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam272 (132::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam573 (132::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam399 (132::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|MUTABLE->
		_sam960 (132::pEtats) (Tok MUTABLE::pMem) newToken (newToken())
	|(NOT data)->
		_sam400 (132::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam7 (132::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam401 (132::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(STRUCT data)->
		_sam963 (132::pEtats) (Tok(STRUCT data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam636 (132::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam396 (132::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 132
and _sam133 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam456 (133::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam465 (133::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam18 (133::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|EOF->
		_sam134 (133::pEtats) (Tok EOF::pMem) newToken (newToken())
	|(FALSE data)->
		_sam492 (133::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam501 (133::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(FUNCTION data)->
		_sam900 (133::pEtats) (Tok(FUNCTION data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam913 (133::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam243 (133::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam272 (133::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam573 (133::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam399 (133::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|MUTABLE->
		_sam960 (133::pEtats) (Tok MUTABLE::pMem) newToken (newToken())
	|(NOT data)->
		_sam400 (133::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam7 (133::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam401 (133::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(STRUCT data)->
		_sam963 (133::pEtats) (Tok(STRUCT data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam636 (133::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam396 (133::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 133
and _sam134 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
			let pMem = match pMem with |_::tl -> tl |_ -> assert false in
			let valeur = ([]) in
		goto (List.hd pEtats) "declarations_list" pEtats ((DECLARATIONS_LIST valeur)::pMem) newToken EOF
	|_->samFail 134
and _sam135 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam402 (135::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam403 (135::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam922 (135::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|EOF->
		_sam136 (135::pEtats) (Tok EOF::pMem) newToken (newToken())
	|(EQ data)->
		_sam404 (135::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam405 (135::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam406 (135::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam407 (135::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam408 (135::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam409 (135::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam410 (135::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam411 (135::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam412 (135::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam413 (135::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam414 (135::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam130 (135::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam415 (135::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 135
and _sam136 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,pMem = match pMem with |_::(EXPR t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ([Dexpr e]) in
		goto (List.hd pEtats) "declarations_list" pEtats ((DECLARATIONS_LIST valeur)::pMem) newToken EOF
	|_->samFail 136
and _sam137 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let d,e,pMem = match pMem with |(DECLARATIONS_LIST t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = ((Dexpr e)::d) in
		goto (List.hd pEtats) "declarations_list" pEtats ((DECLARATIONS_LIST valeur)::pMem) newToken EOF
	|_->samFail 137
and _sam138 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
		_sam139 (138::pEtats) (Tok EOF::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam131 (138::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|_->samFail 138
and _sam139 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let f,pMem = match pMem with |_::(FONCTION t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ([f]) in
		goto (List.hd pEtats) "declarations_list" pEtats ((DECLARATIONS_LIST valeur)::pMem) newToken EOF
	|_->samFail 139
and _sam140 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let d,f,pMem = match pMem with |(DECLARATIONS_LIST t2)::_::(FONCTION t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (f::d) in
		goto (List.hd pEtats) "declarations_list" pEtats ((DECLARATIONS_LIST valeur)::pMem) newToken EOF
	|_->samFail 140
and _sam141 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
		_sam142 (141::pEtats) (Tok EOF::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam132 (141::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|_->samFail 141
and _sam142 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let s,pMem = match pMem with |_::(STRUCTURE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ([s]) in
		goto (List.hd pEtats) "declarations_list" pEtats ((DECLARATIONS_LIST valeur)::pMem) newToken EOF
	|_->samFail 142
and _sam143 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let d,s,pMem = match pMem with |(DECLARATIONS_LIST t2)::_::(STRUCTURE t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (s::d) in
		goto (List.hd pEtats) "declarations_list" pEtats ((DECLARATIONS_LIST valeur)::pMem) newToken EOF
	|_->samFail 143
and _sam144 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
		_sam42 (144::pEtats) (Tok(ELSE data)::pMem) newToken (newToken())
	|(ELSEIF data)->
		_sam182 (144::pEtats) (Tok(ELSEIF data)::pMem) newToken (newToken())
	|(END data)->
		_sam200 (144::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 144
and _sam145 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
		_sam42 (145::pEtats) (Tok(ELSE data)::pMem) newToken (newToken())
	|(ELSEIF data)->
		_sam182 (145::pEtats) (Tok(ELSEIF data)::pMem) newToken (newToken())
	|(END data)->
		_sam200 (145::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 145
and _sam146 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
		_sam48 (146::pEtats) (Tok(ELSE data)::pMem) newToken (newToken())
	|(ELSEIF data)->
		_sam183 (146::pEtats) (Tok(ELSEIF data)::pMem) newToken (newToken())
	|(END data)->
		_sam201 (146::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 146
and _sam147 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
		_sam48 (147::pEtats) (Tok(ELSE data)::pMem) newToken (newToken())
	|(ELSEIF data)->
		_sam183 (147::pEtats) (Tok(ELSEIF data)::pMem) newToken (newToken())
	|(END data)->
		_sam201 (147::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 147
and _sam148 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
		_sam54 (148::pEtats) (Tok(ELSE data)::pMem) newToken (newToken())
	|(ELSEIF data)->
		_sam184 (148::pEtats) (Tok(ELSEIF data)::pMem) newToken (newToken())
	|(END data)->
		_sam202 (148::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 148
and _sam149 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
		_sam54 (149::pEtats) (Tok(ELSE data)::pMem) newToken (newToken())
	|(ELSEIF data)->
		_sam184 (149::pEtats) (Tok(ELSEIF data)::pMem) newToken (newToken())
	|(END data)->
		_sam202 (149::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 149
and _sam150 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
		_sam60 (150::pEtats) (Tok(ELSE data)::pMem) newToken (newToken())
	|(ELSEIF data)->
		_sam185 (150::pEtats) (Tok(ELSEIF data)::pMem) newToken (newToken())
	|(END data)->
		_sam203 (150::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 150
and _sam151 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
		_sam60 (151::pEtats) (Tok(ELSE data)::pMem) newToken (newToken())
	|(ELSEIF data)->
		_sam185 (151::pEtats) (Tok(ELSEIF data)::pMem) newToken (newToken())
	|(END data)->
		_sam203 (151::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 151
and _sam152 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
		_sam66 (152::pEtats) (Tok(ELSE data)::pMem) newToken (newToken())
	|(ELSEIF data)->
		_sam186 (152::pEtats) (Tok(ELSEIF data)::pMem) newToken (newToken())
	|(END data)->
		_sam204 (152::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 152
and _sam153 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
		_sam66 (153::pEtats) (Tok(ELSE data)::pMem) newToken (newToken())
	|(ELSEIF data)->
		_sam186 (153::pEtats) (Tok(ELSEIF data)::pMem) newToken (newToken())
	|(END data)->
		_sam204 (153::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 153
and _sam154 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
		_sam66 (154::pEtats) (Tok(ELSE data)::pMem) newToken (newToken())
	|(ELSEIF data)->
		_sam186 (154::pEtats) (Tok(ELSEIF data)::pMem) newToken (newToken())
	|(END data)->
		_sam204 (154::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 154
and _sam155 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
		_sam72 (155::pEtats) (Tok(ELSE data)::pMem) newToken (newToken())
	|(ELSEIF data)->
		_sam187 (155::pEtats) (Tok(ELSEIF data)::pMem) newToken (newToken())
	|(END data)->
		_sam205 (155::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 155
and _sam156 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
		_sam72 (156::pEtats) (Tok(ELSE data)::pMem) newToken (newToken())
	|(ELSEIF data)->
		_sam187 (156::pEtats) (Tok(ELSEIF data)::pMem) newToken (newToken())
	|(END data)->
		_sam205 (156::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 156
and _sam157 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
		_sam72 (157::pEtats) (Tok(ELSE data)::pMem) newToken (newToken())
	|(ELSEIF data)->
		_sam187 (157::pEtats) (Tok(ELSEIF data)::pMem) newToken (newToken())
	|(END data)->
		_sam205 (157::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 157
and _sam158 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
		_sam78 (158::pEtats) (Tok(ELSE data)::pMem) newToken (newToken())
	|(ELSEIF data)->
		_sam188 (158::pEtats) (Tok(ELSEIF data)::pMem) newToken (newToken())
	|(END data)->
		_sam206 (158::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 158
and _sam159 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
		_sam78 (159::pEtats) (Tok(ELSE data)::pMem) newToken (newToken())
	|(ELSEIF data)->
		_sam188 (159::pEtats) (Tok(ELSEIF data)::pMem) newToken (newToken())
	|(END data)->
		_sam206 (159::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 159
and _sam160 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
		_sam84 (160::pEtats) (Tok(ELSE data)::pMem) newToken (newToken())
	|(ELSEIF data)->
		_sam189 (160::pEtats) (Tok(ELSEIF data)::pMem) newToken (newToken())
	|(END data)->
		_sam207 (160::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 160
and _sam161 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
		_sam84 (161::pEtats) (Tok(ELSE data)::pMem) newToken (newToken())
	|(ELSEIF data)->
		_sam189 (161::pEtats) (Tok(ELSEIF data)::pMem) newToken (newToken())
	|(END data)->
		_sam207 (161::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 161
and _sam162 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
		_sam90 (162::pEtats) (Tok(ELSE data)::pMem) newToken (newToken())
	|(ELSEIF data)->
		_sam190 (162::pEtats) (Tok(ELSEIF data)::pMem) newToken (newToken())
	|(END data)->
		_sam208 (162::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 162
and _sam163 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
		_sam90 (163::pEtats) (Tok(ELSE data)::pMem) newToken (newToken())
	|(ELSEIF data)->
		_sam190 (163::pEtats) (Tok(ELSEIF data)::pMem) newToken (newToken())
	|(END data)->
		_sam208 (163::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 163
and _sam164 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (WHILE data)
	|_->samFail 164
and _sam165 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (WHILE data)
	|_->samFail 165
and _sam166 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 166
and _sam167 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 167
and _sam168 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 168
and _sam169 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 169
and _sam170 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|EOF->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 170
and _sam171 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 171
and _sam172 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pMem = match pMem with |(BLOC_END t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (
    let (p2, b) = pb in
    p2, Ielse b) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 172
and _sam173 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (WHILE data)
	|_->samFail 173
and _sam174 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (WHILE data)
	|_->samFail 174
and _sam175 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 175
and _sam176 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 176
and _sam177 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 177
and _sam178 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 178
and _sam179 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 179
and _sam180 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 180
and _sam181 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p2, (p,b)) = pb in
    p2, Ielse (Hyper2.fusionPos (fst e) p, e::b)) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 181
and _sam182 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (182::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (182::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (182::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (182::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (182::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (182::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (182::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (182::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (182::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (182::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (182::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (182::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (182::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (182::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (182::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 182
and _sam183 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (183::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (183::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (183::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (183::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (183::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (183::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (183::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (183::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (183::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (183::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (183::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (183::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (183::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (183::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (183::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 183
and _sam184 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (184::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (184::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (184::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (184::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (184::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (184::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (184::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (184::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (184::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (184::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (184::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (184::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (184::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (184::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (184::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 184
and _sam185 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (185::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (185::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (185::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (185::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (185::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (185::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (185::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (185::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (185::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (185::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (185::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (185::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (185::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (185::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (185::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 185
and _sam186 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (186::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (186::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (186::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (186::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (186::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (186::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (186::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (186::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (186::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (186::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (186::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (186::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (186::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (186::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (186::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 186
and _sam187 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (187::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (187::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (187::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (187::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (187::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (187::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (187::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (187::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (187::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (187::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (187::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (187::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (187::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (187::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (187::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 187
and _sam188 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (188::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (188::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (188::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (188::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (188::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (188::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (188::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (188::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (188::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (188::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (188::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (188::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (188::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (188::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (188::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 188
and _sam189 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (189::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (189::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (189::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (189::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (189::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (189::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (189::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (189::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (189::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (189::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (189::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (189::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (189::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (189::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (189::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 189
and _sam190 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (190::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (190::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (190::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (190::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (190::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (190::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (190::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (190::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (190::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (190::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (190::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (190::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (190::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (190::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (190::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 190
and _sam191 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (WHILE data)
	|_->samFail 191
and _sam192 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (WHILE data)
	|_->samFail 192
and _sam193 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 193
and _sam194 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 194
and _sam195 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 195
and _sam196 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 196
and _sam197 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 197
and _sam198 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 198
and _sam199 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let el,eb,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
    let (p, el) = el in
  	let (e,b) = eb in
  	p, Ielseif (e, b, el)
  	) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 199
and _sam200 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (FOR data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IF data)
	|(INT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (INT data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (WHILE data)
	|_->samFail 200
and _sam201 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (FOR data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (IF data)
	|(INT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (INT data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (WHILE data)
	|_->samFail 201
and _sam202 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 202
and _sam203 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 203
and _sam204 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (END data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 204
and _sam205 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (END data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 205
and _sam206 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|EOF->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken EOF
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 206
and _sam207 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 207
and _sam208 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (END t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Iend) in
		goto (List.hd pEtats) "else_exp" pEtats ((ELSE_EXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 208
and _sam209 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (209::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (209::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (209::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (209::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (209::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (209::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (209::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (209::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (209::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (209::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (209::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (209::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (209::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (209::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (209::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 209
and _sam210 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (210::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (210::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (210::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (210::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (210::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (210::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (210::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (210::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (210::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (210::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (210::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (210::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (210::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (210::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (210::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 210
and _sam211 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (211::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (211::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (211::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (211::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (211::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (211::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (211::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (211::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (211::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (211::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (211::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (211::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (211::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (211::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (211::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 211
and _sam212 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (212::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (212::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (212::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (212::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (212::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (212::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (212::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (212::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (212::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (212::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (212::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (212::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (212::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (212::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (212::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 212
and _sam213 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (213::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (213::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (213::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (213::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (213::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (213::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (213::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (213::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (213::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (213::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (213::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (213::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (213::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (213::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (213::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 213
and _sam214 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (214::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (214::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (214::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (214::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (214::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (214::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (214::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (214::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (214::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (214::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (214::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (214::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (214::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (214::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (214::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 214
and _sam215 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (215::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (215::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (215::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (215::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (215::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (215::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (215::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (215::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (215::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (215::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (215::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (215::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (215::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (215::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (215::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 215
and _sam216 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (216::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (216::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (216::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (216::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (216::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (216::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (216::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (216::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (216::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (216::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (216::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (216::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (216::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (216::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (216::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 216
and _sam217 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (217::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (217::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (217::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (217::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (217::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (217::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (217::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (217::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (217::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (217::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (217::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (217::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (217::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (217::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (217::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 217
and _sam218 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (218::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (218::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (218::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (218::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (218::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (218::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (218::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (218::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (218::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (218::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (218::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (218::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (218::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (218::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (218::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 218
and _sam219 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (219::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (219::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (219::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (219::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (219::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (219::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (219::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (219::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (219::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (219::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (219::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (219::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (219::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (219::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (219::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 219
and _sam220 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
		_sam450 (220::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(COLON data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ENTIER_IDENT data)->
		_sam459 (220::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (220::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
		_sam486 (220::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (220::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(G data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
		_sam909 (220::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (220::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (220::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (220::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(L data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam218 (220::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
		_sam219 (220::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(OR data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
		_sam1 (220::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
		_sam220 (220::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
		_sam630 (220::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (220::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 220
and _sam221 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (221::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (221::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (221::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (221::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (221::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (221::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (221::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (221::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (221::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (221::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (221::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (221::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (221::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (221::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (221::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 221
and _sam222 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (222::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (222::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (222::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (222::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (222::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (222::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (222::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (222::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (222::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (222::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (222::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (222::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (222::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (222::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (222::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 222
and _sam223 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (223::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (223::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (223::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (223::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (223::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (223::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (223::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (223::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (223::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (223::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (223::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (223::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (223::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (223::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (223::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 223
and _sam224 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (224::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (224::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (224::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (224::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (224::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (224::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (224::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (224::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (224::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (224::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (224::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (224::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (224::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (224::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (224::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 224
and _sam225 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (225::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (225::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (225::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (225::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (225::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (225::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (225::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (225::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (225::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (225::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (225::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (225::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (225::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (225::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (225::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 225
and _sam226 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (226::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (226::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (226::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (226::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (226::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (226::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (226::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (226::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (226::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (226::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (226::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (226::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (226::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (226::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (226::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 226
and _sam227 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (227::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (227::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (227::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (227::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (227::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (227::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (227::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (227::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (227::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (227::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (227::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (227::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (227::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (227::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (227::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 227
and _sam228 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (228::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (228::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (228::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (228::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (228::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (228::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (228::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (228::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (228::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (228::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (228::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (228::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (228::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (228::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (228::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 228
and _sam229 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (229::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (229::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (229::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (229::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (229::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (229::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (229::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (229::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (229::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (229::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (229::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (229::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (229::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (229::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (229::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 229
and _sam230 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (230::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (230::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (230::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (230::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (230::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (230::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (230::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (230::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (230::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (230::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (230::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (230::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (230::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (230::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (230::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 230
and _sam231 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (231::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (231::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (231::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (231::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (231::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (231::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (231::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (231::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (231::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (231::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (231::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (231::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (231::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (231::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (231::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 231
and _sam232 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (232::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (232::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (232::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (232::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (232::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (232::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (232::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (232::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (232::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (232::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (232::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (232::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (232::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (232::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (232::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 232
and _sam233 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (233::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (233::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (233::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (233::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (233::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (233::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (233::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (233::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (233::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (233::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (233::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (233::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (233::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (233::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (233::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 233
and _sam234 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (234::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (234::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (234::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (234::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (234::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (234::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (234::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (234::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (234::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (234::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (234::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (234::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (234::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (234::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (234::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 234
and _sam235 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (235::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (235::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (235::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (235::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (235::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (235::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (235::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (235::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (235::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (235::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (235::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (235::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (235::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (235::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (235::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 235
and _sam236 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam450 (236::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam459 (236::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam12 (236::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam486 (236::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam495 (236::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam909 (236::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam237 (236::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam266 (236::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam567 (236::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam218 (236::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam219 (236::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam1 (236::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam220 (236::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam630 (236::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam392 (236::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 236
and _sam237 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (237::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (237::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (237::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (237::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (237::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (237::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (237::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (237::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (237::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (237::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (237::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats=237::pEtats in
			let valeur = ([]) in
		goto (List.hd pEtats) "separated_list_COMMA_expr" pEtats ((SEPARATED_LIST_COMMA_EXPR valeur)::pMem) newToken (PARD data)
	|(PARG data)->
		_sam2 (237::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (237::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (237::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (237::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 237
and _sam238 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (238::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (238::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (238::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (238::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (238::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (238::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (238::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (238::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (238::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (238::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (238::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats=238::pEtats in
			let valeur = ([]) in
		goto (List.hd pEtats) "separated_list_COMMA_expr" pEtats ((SEPARATED_LIST_COMMA_EXPR valeur)::pMem) newToken (PARD data)
	|(PARG data)->
		_sam2 (238::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (238::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (238::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (238::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 238
and _sam239 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (239::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (239::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (239::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (239::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (239::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (239::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (239::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (239::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (239::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (239::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (239::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats=239::pEtats in
			let valeur = ([]) in
		goto (List.hd pEtats) "separated_list_COMMA_expr" pEtats ((SEPARATED_LIST_COMMA_EXPR valeur)::pMem) newToken (PARD data)
	|(PARG data)->
		_sam2 (239::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (239::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (239::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (239::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 239
and _sam240 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (240::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (240::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (240::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (240::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (240::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (240::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (240::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (240::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (240::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (240::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (240::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats=240::pEtats in
			let valeur = ([]) in
		goto (List.hd pEtats) "separated_list_COMMA_expr" pEtats ((SEPARATED_LIST_COMMA_EXPR valeur)::pMem) newToken (PARD data)
	|(PARG data)->
		_sam2 (240::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (240::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (240::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (240::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 240
and _sam241 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (241::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (241::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (241::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (241::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (241::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (241::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (241::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (241::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (241::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (241::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (241::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats=241::pEtats in
			let valeur = ([]) in
		goto (List.hd pEtats) "separated_list_COMMA_expr" pEtats ((SEPARATED_LIST_COMMA_EXPR valeur)::pMem) newToken (PARD data)
	|(PARG data)->
		_sam2 (241::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (241::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (241::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (241::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 241
and _sam242 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (242::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (242::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (242::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (242::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (242::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (242::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (242::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (242::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (242::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (242::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (242::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats=242::pEtats in
			let valeur = ([]) in
		goto (List.hd pEtats) "separated_list_COMMA_expr" pEtats ((SEPARATED_LIST_COMMA_EXPR valeur)::pMem) newToken (PARD data)
	|(PARG data)->
		_sam2 (242::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (242::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (242::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (242::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 242
and _sam243 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (243::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (243::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (243::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (243::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (243::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (243::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (243::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (243::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (243::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (243::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (243::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats=243::pEtats in
			let valeur = ([]) in
		goto (List.hd pEtats) "separated_list_COMMA_expr" pEtats ((SEPARATED_LIST_COMMA_EXPR valeur)::pMem) newToken (PARD data)
	|(PARG data)->
		_sam2 (243::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (243::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (243::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (243::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 243
and _sam244 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (244::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (244::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (244::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (244::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (244::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (244::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (244::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (244::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (244::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (244::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (244::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats=244::pEtats in
			let valeur = ([]) in
		goto (List.hd pEtats) "separated_list_COMMA_expr" pEtats ((SEPARATED_LIST_COMMA_EXPR valeur)::pMem) newToken (PARD data)
	|(PARG data)->
		_sam2 (244::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (244::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (244::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (244::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 244
and _sam245 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (245::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (245::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (245::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (245::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (245::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (245::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (245::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (245::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (245::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (245::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (245::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats=245::pEtats in
			let valeur = ([]) in
		goto (List.hd pEtats) "separated_list_COMMA_expr" pEtats ((SEPARATED_LIST_COMMA_EXPR valeur)::pMem) newToken (PARD data)
	|(PARG data)->
		_sam2 (245::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (245::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (245::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (245::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 245
and _sam246 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (246::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (246::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (246::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (246::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (246::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (246::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (246::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (246::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (246::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (246::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (246::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam2 (246::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (246::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (246::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (246::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 246
and _sam247 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (247::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (247::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (247::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (247::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (247::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (247::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (247::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (247::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (247::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (247::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (247::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam2 (247::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (247::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (247::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (247::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 247
and _sam248 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
		_sam451 (248::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(COMMA data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ENTIER_IDENT data)->
		_sam460 (248::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (248::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
		_sam487 (248::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (248::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(G data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
		_sam910 (248::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (248::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (248::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (248::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(L data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam246 (248::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
		_sam247 (248::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(OR data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARG data)->
		_sam2 (248::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
		_sam248 (248::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
		_sam631 (248::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (248::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 248
and _sam249 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (249::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (249::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (249::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (249::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (249::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (249::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (249::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (249::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (249::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (249::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (249::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam2 (249::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (249::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (249::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (249::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 249
and _sam250 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (250::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (250::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (250::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (250::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (250::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (250::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (250::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (250::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (250::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (250::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (250::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam2 (250::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (250::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (250::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (250::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 250
and _sam251 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (251::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (251::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (251::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (251::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (251::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (251::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (251::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (251::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (251::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (251::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (251::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam2 (251::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (251::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (251::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (251::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 251
and _sam252 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (252::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (252::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (252::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (252::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (252::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (252::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (252::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (252::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (252::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (252::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (252::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam2 (252::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (252::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (252::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (252::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 252
and _sam253 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (253::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (253::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (253::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (253::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (253::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (253::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (253::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (253::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (253::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (253::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (253::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam2 (253::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (253::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (253::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (253::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 253
and _sam254 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (254::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (254::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (254::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (254::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (254::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (254::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (254::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (254::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (254::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (254::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (254::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam2 (254::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (254::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (254::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (254::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 254
and _sam255 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (255::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (255::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (255::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (255::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (255::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (255::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (255::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (255::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (255::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (255::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (255::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam2 (255::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (255::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (255::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (255::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 255
and _sam256 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (256::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (256::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (256::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (256::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (256::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (256::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (256::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (256::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (256::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (256::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (256::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam2 (256::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (256::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (256::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (256::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 256
and _sam257 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (257::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (257::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (257::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (257::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (257::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (257::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (257::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (257::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (257::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (257::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (257::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam2 (257::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (257::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (257::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (257::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 257
and _sam258 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (258::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (258::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (258::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (258::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (258::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (258::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (258::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (258::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (258::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (258::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (258::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam2 (258::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (258::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (258::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (258::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 258
and _sam259 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (259::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (259::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (259::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (259::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (259::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (259::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (259::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (259::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (259::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (259::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (259::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam2 (259::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (259::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (259::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (259::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 259
and _sam260 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (260::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (260::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (260::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (260::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (260::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (260::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (260::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (260::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (260::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (260::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (260::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam2 (260::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (260::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (260::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (260::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 260
and _sam261 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (261::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (261::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (261::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (261::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (261::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (261::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (261::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (261::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (261::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (261::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (261::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam2 (261::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (261::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (261::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (261::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 261
and _sam262 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (262::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (262::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (262::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (262::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (262::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (262::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (262::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (262::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (262::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (262::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (262::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam2 (262::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (262::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (262::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (262::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 262
and _sam263 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (263::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (263::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (263::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (263::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (263::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (263::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (263::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (263::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (263::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (263::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (263::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats=263::pEtats in
			let valeur = ([]) in
		goto (List.hd pEtats) "separated_list_COMMA_expr" pEtats ((SEPARATED_LIST_COMMA_EXPR valeur)::pMem) newToken (PARD data)
	|(PARG data)->
		_sam2 (263::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (263::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (263::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (263::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 263
and _sam264 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (264::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (264::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (264::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (264::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (264::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (264::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (264::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (264::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (264::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (264::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (264::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats=264::pEtats in
			let valeur = ([]) in
		goto (List.hd pEtats) "separated_list_COMMA_expr" pEtats ((SEPARATED_LIST_COMMA_EXPR valeur)::pMem) newToken (PARD data)
	|(PARG data)->
		_sam2 (264::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (264::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (264::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (264::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 264
and _sam265 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam451 (265::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam460 (265::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam13 (265::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam487 (265::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam496 (265::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam910 (265::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam238 (265::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam267 (265::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam568 (265::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam246 (265::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam247 (265::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam2 (265::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam248 (265::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam631 (265::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam393 (265::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 265
and _sam266 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (266::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (266::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (266::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (266::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (266::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (266::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (266::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (266::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (266::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (266::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (266::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (266::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (266::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (266::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (266::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 266
and _sam267 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (267::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (267::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (267::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (267::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (267::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (267::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (267::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (267::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (267::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (267::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (267::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (267::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (267::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (267::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (267::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 267
and _sam268 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (268::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (268::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (268::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (268::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (268::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (268::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (268::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (268::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (268::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (268::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (268::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (268::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (268::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (268::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (268::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 268
and _sam269 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (269::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (269::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (269::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (269::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (269::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (269::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (269::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (269::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (269::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (269::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (269::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (269::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (269::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (269::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (269::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 269
and _sam270 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (270::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (270::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (270::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (270::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (270::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (270::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (270::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (270::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (270::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (270::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (270::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (270::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (270::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (270::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (270::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 270
and _sam271 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (271::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (271::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (271::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (271::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (271::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (271::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (271::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (271::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (271::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (271::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (271::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (271::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (271::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (271::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (271::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 271
and _sam272 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (272::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (272::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (272::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (272::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (272::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (272::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (272::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (272::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (272::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (272::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (272::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (272::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (272::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (272::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (272::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 272
and _sam273 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (273::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (273::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (273::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (273::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (273::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (273::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (273::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (273::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (273::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (273::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (273::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (273::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (273::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (273::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (273::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 273
and _sam274 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (274::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (274::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (274::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (274::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (274::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (274::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (274::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (274::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (274::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (274::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (274::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (274::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (274::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (274::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (274::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 274
and _sam275 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (275::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (275::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (275::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (275::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (275::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (275::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (275::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (275::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (275::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (275::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (275::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (275::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (275::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (275::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (275::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 275
and _sam276 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (276::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (276::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (276::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (276::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (276::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (276::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (276::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (276::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (276::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (276::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (276::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (276::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (276::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (276::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (276::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 276
and _sam277 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (277::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (277::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (277::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (277::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (277::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (277::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (277::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (277::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (277::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (277::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (277::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (277::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (277::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (277::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (277::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 277
and _sam278 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (278::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (278::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (278::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (278::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (278::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (278::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (278::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (278::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (278::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (278::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (278::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (278::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (278::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (278::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (278::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 278
and _sam279 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
		_sam453 (279::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
		_sam462 (279::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (279::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
		_sam489 (279::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (279::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(G data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
		_sam907 (279::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (279::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (279::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (279::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(L data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam275 (279::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
		_sam277 (279::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(OR data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
		_sam3 (279::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
		_sam279 (279::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
		_sam633 (279::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (279::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 279
and _sam280 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
		_sam452 (280::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
		_sam461 (280::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (280::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
		_sam488 (280::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (280::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(G data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
		_sam911 (280::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (280::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (280::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (280::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(L data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam276 (280::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
		_sam278 (280::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(OR data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
		_sam4 (280::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
		_sam280 (280::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
		_sam632 (280::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (280::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 280
and _sam281 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (281::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (281::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (281::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (281::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (281::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (281::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (281::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (281::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (281::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (281::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (281::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (281::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (281::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (281::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (281::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 281
and _sam282 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (282::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (282::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (282::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (282::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (282::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (282::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (282::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (282::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (282::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (282::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (282::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (282::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (282::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (282::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (282::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 282
and _sam283 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (283::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (283::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (283::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (283::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (283::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (283::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (283::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (283::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (283::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (283::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (283::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (283::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (283::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (283::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (283::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 283
and _sam284 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (284::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (284::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (284::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (284::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (284::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (284::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (284::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (284::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (284::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (284::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (284::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (284::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (284::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (284::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (284::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 284
and _sam285 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (285::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (285::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (285::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (285::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (285::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (285::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (285::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (285::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (285::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (285::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (285::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (285::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (285::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (285::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (285::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 285
and _sam286 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (286::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (286::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (286::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (286::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (286::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (286::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (286::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (286::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (286::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (286::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (286::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (286::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (286::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (286::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (286::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 286
and _sam287 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (287::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (287::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (287::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (287::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (287::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (287::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (287::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (287::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (287::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (287::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (287::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (287::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (287::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (287::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (287::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 287
and _sam288 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (288::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (288::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (288::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (288::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (288::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (288::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (288::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (288::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (288::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (288::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (288::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (288::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (288::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (288::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (288::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 288
and _sam289 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (289::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (289::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (289::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (289::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (289::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (289::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (289::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (289::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (289::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (289::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (289::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (289::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (289::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (289::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (289::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 289
and _sam290 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (290::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (290::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (290::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (290::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (290::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (290::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (290::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (290::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (290::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (290::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (290::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (290::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (290::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (290::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (290::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 290
and _sam291 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (291::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (291::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (291::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (291::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (291::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (291::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (291::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (291::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (291::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (291::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (291::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (291::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (291::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (291::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (291::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 291
and _sam292 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (292::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (292::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (292::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (292::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (292::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (292::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (292::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (292::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (292::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (292::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (292::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (292::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (292::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (292::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (292::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 292
and _sam293 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (293::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (293::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (293::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (293::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (293::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (293::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (293::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (293::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (293::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (293::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (293::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (293::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (293::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (293::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (293::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 293
and _sam294 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (294::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (294::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (294::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (294::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (294::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (294::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (294::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (294::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (294::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (294::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (294::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (294::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (294::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (294::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (294::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 294
and _sam295 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (295::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (295::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (295::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (295::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (295::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (295::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (295::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (295::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (295::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (295::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (295::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (295::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (295::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (295::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (295::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 295
and _sam296 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (296::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (296::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (296::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (296::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (296::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (296::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (296::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (296::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (296::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (296::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (296::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (296::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (296::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (296::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (296::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 296
and _sam297 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (297::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (297::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (297::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (297::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (297::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (297::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (297::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (297::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (297::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (297::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (297::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (297::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (297::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (297::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (297::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 297
and _sam298 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (298::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (298::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (298::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (298::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (298::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (298::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (298::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (298::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (298::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (298::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (298::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (298::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (298::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (298::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (298::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 298
and _sam299 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (299::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (299::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (299::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (299::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (299::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (299::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (299::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (299::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (299::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (299::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (299::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (299::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (299::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (299::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (299::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 299
and _sam300 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (300::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (300::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (300::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (300::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (300::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (300::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (300::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (300::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (300::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (300::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (300::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (300::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (300::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (300::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (300::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 300
and _sam301 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (301::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (301::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (301::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (301::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (301::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (301::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (301::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (301::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (301::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (301::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (301::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (301::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (301::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (301::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (301::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 301
and _sam302 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (302::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (302::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (302::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (302::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (302::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (302::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (302::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (302::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (302::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (302::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (302::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (302::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (302::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (302::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (302::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 302
and _sam303 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (303::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (303::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (303::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (303::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (303::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (303::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (303::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (303::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (303::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (303::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (303::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (303::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (303::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (303::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (303::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 303
and _sam304 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (304::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (304::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (304::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (304::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (304::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (304::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (304::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (304::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (304::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (304::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (304::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (304::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (304::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (304::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (304::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 304
and _sam305 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (305::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (305::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (305::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (305::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (305::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (305::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (305::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (305::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (305::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (305::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (305::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (305::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (305::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (305::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (305::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 305
and _sam306 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (306::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (306::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (306::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (306::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (306::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (306::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (306::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (306::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (306::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (306::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (306::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (306::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (306::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (306::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (306::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 306
and _sam307 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (307::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (307::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (307::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (307::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (307::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (307::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (307::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (307::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (307::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (307::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (307::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (307::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (307::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (307::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (307::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 307
and _sam308 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (308::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (308::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (308::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (308::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (308::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (308::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (308::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (308::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (308::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (308::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (308::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (308::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (308::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (308::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (308::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 308
and _sam309 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (309::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (309::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (309::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (309::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (309::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (309::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (309::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (309::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (309::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (309::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (309::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (309::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (309::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (309::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (309::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 309
and _sam310 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam453 (310::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam462 (310::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam14 (310::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam489 (310::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam498 (310::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam907 (310::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam239 (310::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam268 (310::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam570 (310::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam275 (310::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam277 (310::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam3 (310::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam279 (310::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam633 (310::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam390 (310::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 310
and _sam311 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (311::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ELSE data)->
			let p,pMem = match pMem with |(Tok (SEMICOLON t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, []) in
		goto (List.hd pEtats) "expr_bloc2" pEtats ((EXPR_BLOC2 valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let p,pMem = match pMem with |(Tok (SEMICOLON t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, []) in
		goto (List.hd pEtats) "expr_bloc2" pEtats ((EXPR_BLOC2 valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (SEMICOLON t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, []) in
		goto (List.hd pEtats) "expr_bloc2" pEtats ((EXPR_BLOC2 valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
		_sam461 (311::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (311::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (311::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (311::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (311::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (311::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (311::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (311::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (311::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (311::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (311::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (311::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam311 (311::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (311::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (311::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 311
and _sam312 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (312::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (312::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (312::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (312::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (312::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (312::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (312::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (312::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (312::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (312::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (312::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (312::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (312::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (312::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (312::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 312
and _sam313 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
		_sam452 (313::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
		_sam461 (313::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (313::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
		_sam488 (313::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (313::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(G data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
		_sam911 (313::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (313::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (313::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (313::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(L data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam276 (313::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
		_sam278 (313::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(OR data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PARG data)->
		_sam4 (313::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
		_sam280 (313::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
		_sam632 (313::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (313::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 313
and _sam314 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (314::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (314::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (314::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (314::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (314::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (314::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (314::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (314::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (314::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (314::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (314::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (314::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (314::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (314::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (314::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 314
and _sam315 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (315::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (315::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (315::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (315::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (315::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (315::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (315::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (315::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (315::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (315::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (315::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (315::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (315::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (315::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (315::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 315
and _sam316 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (316::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (316::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (316::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (316::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (316::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (316::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (316::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (316::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (316::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (316::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (316::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (316::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (316::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (316::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (316::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 316
and _sam317 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (317::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (317::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (317::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (317::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (317::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (317::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (317::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (317::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (317::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (317::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (317::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (317::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (317::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (317::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (317::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 317
and _sam318 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (318::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (318::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (318::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (318::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (318::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (318::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (318::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (318::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (318::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (318::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (318::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (318::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (318::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (318::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (318::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 318
and _sam319 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (319::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (319::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (319::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (319::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (319::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (319::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (319::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (319::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (319::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (319::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (319::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (319::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (319::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (319::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (319::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 319
and _sam320 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (320::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (320::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (320::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (320::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (320::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (320::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (320::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (320::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (320::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (320::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (320::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (320::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (320::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (320::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (320::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 320
and _sam321 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (321::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (321::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (321::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (321::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (321::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (321::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (321::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (321::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (321::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (321::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (321::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (321::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (321::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (321::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (321::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 321
and _sam322 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (322::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (322::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (322::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (322::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (322::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (322::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (322::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (322::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (322::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (322::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (322::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (322::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (322::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (322::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (322::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 322
and _sam323 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (323::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (323::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (323::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (323::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (323::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (323::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (323::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (323::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (323::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (323::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (323::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (323::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (323::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (323::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (323::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 323
and _sam324 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (324::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (324::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (324::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (324::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (324::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (324::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (324::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (324::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (324::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (324::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (324::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (324::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (324::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (324::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (324::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 324
and _sam325 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (325::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (325::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (325::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (325::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (325::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (325::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (325::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (325::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (325::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (325::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (325::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (325::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (325::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (325::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (325::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 325
and _sam326 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (326::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (326::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (326::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (326::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (326::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (326::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (326::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (326::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (326::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (326::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (326::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (326::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (326::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (326::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (326::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 326
and _sam327 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam452 (327::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam461 (327::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam15 (327::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam488 (327::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam497 (327::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam911 (327::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam240 (327::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam269 (327::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam569 (327::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam276 (327::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam278 (327::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam4 (327::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam280 (327::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam632 (327::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (327::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 327
and _sam328 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (328::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (328::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (328::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (328::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (328::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (328::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (328::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (328::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (328::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (328::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (328::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (328::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (328::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (328::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (328::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 328
and _sam329 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (329::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (329::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (329::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (329::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (329::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (329::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (329::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (329::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (329::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (329::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (329::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (329::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (329::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (329::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (329::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 329
and _sam330 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (330::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (330::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (330::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (330::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (330::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (330::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (330::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (330::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (330::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (330::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (330::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (330::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (330::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (330::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (330::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 330
and _sam331 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (331::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (331::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (331::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (331::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (331::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (331::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (331::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (331::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (331::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (331::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (331::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (331::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (331::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (331::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (331::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 331
and _sam332 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (332::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (332::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (332::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (332::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (332::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (332::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (332::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (332::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (332::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (332::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (332::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (332::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (332::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (332::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (332::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 332
and _sam333 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (333::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (333::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (333::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (333::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (333::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (333::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (333::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (333::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (333::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (333::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (333::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (333::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (333::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (333::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (333::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 333
and _sam334 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (334::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (334::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (334::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (334::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (334::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (334::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (334::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (334::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (334::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (334::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (334::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (334::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (334::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (334::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (334::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 334
and _sam335 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (335::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (335::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (335::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (335::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (335::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (335::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (335::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (335::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (335::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (335::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (335::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (335::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (335::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (335::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (335::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 335
and _sam336 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (336::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (336::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (336::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (336::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (336::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (336::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (336::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (336::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (336::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (336::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (336::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (336::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (336::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (336::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (336::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 336
and _sam337 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (337::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (337::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (337::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (337::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (337::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (337::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (337::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (337::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (337::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (337::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (337::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (337::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (337::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (337::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (337::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 337
and _sam338 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (338::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (338::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (338::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (338::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (338::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (338::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (338::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (338::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (338::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (338::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (338::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (338::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (338::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (338::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (338::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 338
and _sam339 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (339::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (339::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (339::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (339::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (339::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (339::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (339::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (339::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (339::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (339::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (339::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (339::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (339::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (339::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (339::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 339
and _sam340 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (340::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (340::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (340::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (340::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (340::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (340::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (340::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (340::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (340::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (340::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (340::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (340::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (340::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (340::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (340::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 340
and _sam341 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
		_sam455 (341::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
		_sam464 (341::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (341::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
		_sam491 (341::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (341::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(G data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
		_sam908 (341::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (341::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (341::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (341::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(L data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam337 (341::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
		_sam339 (341::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(OR data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
		_sam5 (341::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
		_sam341 (341::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
		_sam635 (341::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (341::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 341
and _sam342 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
		_sam454 (342::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
		_sam463 (342::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (342::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
		_sam490 (342::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (342::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(G data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
		_sam912 (342::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (342::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (342::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (342::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(L data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam338 (342::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
		_sam340 (342::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(OR data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
		_sam6 (342::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
		_sam342 (342::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
		_sam634 (342::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (342::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 342
and _sam343 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (343::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (343::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (343::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (343::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (343::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (343::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (343::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (343::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (343::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (343::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (343::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (343::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (343::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (343::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (343::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 343
and _sam344 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (344::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (344::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (344::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (344::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (344::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (344::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (344::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (344::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (344::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (344::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (344::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (344::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (344::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (344::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (344::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 344
and _sam345 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (345::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (345::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (345::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (345::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (345::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (345::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (345::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (345::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (345::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (345::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (345::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (345::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (345::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (345::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (345::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 345
and _sam346 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (346::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (346::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (346::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (346::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (346::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (346::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (346::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (346::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (346::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (346::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (346::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (346::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (346::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (346::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (346::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 346
and _sam347 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (347::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (347::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (347::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (347::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (347::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (347::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (347::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (347::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (347::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (347::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (347::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (347::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (347::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (347::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (347::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 347
and _sam348 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (348::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (348::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (348::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (348::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (348::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (348::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (348::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (348::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (348::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (348::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (348::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (348::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (348::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (348::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (348::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 348
and _sam349 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (349::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (349::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (349::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (349::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (349::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (349::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (349::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (349::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (349::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (349::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (349::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (349::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (349::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (349::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (349::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 349
and _sam350 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (350::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (350::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (350::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (350::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (350::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (350::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (350::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (350::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (350::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (350::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (350::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (350::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (350::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (350::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (350::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 350
and _sam351 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (351::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (351::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (351::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (351::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (351::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (351::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (351::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (351::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (351::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (351::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (351::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (351::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (351::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (351::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (351::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 351
and _sam352 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (352::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (352::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (352::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (352::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (352::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (352::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (352::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (352::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (352::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (352::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (352::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (352::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (352::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (352::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (352::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 352
and _sam353 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (353::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (353::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (353::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (353::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (353::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (353::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (353::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (353::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (353::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (353::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (353::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (353::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (353::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (353::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (353::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 353
and _sam354 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (354::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (354::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (354::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (354::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (354::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (354::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (354::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (354::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (354::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (354::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (354::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (354::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (354::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (354::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (354::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 354
and _sam355 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (355::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (355::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (355::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (355::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (355::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (355::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (355::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (355::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (355::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (355::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (355::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (355::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (355::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (355::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (355::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 355
and _sam356 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (356::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (356::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (356::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (356::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (356::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (356::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (356::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (356::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (356::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (356::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (356::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (356::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (356::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (356::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (356::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 356
and _sam357 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (357::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (357::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (357::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (357::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (357::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (357::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (357::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (357::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (357::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (357::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (357::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (357::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (357::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (357::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (357::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 357
and _sam358 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (358::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (358::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (358::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (358::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (358::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (358::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (358::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (358::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (358::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (358::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (358::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (358::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (358::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (358::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (358::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 358
and _sam359 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (359::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (359::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (359::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (359::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (359::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (359::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (359::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (359::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (359::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (359::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (359::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (359::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (359::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (359::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (359::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 359
and _sam360 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (360::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (360::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (360::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (360::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (360::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (360::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (360::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (360::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (360::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (360::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (360::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (360::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (360::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (360::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (360::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 360
and _sam361 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (361::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (361::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (361::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (361::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (361::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (361::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (361::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (361::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (361::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (361::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (361::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (361::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (361::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (361::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (361::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 361
and _sam362 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (362::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (362::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (362::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (362::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (362::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (362::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (362::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (362::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (362::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (362::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (362::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (362::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (362::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (362::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (362::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 362
and _sam363 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (363::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (363::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (363::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (363::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (363::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (363::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (363::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (363::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (363::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (363::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (363::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (363::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (363::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (363::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (363::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 363
and _sam364 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (364::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (364::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (364::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (364::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (364::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (364::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (364::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (364::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (364::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (364::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (364::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (364::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (364::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (364::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (364::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 364
and _sam365 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (365::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (365::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (365::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (365::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (365::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (365::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (365::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (365::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (365::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (365::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (365::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (365::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (365::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (365::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (365::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 365
and _sam366 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (366::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (366::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (366::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (366::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (366::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (366::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (366::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (366::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (366::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (366::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (366::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (366::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (366::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (366::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (366::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 366
and _sam367 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (367::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (367::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (367::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (367::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (367::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (367::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (367::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (367::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (367::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (367::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (367::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (367::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (367::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (367::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (367::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 367
and _sam368 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (368::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (368::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (368::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (368::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (368::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (368::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (368::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (368::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (368::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (368::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (368::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (368::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (368::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (368::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (368::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 368
and _sam369 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (369::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (369::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (369::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (369::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (369::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (369::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (369::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (369::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (369::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (369::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (369::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (369::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (369::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (369::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (369::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 369
and _sam370 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (370::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (370::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (370::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (370::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (370::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (370::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (370::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (370::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (370::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (370::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (370::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (370::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (370::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (370::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (370::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 370
and _sam371 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (371::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (371::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (371::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (371::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (371::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (371::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (371::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (371::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (371::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (371::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (371::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (371::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (371::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (371::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (371::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 371
and _sam372 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (372::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (372::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (372::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (372::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (372::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (372::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (372::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (372::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (372::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (372::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (372::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (372::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (372::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (372::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (372::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 372
and _sam373 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (373::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(END data)->
			let p,pMem = match pMem with |(Tok (SEMICOLON t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, []) in
		goto (List.hd pEtats) "expr_bloc2" pEtats ((EXPR_BLOC2 valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
		_sam463 (373::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (373::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (373::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (373::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (373::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (373::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (373::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (373::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (373::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (373::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (373::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (373::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam373 (373::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (373::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (373::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 373
and _sam374 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (374::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (374::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (374::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (374::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (374::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (374::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (374::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (374::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (374::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (374::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (374::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (374::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (374::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (374::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (374::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 374
and _sam375 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
		_sam454 (375::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
		_sam463 (375::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (375::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
		_sam490 (375::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (375::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(G data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
		_sam912 (375::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (375::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (375::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (375::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(L data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam338 (375::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
		_sam340 (375::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(OR data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PARG data)->
		_sam6 (375::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
		_sam342 (375::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
		_sam634 (375::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (375::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 375
and _sam376 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (376::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (376::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (376::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (376::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (376::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (376::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (376::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (376::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (376::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (376::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (376::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (376::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (376::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (376::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (376::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 376
and _sam377 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (377::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (377::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (377::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (377::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (377::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (377::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (377::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (377::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (377::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (377::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (377::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (377::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (377::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (377::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (377::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 377
and _sam378 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (378::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (378::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (378::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (378::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (378::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (378::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (378::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (378::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (378::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (378::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (378::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (378::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (378::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (378::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (378::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 378
and _sam379 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (379::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (379::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (379::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (379::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (379::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (379::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (379::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (379::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (379::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (379::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (379::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (379::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (379::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (379::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (379::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 379
and _sam380 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (380::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (380::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (380::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (380::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (380::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (380::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (380::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (380::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (380::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (380::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (380::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (380::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (380::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (380::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (380::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 380
and _sam381 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (381::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (381::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (381::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (381::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (381::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (381::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (381::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (381::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (381::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (381::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (381::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (381::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (381::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (381::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (381::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 381
and _sam382 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (382::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (382::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (382::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (382::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (382::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (382::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (382::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (382::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (382::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (382::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (382::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (382::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (382::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (382::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (382::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 382
and _sam383 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (383::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (383::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (383::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (383::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (383::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (383::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (383::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (383::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (383::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (383::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (383::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (383::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (383::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (383::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (383::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 383
and _sam384 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (384::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (384::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (384::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (384::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (384::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (384::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (384::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (384::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (384::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (384::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (384::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (384::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (384::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (384::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (384::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 384
and _sam385 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (385::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (385::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (385::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (385::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (385::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (385::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (385::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (385::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (385::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (385::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (385::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (385::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (385::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (385::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (385::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 385
and _sam386 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (386::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (386::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (386::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (386::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (386::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (386::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (386::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (386::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (386::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (386::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (386::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (386::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (386::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (386::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (386::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 386
and _sam387 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (387::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (387::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (387::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (387::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (387::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (387::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (387::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (387::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (387::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (387::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (387::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (387::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (387::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (387::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (387::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 387
and _sam388 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (388::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (388::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (388::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (388::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (388::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (388::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (388::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (388::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (388::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (388::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (388::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (388::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (388::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (388::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (388::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 388
and _sam389 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam454 (389::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam463 (389::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam17 (389::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam490 (389::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam499 (389::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam912 (389::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam242 (389::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam271 (389::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam571 (389::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam338 (389::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam340 (389::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam6 (389::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam342 (389::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam634 (389::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (389::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 389
and _sam390 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (390::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (390::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (390::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (390::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (390::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (390::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (390::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (390::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (390::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (390::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (390::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (390::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (390::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (390::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (390::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 390
and _sam391 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (391::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (391::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (391::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (391::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (391::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (391::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (391::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (391::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (391::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (391::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (391::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (391::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (391::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (391::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (391::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 391
and _sam392 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (392::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (392::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (392::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (392::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (392::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (392::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (392::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (392::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (392::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (392::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (392::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (392::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (392::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (392::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (392::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 392
and _sam393 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (393::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (393::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (393::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (393::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (393::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (393::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (393::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (393::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (393::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (393::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (393::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (393::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (393::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (393::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (393::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 393
and _sam394 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (394::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (394::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (394::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (394::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (394::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (394::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (394::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (394::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (394::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (394::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (394::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (394::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (394::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (394::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (394::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 394
and _sam395 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (395::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (395::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (395::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (395::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (395::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (395::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (395::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (395::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (395::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (395::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (395::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (395::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (395::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (395::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (395::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 395
and _sam396 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (396::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (396::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (396::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (396::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (396::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (396::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (396::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (396::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (396::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (396::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (396::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (396::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (396::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (396::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (396::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 396
and _sam397 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (397::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (397::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (397::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (397::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (397::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (397::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (397::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (397::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (397::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (397::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (397::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (397::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (397::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (397::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (397::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 397
and _sam398 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam455 (398::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam464 (398::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam16 (398::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam491 (398::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam500 (398::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam908 (398::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam241 (398::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam270 (398::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam572 (398::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam337 (398::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam339 (398::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam5 (398::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam341 (398::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam635 (398::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam391 (398::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 398
and _sam399 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam456 (399::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam465 (399::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam18 (399::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam492 (399::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam501 (399::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam913 (399::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam243 (399::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam272 (399::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam573 (399::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam399 (399::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam400 (399::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam7 (399::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam401 (399::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam636 (399::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam396 (399::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 399
and _sam400 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam456 (400::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam465 (400::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam18 (400::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam492 (400::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam501 (400::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam913 (400::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam243 (400::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam272 (400::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam573 (400::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam399 (400::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam400 (400::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam7 (400::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam401 (400::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam636 (400::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam396 (400::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 400
and _sam401 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
		_sam456 (401::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ENTIER_IDENT data)->
		_sam465 (401::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam18 (401::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|EOF->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
		_sam492 (401::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam501 (401::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(G data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
		_sam913 (401::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam243 (401::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam272 (401::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam573 (401::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(L data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam399 (401::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
		_sam400 (401::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(OR data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
		_sam7 (401::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
		_sam401 (401::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
		_sam636 (401::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam396 (401::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 401
and _sam402 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam456 (402::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam465 (402::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam18 (402::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam492 (402::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam501 (402::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam913 (402::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam243 (402::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam272 (402::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam573 (402::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam399 (402::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam400 (402::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam7 (402::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam401 (402::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam636 (402::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam396 (402::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 402
and _sam403 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam456 (403::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam465 (403::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam18 (403::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam492 (403::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam501 (403::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam913 (403::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam243 (403::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam272 (403::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam573 (403::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam399 (403::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam400 (403::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam7 (403::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam401 (403::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam636 (403::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam396 (403::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 403
and _sam404 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam456 (404::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam465 (404::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam18 (404::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam492 (404::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam501 (404::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam913 (404::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam243 (404::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam272 (404::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam573 (404::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam399 (404::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam400 (404::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam7 (404::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam401 (404::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam636 (404::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam396 (404::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 404
and _sam405 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam456 (405::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam465 (405::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam18 (405::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam492 (405::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam501 (405::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam913 (405::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam243 (405::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam272 (405::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam573 (405::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam399 (405::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam400 (405::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam7 (405::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam401 (405::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam636 (405::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam396 (405::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 405
and _sam406 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam456 (406::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam465 (406::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam18 (406::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam492 (406::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam501 (406::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam913 (406::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam243 (406::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam272 (406::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam573 (406::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam399 (406::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam400 (406::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam7 (406::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam401 (406::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam636 (406::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam396 (406::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 406
and _sam407 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam456 (407::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam465 (407::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam18 (407::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam492 (407::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam501 (407::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam913 (407::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam243 (407::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam272 (407::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam573 (407::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam399 (407::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam400 (407::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam7 (407::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam401 (407::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam636 (407::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam396 (407::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 407
and _sam408 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam456 (408::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam465 (408::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam18 (408::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam492 (408::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam501 (408::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam913 (408::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam243 (408::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam272 (408::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam573 (408::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam399 (408::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam400 (408::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam7 (408::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam401 (408::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam636 (408::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam396 (408::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 408
and _sam409 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam456 (409::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam465 (409::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam18 (409::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam492 (409::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam501 (409::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam913 (409::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam243 (409::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam272 (409::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam573 (409::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam399 (409::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam400 (409::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam7 (409::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam401 (409::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam636 (409::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam396 (409::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 409
and _sam410 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam456 (410::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam465 (410::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam18 (410::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam492 (410::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam501 (410::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam913 (410::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam243 (410::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam272 (410::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam573 (410::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam399 (410::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam400 (410::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam7 (410::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam401 (410::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam636 (410::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam396 (410::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 410
and _sam411 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam456 (411::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam465 (411::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam18 (411::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam492 (411::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam501 (411::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam913 (411::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam243 (411::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam272 (411::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam573 (411::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam399 (411::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam400 (411::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam7 (411::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam401 (411::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam636 (411::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam396 (411::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 411
and _sam412 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam456 (412::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam465 (412::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam18 (412::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam492 (412::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam501 (412::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam913 (412::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam243 (412::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam272 (412::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam573 (412::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam399 (412::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam400 (412::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam7 (412::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam401 (412::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam636 (412::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam396 (412::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 412
and _sam413 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam456 (413::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam465 (413::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam18 (413::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam492 (413::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam501 (413::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam913 (413::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam243 (413::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam272 (413::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam573 (413::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam399 (413::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam400 (413::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam7 (413::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam401 (413::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam636 (413::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam396 (413::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 413
and _sam414 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam456 (414::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam465 (414::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam18 (414::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam492 (414::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam501 (414::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam913 (414::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam243 (414::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam272 (414::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam573 (414::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam399 (414::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam400 (414::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam7 (414::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam401 (414::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam636 (414::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam396 (414::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 414
and _sam415 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam456 (415::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam465 (415::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam18 (415::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam492 (415::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam501 (415::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam913 (415::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam243 (415::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam272 (415::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam573 (415::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam399 (415::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam400 (415::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam7 (415::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam401 (415::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam636 (415::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam396 (415::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 415
and _sam416 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (416::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (416::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (416::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (416::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (416::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (416::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (416::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (416::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (416::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (416::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (416::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (416::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (416::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (416::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (416::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 416
and _sam417 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (417::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (417::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (417::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (417::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (417::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (417::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (417::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (417::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (417::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (417::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (417::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (417::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (417::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (417::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (417::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 417
and _sam418 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
		_sam457 (418::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ENTIER_IDENT data)->
		_sam466 (418::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (418::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
		_sam493 (418::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (418::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(G data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
		_sam914 (418::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (418::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (418::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (418::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(L data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam416 (418::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
		_sam417 (418::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(OR data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PARG data)->
		_sam8 (418::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
		_sam418 (418::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
		_sam637 (418::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (418::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 418
and _sam419 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (419::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (419::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (419::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (419::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (419::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (419::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (419::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (419::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (419::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (419::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (419::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (419::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (419::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (419::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (419::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 419
and _sam420 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (420::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (420::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (420::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (420::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (420::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (420::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (420::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (420::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (420::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (420::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (420::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (420::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (420::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (420::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (420::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 420
and _sam421 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (421::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (421::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (421::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (421::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (421::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (421::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (421::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (421::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (421::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (421::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (421::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (421::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (421::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (421::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (421::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 421
and _sam422 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (422::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (422::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (422::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (422::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (422::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (422::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (422::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (422::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (422::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (422::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (422::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (422::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (422::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (422::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (422::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 422
and _sam423 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (423::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (423::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (423::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (423::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (423::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (423::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (423::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (423::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (423::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (423::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (423::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (423::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (423::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (423::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (423::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 423
and _sam424 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (424::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (424::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (424::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (424::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (424::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (424::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (424::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (424::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (424::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (424::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (424::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (424::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (424::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (424::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (424::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 424
and _sam425 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (425::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (425::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (425::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (425::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (425::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (425::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (425::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (425::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (425::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (425::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (425::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (425::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (425::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (425::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (425::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 425
and _sam426 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (426::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (426::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (426::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (426::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (426::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (426::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (426::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (426::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (426::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (426::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (426::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (426::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (426::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (426::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (426::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 426
and _sam427 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (427::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (427::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (427::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (427::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (427::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (427::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (427::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (427::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (427::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (427::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (427::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (427::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (427::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (427::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (427::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 427
and _sam428 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (428::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (428::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (428::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (428::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (428::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (428::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (428::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (428::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (428::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (428::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (428::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (428::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (428::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (428::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (428::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 428
and _sam429 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (429::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (429::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (429::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (429::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (429::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (429::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (429::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (429::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (429::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (429::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (429::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (429::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (429::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (429::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (429::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 429
and _sam430 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (430::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (430::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (430::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (430::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (430::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (430::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (430::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (430::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (430::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (430::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (430::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (430::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (430::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (430::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (430::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 430
and _sam431 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (431::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (431::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (431::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (431::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (431::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (431::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (431::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (431::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (431::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (431::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (431::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (431::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (431::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (431::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (431::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 431
and _sam432 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam457 (432::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam466 (432::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam19 (432::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam493 (432::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam502 (432::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam914 (432::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam244 (432::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam273 (432::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam574 (432::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam416 (432::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam417 (432::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam8 (432::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam418 (432::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam637 (432::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam397 (432::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 432
and _sam433 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (433::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (433::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (433::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (433::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (433::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (433::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (433::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (433::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (433::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (433::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (433::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (433::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (433::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (433::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (433::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 433
and _sam434 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (434::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (434::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (434::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (434::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (434::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (434::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (434::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (434::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (434::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (434::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (434::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (434::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (434::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (434::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (434::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 434
and _sam435 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
		_sam458 (435::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ENTIER_IDENT data)->
		_sam467 (435::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (435::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
		_sam494 (435::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (435::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(G data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
		_sam915 (435::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (435::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (435::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (435::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(L data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam433 (435::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
		_sam434 (435::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(OR data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARG data)->
		_sam9 (435::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
		_sam435 (435::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (RETURN t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Ereturn (p, None)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
		_sam638 (435::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (435::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 435
and _sam436 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (436::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (436::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (436::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (436::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (436::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (436::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (436::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (436::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (436::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (436::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (436::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (436::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (436::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (436::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (436::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 436
and _sam437 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (437::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (437::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (437::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (437::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (437::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (437::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (437::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (437::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (437::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (437::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (437::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (437::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (437::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (437::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (437::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 437
and _sam438 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (438::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (438::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (438::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (438::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (438::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (438::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (438::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (438::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (438::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (438::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (438::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (438::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (438::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (438::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (438::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 438
and _sam439 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (439::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (439::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (439::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (439::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (439::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (439::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (439::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (439::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (439::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (439::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (439::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (439::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (439::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (439::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (439::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 439
and _sam440 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (440::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (440::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (440::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (440::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (440::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (440::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (440::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (440::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (440::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (440::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (440::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (440::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (440::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (440::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (440::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 440
and _sam441 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (441::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (441::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (441::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (441::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (441::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (441::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (441::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (441::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (441::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (441::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (441::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (441::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (441::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (441::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (441::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 441
and _sam442 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (442::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (442::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (442::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (442::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (442::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (442::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (442::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (442::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (442::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (442::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (442::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (442::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (442::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (442::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (442::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 442
and _sam443 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (443::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (443::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (443::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (443::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (443::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (443::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (443::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (443::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (443::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (443::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (443::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (443::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (443::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (443::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (443::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 443
and _sam444 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (444::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (444::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (444::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (444::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (444::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (444::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (444::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (444::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (444::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (444::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (444::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (444::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (444::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (444::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (444::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 444
and _sam445 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (445::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (445::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (445::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (445::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (445::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (445::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (445::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (445::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (445::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (445::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (445::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (445::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (445::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (445::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (445::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 445
and _sam446 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (446::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (446::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (446::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (446::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (446::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (446::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (446::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (446::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (446::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (446::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (446::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (446::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (446::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (446::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (446::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 446
and _sam447 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (447::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (447::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (447::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (447::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (447::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (447::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (447::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (447::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (447::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (447::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (447::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (447::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (447::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (447::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (447::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 447
and _sam448 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (448::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (448::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (448::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (448::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (448::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (448::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (448::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (448::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (448::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (448::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (448::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (448::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (448::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (448::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (448::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 448
and _sam449 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam458 (449::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam467 (449::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam20 (449::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam494 (449::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam503 (449::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam915 (449::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam245 (449::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam274 (449::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam575 (449::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam433 (449::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam434 (449::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam9 (449::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam435 (449::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam638 (449::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam398 (449::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 449
and _sam450 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 450
and _sam451 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 451
and _sam452 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 452
and _sam453 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 453
and _sam454 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 454
and _sam455 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 455
and _sam456 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|EOF->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 456
and _sam457 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 457
and _sam458 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in p, Echaine s) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 458
and _sam459 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 459
and _sam460 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 460
and _sam461 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 461
and _sam462 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 462
and _sam463 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 463
and _sam464 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 464
and _sam465 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|EOF->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 465
and _sam466 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 466
and _sam467 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in p, EentierIdent (p, i, s)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 467
and _sam468 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam477 (468::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 468
and _sam469 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam478 (469::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 469
and _sam470 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam479 (470::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 470
and _sam471 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam480 (471::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 471
and _sam472 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam481 (472::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 472
and _sam473 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam482 (473::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 473
and _sam474 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam483 (474::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 474
and _sam475 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam484 (475::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 475
and _sam476 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam485 (476::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 476
and _sam477 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 477
and _sam478 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 478
and _sam479 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 479
and _sam480 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 480
and _sam481 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 481
and _sam482 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    (Hyper2.fusionPos p1 p2, EentierParG (p1, i, pb))) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 482
and _sam483 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 483
and _sam484 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 484
and _sam485 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, EentierParG (p1, i, b)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 485
and _sam486 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 486
and _sam487 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 487
and _sam488 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 488
and _sam489 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 489
and _sam490 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 490
and _sam491 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 491
and _sam492 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|EOF->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 492
and _sam493 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 493
and _sam494 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Efalse) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 494
and _sam495 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam504 (495::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 495
and _sam496 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam505 (496::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 496
and _sam497 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam506 (497::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 497
and _sam498 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam507 (498::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 498
and _sam499 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam508 (499::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 499
and _sam500 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam509 (500::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 500
and _sam501 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam510 (501::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 501
and _sam502 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam511 (502::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 502
and _sam503 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam512 (503::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 503
and _sam504 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam209 (504::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|_->samFail 504
and _sam505 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam210 (505::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|_->samFail 505
and _sam506 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam212 (506::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|_->samFail 506
and _sam507 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam211 (507::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|_->samFail 507
and _sam508 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam214 (508::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|_->samFail 508
and _sam509 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam213 (509::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|_->samFail 509
and _sam510 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam215 (510::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|_->samFail 510
and _sam511 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam216 (511::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|_->samFail 511
and _sam512 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam217 (512::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|_->samFail 512
and _sam513 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam221 (513::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam222 (513::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(COLON data)->
		_sam328 (513::pEtats) (Tok(COLON data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam918 (513::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam223 (513::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam224 (513::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam225 (513::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam226 (513::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam227 (513::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam228 (513::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam229 (513::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam230 (513::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam231 (513::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam232 (513::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam233 (513::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam234 (513::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 513
and _sam514 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam221 (514::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam222 (514::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(COLON data)->
		_sam329 (514::pEtats) (Tok(COLON data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam918 (514::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam223 (514::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam224 (514::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam225 (514::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam226 (514::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam227 (514::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam228 (514::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam229 (514::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam230 (514::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam231 (514::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam232 (514::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam233 (514::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam234 (514::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 514
and _sam515 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam221 (515::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam222 (515::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(COLON data)->
		_sam330 (515::pEtats) (Tok(COLON data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam918 (515::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam223 (515::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam224 (515::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam225 (515::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam226 (515::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam227 (515::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam228 (515::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam229 (515::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam230 (515::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam231 (515::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam232 (515::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam233 (515::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam234 (515::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 515
and _sam516 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam221 (516::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam222 (516::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(COLON data)->
		_sam331 (516::pEtats) (Tok(COLON data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam918 (516::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam223 (516::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam224 (516::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam225 (516::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam226 (516::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam227 (516::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam228 (516::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam229 (516::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam230 (516::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam231 (516::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam232 (516::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam233 (516::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam234 (516::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 516
and _sam517 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam221 (517::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam222 (517::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(COLON data)->
		_sam332 (517::pEtats) (Tok(COLON data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam918 (517::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam223 (517::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam224 (517::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam225 (517::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam226 (517::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam227 (517::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam228 (517::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam229 (517::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam230 (517::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam231 (517::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam232 (517::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam233 (517::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam234 (517::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 517
and _sam518 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam221 (518::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam222 (518::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(COLON data)->
		_sam333 (518::pEtats) (Tok(COLON data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam918 (518::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam223 (518::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam224 (518::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam225 (518::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam226 (518::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam227 (518::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam228 (518::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam229 (518::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam230 (518::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam231 (518::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam232 (518::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam233 (518::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam234 (518::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 518
and _sam519 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam221 (519::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam222 (519::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(COLON data)->
		_sam334 (519::pEtats) (Tok(COLON data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam918 (519::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam223 (519::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam224 (519::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam225 (519::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam226 (519::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam227 (519::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam228 (519::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam229 (519::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam230 (519::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam231 (519::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam232 (519::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam233 (519::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam234 (519::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 519
and _sam520 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam221 (520::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam222 (520::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(COLON data)->
		_sam335 (520::pEtats) (Tok(COLON data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam918 (520::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam223 (520::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam224 (520::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam225 (520::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam226 (520::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam227 (520::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam228 (520::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam229 (520::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam230 (520::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam231 (520::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam232 (520::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam233 (520::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam234 (520::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 520
and _sam521 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam221 (521::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam222 (521::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(COLON data)->
		_sam336 (521::pEtats) (Tok(COLON data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam918 (521::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam223 (521::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam224 (521::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam225 (521::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam226 (521::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam227 (521::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam228 (521::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam229 (521::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam230 (521::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam231 (521::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam232 (521::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam233 (521::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam234 (521::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 521
and _sam522 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
		_sam531 (522::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 522
and _sam523 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
		_sam532 (523::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 523
and _sam524 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
		_sam533 (524::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 524
and _sam525 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
		_sam534 (525::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 525
and _sam526 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
		_sam535 (526::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 526
and _sam527 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
		_sam536 (527::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 527
and _sam528 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
		_sam537 (528::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 528
and _sam529 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
		_sam538 (529::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 529
and _sam530 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
		_sam539 (530::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 530
and _sam531 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 531
and _sam532 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 532
and _sam533 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 533
and _sam534 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 534
and _sam535 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 535
and _sam536 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 536
and _sam537 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|EOF->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 537
and _sam538 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 538
and _sam539 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2,	Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 539
and _sam540 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam549 (540::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 540
and _sam541 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam550 (541::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 541
and _sam542 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam551 (542::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 542
and _sam543 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam552 (543::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 543
and _sam544 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam553 (544::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 544
and _sam545 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam554 (545::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 545
and _sam546 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam555 (546::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 546
and _sam547 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam556 (547::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 547
and _sam548 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam557 (548::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 548
and _sam549 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 549
and _sam550 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 550
and _sam551 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 551
and _sam552 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 552
and _sam553 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 553
and _sam554 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 554
and _sam555 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 555
and _sam556 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 556
and _sam557 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1,i) = pi in
    Hyper2.fusionPos p1 p2, Eapplication (p1, i, l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 557
and _sam558 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 558
and _sam559 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 559
and _sam560 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 560
and _sam561 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 561
and _sam562 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 562
and _sam563 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 563
and _sam564 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 564
and _sam565 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 565
and _sam566 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e,b) = eb in
      let (p2, el) = pel in
      Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 566
and _sam567 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 567
and _sam568 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 568
and _sam569 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 569
and _sam570 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 570
and _sam571 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 571
and _sam572 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 572
and _sam573 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|EOF->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 573
and _sam574 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 574
and _sam575 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p, Eentier i) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 575
and _sam576 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
		_sam918 (576::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam224 (576::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 576
and _sam577 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
		_sam919 (577::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam252 (577::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 577
and _sam578 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam916 (578::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam287 (578::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 578
and _sam579 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (579::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (579::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 579
and _sam580 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam917 (580::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam349 (580::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 580
and _sam581 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (581::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (581::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 581
and _sam582 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam922 (582::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|EOF->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam405 (582::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 582
and _sam583 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam923 (583::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam422 (583::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 583
and _sam584 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam924 (584::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam439 (584::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Eminus e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 584
and _sam585 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
		_sam918 (585::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam224 (585::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 585
and _sam586 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
		_sam919 (586::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam252 (586::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 586
and _sam587 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam916 (587::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam287 (587::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 587
and _sam588 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (588::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (588::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 588
and _sam589 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam917 (589::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam349 (589::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 589
and _sam590 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (590::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (590::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 590
and _sam591 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam922 (591::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|EOF->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam405 (591::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 591
and _sam592 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam923 (592::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam422 (592::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 592
and _sam593 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam924 (593::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam439 (593::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 593
and _sam594 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam603 (594::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 594
and _sam595 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam604 (595::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 595
and _sam596 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam605 (596::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 596
and _sam597 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam606 (597::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 597
and _sam598 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam607 (598::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 598
and _sam599 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam608 (599::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 599
and _sam600 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam609 (600::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 600
and _sam601 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam610 (601::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 601
and _sam602 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam611 (602::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 602
and _sam603 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 603
and _sam604 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 604
and _sam605 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 605
and _sam606 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 606
and _sam607 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 607
and _sam608 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 608
and _sam609 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 609
and _sam610 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 610
and _sam611 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,b,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 p2, Ebloc1 b) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 611
and _sam612 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 612
and _sam613 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 613
and _sam614 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 614
and _sam615 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 615
and _sam616 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 616
and _sam617 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 617
and _sam618 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 618
and _sam619 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 619
and _sam620 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 620
and _sam621 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam221 (621::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam222 (621::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(COLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
		_sam918 (621::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam223 (621::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam224 (621::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam225 (621::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam226 (621::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam227 (621::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam228 (621::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam229 (621::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam230 (621::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam231 (621::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam232 (621::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam233 (621::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam234 (621::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 621
and _sam622 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam249 (622::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam250 (622::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(COMMA data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
		_sam919 (622::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam251 (622::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam252 (622::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam253 (622::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam254 (622::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam255 (622::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam256 (622::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam257 (622::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam258 (622::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam259 (622::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam260 (622::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam261 (622::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam262 (622::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 622
and _sam623 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam281 (623::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam283 (623::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam916 (623::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam285 (623::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam287 (623::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam289 (623::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam291 (623::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam293 (623::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam295 (623::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam297 (623::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam299 (623::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam301 (623::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam303 (623::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam305 (623::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam307 (623::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 623
and _sam624 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam282 (624::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam284 (624::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam920 (624::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam286 (624::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam288 (624::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam290 (624::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam292 (624::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam294 (624::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam296 (624::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam298 (624::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam300 (624::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam302 (624::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam304 (624::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam306 (624::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (624::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 624
and _sam625 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam343 (625::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam345 (625::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam917 (625::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam347 (625::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam349 (625::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam351 (625::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam353 (625::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam355 (625::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam357 (625::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam359 (625::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam361 (625::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam363 (625::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam365 (625::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam367 (625::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam369 (625::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 625
and _sam626 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (626::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (626::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (626::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam348 (626::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (626::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (626::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (626::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (626::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (626::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (626::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (626::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (626::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (626::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (626::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (626::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 626
and _sam627 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam402 (627::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam403 (627::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam922 (627::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|EOF->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
		_sam404 (627::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam405 (627::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam406 (627::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam407 (627::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam408 (627::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam409 (627::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam410 (627::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam411 (627::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam412 (627::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam413 (627::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam414 (627::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam415 (627::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 627
and _sam628 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam419 (628::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam420 (628::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam923 (628::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam421 (628::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam422 (628::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam423 (628::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam424 (628::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam425 (628::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam426 (628::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam427 (628::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam428 (628::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam429 (628::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam430 (628::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
		_sam431 (628::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam432 (628::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 628
and _sam629 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam436 (629::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam437 (629::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam924 (629::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam438 (629::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam439 (629::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam440 (629::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam441 (629::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam442 (629::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam443 (629::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam444 (629::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam445 (629::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam446 (629::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam447 (629::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam448 (629::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam449 (629::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 629
and _sam630 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 630
and _sam631 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 631
and _sam632 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 632
and _sam633 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 633
and _sam634 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 634
and _sam635 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 635
and _sam636 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|EOF->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 636
and _sam637 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 637
and _sam638 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (p, Etrue) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 638
and _sam639 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam221 (639::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam222 (639::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
		_sam918 (639::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam223 (639::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam224 (639::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam225 (639::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam226 (639::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam227 (639::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam228 (639::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam229 (639::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam230 (639::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam231 (639::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam232 (639::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam233 (639::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam234 (639::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 639
and _sam640 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
		_sam918 (640::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam223 (640::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam224 (640::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam225 (640::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam226 (640::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam227 (640::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam228 (640::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam229 (640::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam230 (640::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam231 (640::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam233 (640::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam234 (640::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 640
and _sam641 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
		_sam918 (641::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam224 (641::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam225 (641::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam226 (641::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam227 (641::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam228 (641::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam229 (641::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam230 (641::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam233 (641::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam234 (641::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 641
and _sam642 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
		_sam918 (642::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam224 (642::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 642
and _sam643 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
		_sam918 (643::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam224 (643::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam229 (643::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam230 (643::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam233 (643::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam234 (643::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 643
and _sam644 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
		_sam918 (644::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam224 (644::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam229 (644::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam230 (644::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam233 (644::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam234 (644::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 644
and _sam645 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
		_sam918 (645::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam224 (645::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam229 (645::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam230 (645::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam233 (645::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam234 (645::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 645
and _sam646 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
		_sam918 (646::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam224 (646::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam229 (646::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam230 (646::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam233 (646::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam234 (646::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 646
and _sam647 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
		_sam918 (647::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam224 (647::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam230 (647::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
		_sam234 (647::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 647
and _sam648 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
		_sam918 (648::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam224 (648::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 648
and _sam649 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
		_sam918 (649::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam224 (649::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam225 (649::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam226 (649::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam227 (649::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam228 (649::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam229 (649::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam230 (649::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam233 (649::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam234 (649::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 649
and _sam650 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
		_sam222 (650::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
		_sam918 (650::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam223 (650::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam224 (650::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam225 (650::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam226 (650::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam227 (650::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam228 (650::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam229 (650::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam230 (650::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam231 (650::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam233 (650::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam234 (650::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 650
and _sam651 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
		_sam918 (651::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam224 (651::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam230 (651::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
		_sam234 (651::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 651
and _sam652 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
		_sam918 (652::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam224 (652::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam230 (652::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 652
and _sam653 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam221 (653::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam222 (653::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(COLON data)->
		_sam371 (653::pEtats) (Tok(COLON data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam918 (653::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam223 (653::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam224 (653::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam225 (653::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam226 (653::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam227 (653::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam228 (653::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam229 (653::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam230 (653::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam231 (653::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam232 (653::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam233 (653::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam234 (653::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 653
and _sam654 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam221 (654::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam222 (654::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(COLON data)->
		_sam372 (654::pEtats) (Tok(COLON data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam918 (654::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam223 (654::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam224 (654::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam225 (654::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam226 (654::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam227 (654::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam228 (654::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam229 (654::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam230 (654::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam231 (654::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam232 (654::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam233 (654::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam234 (654::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 654
and _sam655 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam249 (655::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam250 (655::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
		_sam919 (655::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam251 (655::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam252 (655::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam253 (655::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam254 (655::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam255 (655::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam256 (655::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam257 (655::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam258 (655::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam259 (655::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam260 (655::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam261 (655::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam262 (655::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 655
and _sam656 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
		_sam919 (656::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam251 (656::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam252 (656::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam253 (656::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam254 (656::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam255 (656::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam256 (656::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam257 (656::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam258 (656::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam259 (656::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam261 (656::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam262 (656::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 656
and _sam657 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
		_sam919 (657::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam252 (657::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam253 (657::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam254 (657::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam255 (657::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam256 (657::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam257 (657::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam258 (657::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam261 (657::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam262 (657::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 657
and _sam658 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
		_sam919 (658::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam252 (658::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 658
and _sam659 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
		_sam919 (659::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam252 (659::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam257 (659::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam258 (659::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam261 (659::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam262 (659::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 659
and _sam660 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
		_sam919 (660::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam252 (660::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam257 (660::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam258 (660::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam261 (660::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam262 (660::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 660
and _sam661 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
		_sam919 (661::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam252 (661::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam257 (661::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam258 (661::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam261 (661::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam262 (661::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 661
and _sam662 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
		_sam919 (662::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam252 (662::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam257 (662::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam258 (662::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam261 (662::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam262 (662::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 662
and _sam663 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
		_sam919 (663::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam252 (663::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam258 (663::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
		_sam262 (663::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 663
and _sam664 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
		_sam919 (664::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam252 (664::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 664
and _sam665 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
		_sam919 (665::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam252 (665::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam253 (665::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam254 (665::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam255 (665::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam256 (665::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam257 (665::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam258 (665::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam261 (665::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam262 (665::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 665
and _sam666 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
		_sam250 (666::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
		_sam919 (666::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam251 (666::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam252 (666::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam253 (666::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam254 (666::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam255 (666::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam256 (666::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam257 (666::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam258 (666::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam259 (666::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam261 (666::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam262 (666::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 666
and _sam667 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
		_sam919 (667::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam252 (667::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam258 (667::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
		_sam262 (667::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 667
and _sam668 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
		_sam919 (668::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam252 (668::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam258 (668::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 668
and _sam669 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam249 (669::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam250 (669::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(COMMA data)->
		_sam265 (669::pEtats) (Tok(COMMA data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam919 (669::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam251 (669::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam252 (669::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam253 (669::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam254 (669::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam255 (669::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam256 (669::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam257 (669::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam258 (669::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam259 (669::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam260 (669::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats=669::pEtats in
			let valeur = ([]) in
		goto (List.hd pEtats) "separated_list_C_E" pEtats ((SEPARATED_LIST_C_E valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam261 (669::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam262 (669::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 669
and _sam670 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam249 (670::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam250 (670::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(COMMA data)->
		_sam265 (670::pEtats) (Tok(COMMA data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam919 (670::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam251 (670::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam252 (670::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam253 (670::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam254 (670::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam255 (670::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam256 (670::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam257 (670::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam258 (670::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam259 (670::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam260 (670::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats=670::pEtats in
			let valeur = ([]) in
		goto (List.hd pEtats) "separated_list_C_E" pEtats ((SEPARATED_LIST_C_E valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam261 (670::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam262 (670::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 670
and _sam671 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam281 (671::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam283 (671::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam916 (671::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam285 (671::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam287 (671::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam289 (671::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam291 (671::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam293 (671::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam295 (671::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam297 (671::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam299 (671::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam301 (671::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam303 (671::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam305 (671::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam307 (671::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 671
and _sam672 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam282 (672::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam284 (672::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam920 (672::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam286 (672::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam288 (672::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam290 (672::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam292 (672::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam294 (672::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam296 (672::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam298 (672::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam300 (672::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam302 (672::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam304 (672::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam306 (672::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (672::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 672
and _sam673 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam916 (673::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam285 (673::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam287 (673::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam289 (673::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam291 (673::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam293 (673::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam295 (673::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam297 (673::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam299 (673::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam301 (673::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam305 (673::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam307 (673::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 673
and _sam674 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (674::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam286 (674::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam288 (674::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam290 (674::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam292 (674::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam294 (674::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam296 (674::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam298 (674::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam300 (674::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam302 (674::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam306 (674::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (674::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 674
and _sam675 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam916 (675::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam287 (675::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam289 (675::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam291 (675::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam293 (675::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam295 (675::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam297 (675::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam299 (675::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam305 (675::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam307 (675::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 675
and _sam676 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (676::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (676::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam290 (676::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam292 (676::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam294 (676::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam296 (676::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam298 (676::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam300 (676::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam306 (676::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (676::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 676
and _sam677 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam916 (677::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam287 (677::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 677
and _sam678 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (678::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (678::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 678
and _sam679 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam916 (679::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam287 (679::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam297 (679::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam299 (679::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam305 (679::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam307 (679::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 679
and _sam680 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (680::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (680::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam298 (680::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam300 (680::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam306 (680::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (680::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 680
and _sam681 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam916 (681::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam287 (681::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam297 (681::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam299 (681::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam305 (681::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam307 (681::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 681
and _sam682 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (682::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (682::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam298 (682::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam300 (682::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam306 (682::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (682::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 682
and _sam683 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam916 (683::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam287 (683::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam297 (683::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam299 (683::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam305 (683::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam307 (683::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 683
and _sam684 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (684::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (684::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam298 (684::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam300 (684::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam306 (684::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (684::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 684
and _sam685 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam916 (685::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam287 (685::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam297 (685::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam299 (685::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam305 (685::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam307 (685::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 685
and _sam686 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (686::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (686::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam298 (686::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam300 (686::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam306 (686::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (686::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 686
and _sam687 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam916 (687::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam287 (687::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam299 (687::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam307 (687::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 687
and _sam688 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (688::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (688::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam300 (688::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (688::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 688
and _sam689 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam916 (689::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam287 (689::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 689
and _sam690 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (690::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (690::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 690
and _sam691 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam916 (691::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam287 (691::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam289 (691::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam291 (691::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam293 (691::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam295 (691::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam297 (691::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam299 (691::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam305 (691::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam307 (691::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 691
and _sam692 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (692::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (692::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam290 (692::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam292 (692::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam294 (692::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam296 (692::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam298 (692::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam300 (692::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam306 (692::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (692::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 692
and _sam693 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
		_sam283 (693::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam916 (693::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam285 (693::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam287 (693::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam289 (693::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam291 (693::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam293 (693::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam295 (693::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam297 (693::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam299 (693::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam301 (693::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam305 (693::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam307 (693::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 693
and _sam694 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
		_sam284 (694::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam920 (694::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam286 (694::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam288 (694::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam290 (694::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam292 (694::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam294 (694::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam296 (694::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam298 (694::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam300 (694::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam302 (694::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam306 (694::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (694::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 694
and _sam695 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam916 (695::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam287 (695::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam299 (695::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam307 (695::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 695
and _sam696 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (696::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (696::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam300 (696::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (696::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 696
and _sam697 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam916 (697::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam287 (697::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam299 (697::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 697
and _sam698 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (698::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (698::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam300 (698::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 698
and _sam699 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam281 (699::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam283 (699::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam916 (699::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let e,pMem = match pMem with |(EXPR t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ((e, (fst e, []))) in
		goto (List.hd pEtats) "expr_bloc" pEtats ((EXPR_BLOC valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let e,pMem = match pMem with |(EXPR t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ((e, (fst e, []))) in
		goto (List.hd pEtats) "expr_bloc" pEtats ((EXPR_BLOC valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let e,pMem = match pMem with |(EXPR t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ((e, (fst e, []))) in
		goto (List.hd pEtats) "expr_bloc" pEtats ((EXPR_BLOC valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam285 (699::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam287 (699::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam289 (699::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam291 (699::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam293 (699::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam295 (699::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam297 (699::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam299 (699::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam301 (699::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam303 (699::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam305 (699::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam311 (699::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam307 (699::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 699
and _sam700 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam282 (700::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam284 (700::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam920 (700::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    (Hyper2.fusionPos p (fst e), [e])) in
		goto (List.hd pEtats) "expr_bloc2" pEtats ((EXPR_BLOC2 valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    (Hyper2.fusionPos p (fst e), [e])) in
		goto (List.hd pEtats) "expr_bloc2" pEtats ((EXPR_BLOC2 valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    (Hyper2.fusionPos p (fst e), [e])) in
		goto (List.hd pEtats) "expr_bloc2" pEtats ((EXPR_BLOC2 valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam286 (700::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam288 (700::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam290 (700::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam292 (700::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam294 (700::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam296 (700::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam298 (700::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam300 (700::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam302 (700::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam304 (700::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam306 (700::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam311 (700::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam308 (700::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 700
and _sam701 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (701::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (701::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 701
and _sam702 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam282 (702::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam284 (702::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam920 (702::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Ereturn (p,Some e)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Ereturn (p,Some e)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Ereturn (p,Some e)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam286 (702::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam288 (702::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam290 (702::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam292 (702::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam294 (702::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam296 (702::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam298 (702::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam300 (702::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam302 (702::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam304 (702::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam306 (702::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Ereturn (p,Some e)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (702::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 702
and _sam703 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam282 (703::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam284 (703::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam920 (703::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p,Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			|_ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p,Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			|_ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p,Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			|_ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam286 (703::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam288 (703::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam290 (703::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam292 (703::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam294 (703::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam296 (703::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam298 (703::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam300 (703::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam302 (703::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam304 (703::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam306 (703::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p,Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			|_ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (703::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 703
and _sam704 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (704::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam286 (704::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam288 (704::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam290 (704::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam292 (704::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam294 (704::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam296 (704::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam298 (704::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam300 (704::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam302 (704::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam306 (704::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (704::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 704
and _sam705 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (705::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (705::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam290 (705::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam292 (705::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam294 (705::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam296 (705::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam298 (705::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam300 (705::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam306 (705::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (705::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 705
and _sam706 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (706::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (706::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 706
and _sam707 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (707::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (707::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam298 (707::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam300 (707::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam306 (707::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (707::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 707
and _sam708 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (708::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (708::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam298 (708::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam300 (708::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam306 (708::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (708::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 708
and _sam709 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (709::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (709::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam298 (709::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam300 (709::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam306 (709::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (709::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 709
and _sam710 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (710::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (710::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam298 (710::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam300 (710::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam306 (710::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (710::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 710
and _sam711 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (711::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (711::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam300 (711::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (711::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 711
and _sam712 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (712::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (712::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 712
and _sam713 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (713::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (713::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam290 (713::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam292 (713::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam294 (713::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam296 (713::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam298 (713::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam300 (713::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam306 (713::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (713::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 713
and _sam714 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
		_sam284 (714::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam920 (714::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam286 (714::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam288 (714::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam290 (714::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam292 (714::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam294 (714::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam296 (714::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam298 (714::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam300 (714::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam302 (714::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam306 (714::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (714::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 714
and _sam715 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (715::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (715::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam300 (715::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam308 (715::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 715
and _sam716 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam920 (716::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam288 (716::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam300 (716::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 716
and _sam717 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam343 (717::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam345 (717::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam917 (717::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam347 (717::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam349 (717::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam351 (717::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam353 (717::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam355 (717::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam357 (717::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam359 (717::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam361 (717::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam363 (717::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam365 (717::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam367 (717::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam369 (717::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 717
and _sam718 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (718::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (718::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (718::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam348 (718::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (718::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (718::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (718::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (718::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (718::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (718::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (718::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (718::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (718::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (718::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (718::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 718
and _sam719 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam917 (719::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam347 (719::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam349 (719::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam351 (719::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam353 (719::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam355 (719::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam357 (719::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam359 (719::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam361 (719::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam363 (719::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam367 (719::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam369 (719::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 719
and _sam720 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (720::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam348 (720::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (720::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (720::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (720::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (720::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (720::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (720::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (720::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (720::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam368 (720::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (720::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 720
and _sam721 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam917 (721::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam349 (721::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam351 (721::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam353 (721::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam355 (721::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam357 (721::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam359 (721::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam361 (721::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam367 (721::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam369 (721::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 721
and _sam722 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (722::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (722::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (722::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (722::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (722::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (722::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (722::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (722::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam368 (722::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (722::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 722
and _sam723 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam917 (723::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam349 (723::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 723
and _sam724 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (724::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (724::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 724
and _sam725 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam917 (725::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam349 (725::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam359 (725::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam361 (725::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam367 (725::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam369 (725::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 725
and _sam726 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (726::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (726::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam360 (726::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (726::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam368 (726::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (726::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 726
and _sam727 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam917 (727::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam349 (727::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam359 (727::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam361 (727::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam367 (727::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam369 (727::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 727
and _sam728 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (728::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (728::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam360 (728::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (728::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam368 (728::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (728::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 728
and _sam729 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam917 (729::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam349 (729::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam359 (729::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam361 (729::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam367 (729::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam369 (729::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 729
and _sam730 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (730::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (730::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam360 (730::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (730::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam368 (730::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (730::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 730
and _sam731 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam917 (731::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam349 (731::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam359 (731::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam361 (731::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam367 (731::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam369 (731::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 731
and _sam732 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (732::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (732::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam360 (732::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (732::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam368 (732::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (732::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 732
and _sam733 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam917 (733::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam349 (733::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam361 (733::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam369 (733::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 733
and _sam734 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (734::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (734::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam362 (734::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (734::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 734
and _sam735 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam917 (735::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam349 (735::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 735
and _sam736 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (736::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (736::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 736
and _sam737 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam917 (737::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam349 (737::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam351 (737::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam353 (737::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam355 (737::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam357 (737::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam359 (737::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam361 (737::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam367 (737::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam369 (737::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 737
and _sam738 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (738::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (738::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (738::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (738::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (738::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (738::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (738::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (738::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam368 (738::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (738::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 738
and _sam739 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
		_sam345 (739::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam917 (739::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam347 (739::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam349 (739::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam351 (739::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam353 (739::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam355 (739::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam357 (739::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam359 (739::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam361 (739::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam363 (739::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam367 (739::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam369 (739::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 739
and _sam740 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
		_sam346 (740::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (740::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam348 (740::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (740::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (740::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (740::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (740::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (740::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (740::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (740::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (740::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam368 (740::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (740::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 740
and _sam741 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam917 (741::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam349 (741::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam361 (741::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam369 (741::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 741
and _sam742 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (742::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (742::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam362 (742::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (742::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 742
and _sam743 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam917 (743::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam349 (743::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam361 (743::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 743
and _sam744 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (744::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (744::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam362 (744::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 744
and _sam745 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam343 (745::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam345 (745::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam917 (745::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let e,pMem = match pMem with |(EXPR t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ((e, (fst e, []))) in
		goto (List.hd pEtats) "expr_bloc" pEtats ((EXPR_BLOC valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam347 (745::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam349 (745::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam351 (745::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam353 (745::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam355 (745::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam357 (745::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam359 (745::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam361 (745::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam363 (745::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam365 (745::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam367 (745::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam373 (745::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam369 (745::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 745
and _sam746 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (746::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (746::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (746::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    (Hyper2.fusionPos p (fst e), [e])) in
		goto (List.hd pEtats) "expr_bloc2" pEtats ((EXPR_BLOC2 valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam348 (746::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (746::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (746::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (746::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (746::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (746::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (746::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (746::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (746::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (746::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (746::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam373 (746::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam370 (746::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 746
and _sam747 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (747::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (747::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 747
and _sam748 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (748::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (748::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (748::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Ereturn (p,Some e)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam348 (748::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (748::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (748::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (748::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (748::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (748::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (748::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (748::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (748::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (748::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (748::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Ereturn (p,Some e)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (748::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 748
and _sam749 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam344 (749::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam346 (749::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (749::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p,Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			|_ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam348 (749::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (749::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (749::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (749::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (749::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (749::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (749::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (749::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (749::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam366 (749::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam368 (749::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p,Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			|_ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (749::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 749
and _sam750 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (750::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam348 (750::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (750::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (750::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (750::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (750::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (750::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (750::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (750::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (750::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam368 (750::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (750::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 750
and _sam751 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (751::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (751::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (751::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (751::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (751::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (751::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (751::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (751::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam368 (751::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (751::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 751
and _sam752 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (752::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (752::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 752
and _sam753 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (753::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (753::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam360 (753::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (753::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam368 (753::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (753::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 753
and _sam754 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (754::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (754::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam360 (754::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (754::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam368 (754::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (754::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 754
and _sam755 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (755::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (755::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam360 (755::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (755::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam368 (755::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (755::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 755
and _sam756 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (756::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (756::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam360 (756::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (756::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam368 (756::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (756::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 756
and _sam757 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (757::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (757::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam362 (757::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (757::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 757
and _sam758 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (758::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (758::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 758
and _sam759 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (759::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (759::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (759::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (759::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (759::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (759::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (759::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (759::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam368 (759::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (759::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 759
and _sam760 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
		_sam346 (760::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam921 (760::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam348 (760::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam350 (760::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam352 (760::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam354 (760::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam356 (760::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam358 (760::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam360 (760::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam362 (760::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam364 (760::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam368 (760::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (760::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 760
and _sam761 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (761::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (761::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam362 (761::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam370 (761::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 761
and _sam762 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam921 (762::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam350 (762::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam362 (762::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR_WMIN_ t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in ((Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2)) ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 762
and _sam763 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam402 (763::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam403 (763::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam922 (763::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
		_sam404 (763::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam405 (763::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam406 (763::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam407 (763::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam408 (763::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam409 (763::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam410 (763::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam411 (763::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam412 (763::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam413 (763::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam414 (763::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam415 (763::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 763
and _sam764 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam922 (764::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
		_sam404 (764::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam405 (764::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam406 (764::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam407 (764::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam408 (764::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam409 (764::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam410 (764::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam411 (764::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam412 (764::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam414 (764::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam415 (764::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 764
and _sam765 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam922 (765::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam405 (765::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam406 (765::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam407 (765::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam408 (765::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam409 (765::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam410 (765::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam411 (765::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam414 (765::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam415 (765::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 765
and _sam766 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam922 (766::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam405 (766::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 766
and _sam767 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam922 (767::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam405 (767::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam410 (767::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam411 (767::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam414 (767::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam415 (767::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 767
and _sam768 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam922 (768::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam405 (768::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam410 (768::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam411 (768::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam414 (768::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam415 (768::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 768
and _sam769 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam922 (769::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam405 (769::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam410 (769::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam411 (769::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam414 (769::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam415 (769::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 769
and _sam770 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam922 (770::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam405 (770::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam410 (770::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam411 (770::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam414 (770::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam415 (770::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 770
and _sam771 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam922 (771::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam405 (771::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam411 (771::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam415 (771::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 771
and _sam772 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam922 (772::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam405 (772::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 772
and _sam773 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam922 (773::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam405 (773::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam406 (773::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam407 (773::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam408 (773::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam409 (773::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam410 (773::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam411 (773::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam414 (773::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam415 (773::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 773
and _sam774 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
		_sam403 (774::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam922 (774::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
		_sam404 (774::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam405 (774::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam406 (774::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam407 (774::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam408 (774::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam409 (774::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam410 (774::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam411 (774::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam412 (774::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
		_sam414 (774::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam415 (774::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 774
and _sam775 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam922 (775::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam405 (775::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam411 (775::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam415 (775::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 775
and _sam776 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam922 (776::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam405 (776::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam411 (776::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 776
and _sam777 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam419 (777::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam420 (777::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam923 (777::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam421 (777::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam422 (777::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam423 (777::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam424 (777::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam425 (777::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam426 (777::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam427 (777::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam428 (777::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam429 (777::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam430 (777::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
		_sam431 (777::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam432 (777::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 777
and _sam778 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam923 (778::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam421 (778::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam422 (778::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam423 (778::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam424 (778::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam425 (778::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam426 (778::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam427 (778::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam428 (778::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam429 (778::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
		_sam431 (778::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam432 (778::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 778
and _sam779 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam923 (779::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam422 (779::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam423 (779::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam424 (779::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam425 (779::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam426 (779::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam427 (779::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam428 (779::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
		_sam431 (779::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam432 (779::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 779
and _sam780 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam923 (780::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam422 (780::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 780
and _sam781 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam923 (781::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam422 (781::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam427 (781::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam428 (781::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
		_sam431 (781::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam432 (781::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 781
and _sam782 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam923 (782::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam422 (782::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam427 (782::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam428 (782::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
		_sam431 (782::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam432 (782::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 782
and _sam783 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam923 (783::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam422 (783::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam427 (783::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam428 (783::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
		_sam431 (783::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam432 (783::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 783
and _sam784 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam923 (784::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam422 (784::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam427 (784::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam428 (784::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
		_sam431 (784::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam432 (784::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 784
and _sam785 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam923 (785::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam422 (785::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam428 (785::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam432 (785::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 785
and _sam786 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam923 (786::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam422 (786::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 786
and _sam787 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam923 (787::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam422 (787::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam423 (787::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam424 (787::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam425 (787::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam426 (787::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam427 (787::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam428 (787::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
		_sam431 (787::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam432 (787::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 787
and _sam788 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
		_sam420 (788::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam923 (788::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam421 (788::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam422 (788::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam423 (788::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam424 (788::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam425 (788::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam426 (788::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam427 (788::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam428 (788::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam429 (788::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
		_sam431 (788::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam432 (788::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 788
and _sam789 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam923 (789::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam422 (789::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam428 (789::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam432 (789::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 789
and _sam790 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam923 (790::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam422 (790::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam428 (790::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 790
and _sam791 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam436 (791::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam437 (791::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam924 (791::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam438 (791::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam439 (791::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam440 (791::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam441 (791::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam442 (791::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam443 (791::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam444 (791::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam445 (791::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam446 (791::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam447 (791::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam448 (791::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam449 (791::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 791
and _sam792 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam924 (792::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam438 (792::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam439 (792::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam440 (792::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam441 (792::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam442 (792::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam443 (792::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam444 (792::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam445 (792::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam446 (792::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam448 (792::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam449 (792::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 792
and _sam793 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam924 (793::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam439 (793::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam440 (793::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam441 (793::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam442 (793::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam443 (793::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam444 (793::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam445 (793::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam448 (793::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam449 (793::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 793
and _sam794 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam924 (794::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam439 (794::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 794
and _sam795 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam924 (795::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam439 (795::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam444 (795::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam445 (795::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam448 (795::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam449 (795::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 795
and _sam796 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam924 (796::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam439 (796::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam444 (796::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam445 (796::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam448 (796::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam449 (796::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 796
and _sam797 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam924 (797::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam439 (797::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam444 (797::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam445 (797::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam448 (797::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam449 (797::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 797
and _sam798 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam924 (798::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam439 (798::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
		_sam444 (798::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam445 (798::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam448 (798::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam449 (798::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 798
and _sam799 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam924 (799::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam439 (799::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam445 (799::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam449 (799::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 799
and _sam800 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam924 (800::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam439 (800::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 800
and _sam801 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam924 (801::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam439 (801::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam440 (801::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam441 (801::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam442 (801::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam443 (801::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam444 (801::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam445 (801::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam448 (801::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam449 (801::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 801
and _sam802 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
		_sam437 (802::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam924 (802::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
		_sam438 (802::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam439 (802::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam440 (802::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam441 (802::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam442 (802::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam443 (802::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam444 (802::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam445 (802::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam446 (802::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
		_sam448 (802::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam449 (802::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 802
and _sam803 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam924 (803::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam439 (803::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam445 (803::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
		_sam449 (803::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 803
and _sam804 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
		_sam924 (804::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
		_sam439 (804::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
		_sam445 (804::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 804
and _sam805 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 805
and _sam806 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 806
and _sam807 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 807
and _sam808 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 808
and _sam809 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 809
and _sam810 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 810
and _sam811 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|EOF->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 811
and _sam812 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 812
and _sam813 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pl,pMem = match pMem with |(LVALUE t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in (p, Elvalue l)) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 813
and _sam814 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 814
and _sam815 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 815
and _sam816 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 816
and _sam817 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 817
and _sam818 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(EQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 818
and _sam819 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(END data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(G data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(L data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 819
and _sam820 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|EOF->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken EOF
	|(EQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 820
and _sam821 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 821
and _sam822 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (EXP data)
	|(G data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr" pEtats ((EXPR valeur)::pMem) newToken (TIMES data)
	|_->samFail 822
and _sam823 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let b,e,pMem = match pMem with |(EXPR_BLOC2 t1)::(EXPR t0)::tl -> t1,t0,tl |_ -> assert false in
			let valeur = ((e, b)) in
		goto (List.hd pEtats) "expr_bloc" pEtats ((EXPR_BLOC valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let b,e,pMem = match pMem with |(EXPR_BLOC2 t1)::(EXPR t0)::tl -> t1,t0,tl |_ -> assert false in
			let valeur = ((e, b)) in
		goto (List.hd pEtats) "expr_bloc" pEtats ((EXPR_BLOC valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let b,e,pMem = match pMem with |(EXPR_BLOC2 t1)::(EXPR t0)::tl -> t1,t0,tl |_ -> assert false in
			let valeur = ((e, b)) in
		goto (List.hd pEtats) "expr_bloc" pEtats ((EXPR_BLOC valeur)::pMem) newToken (END data)
	|_->samFail 823
and _sam824 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let b,e,pMem = match pMem with |(EXPR_BLOC2 t1)::(EXPR t0)::tl -> t1,t0,tl |_ -> assert false in
			let valeur = ((e, b)) in
		goto (List.hd pEtats) "expr_bloc" pEtats ((EXPR_BLOC valeur)::pMem) newToken (END data)
	|_->samFail 824
and _sam825 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam844 (825::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam846 (825::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam21 (825::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam852 (825::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam854 (825::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam934 (825::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam263 (825::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam309 (825::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam868 (825::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam312 (825::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam10 (825::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam313 (825::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam876 (825::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam394 (825::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 825
and _sam826 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam845 (826::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam847 (826::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam22 (826::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam853 (826::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam855 (826::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam935 (826::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam264 (826::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam310 (826::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam869 (826::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam374 (826::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam11 (826::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam375 (826::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam877 (826::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (826::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 826
and _sam827 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam314 (827::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam315 (827::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam936 (827::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(ELSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pe2,e1,pMem = match pMem with |(EXPR_WMIN_ t1)::(EXPR_W_RET t0)::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p, e2) = pe2 in
    (e1, (p, [pe2]))) in
		goto (List.hd pEtats) "expr_bloc" pEtats ((EXPR_BLOC valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pe2,e1,pMem = match pMem with |(EXPR_WMIN_ t1)::(EXPR_W_RET t0)::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p, e2) = pe2 in
    (e1, (p, [pe2]))) in
		goto (List.hd pEtats) "expr_bloc" pEtats ((EXPR_BLOC valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pe2,e1,pMem = match pMem with |(EXPR_WMIN_ t1)::(EXPR_W_RET t0)::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p, e2) = pe2 in
    (e1, (p, [pe2]))) in
		goto (List.hd pEtats) "expr_bloc" pEtats ((EXPR_BLOC valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam316 (827::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam317 (827::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam318 (827::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam319 (827::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam320 (827::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam321 (827::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam322 (827::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam323 (827::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam324 (827::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam325 (827::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam326 (827::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam311 (827::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam327 (827::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 827
and _sam828 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam376 (828::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|(AND data)->
		_sam377 (828::pEtats) (Tok(AND data)::pMem) newToken (newToken())
	|(DOT data)->
		_sam937 (828::pEtats) (Tok(DOT data)::pMem) newToken (newToken())
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pe2,e1,pMem = match pMem with |(EXPR_WMIN_ t1)::(EXPR_W_RET t0)::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p, e2) = pe2 in
    (e1, (p, [pe2]))) in
		goto (List.hd pEtats) "expr_bloc" pEtats ((EXPR_BLOC valeur)::pMem) newToken (END data)
	|(EQ data)->
		_sam378 (828::pEtats) (Tok(EQ data)::pMem) newToken (newToken())
	|(EXP data)->
		_sam379 (828::pEtats) (Tok(EXP data)::pMem) newToken (newToken())
	|(G data)->
		_sam380 (828::pEtats) (Tok(G data)::pMem) newToken (newToken())
	|(GEQ data)->
		_sam381 (828::pEtats) (Tok(GEQ data)::pMem) newToken (newToken())
	|(L data)->
		_sam382 (828::pEtats) (Tok(L data)::pMem) newToken (newToken())
	|(LEQ data)->
		_sam383 (828::pEtats) (Tok(LEQ data)::pMem) newToken (newToken())
	|(MINUS data)->
		_sam384 (828::pEtats) (Tok(MINUS data)::pMem) newToken (newToken())
	|(MODULO data)->
		_sam385 (828::pEtats) (Tok(MODULO data)::pMem) newToken (newToken())
	|(NEQ data)->
		_sam386 (828::pEtats) (Tok(NEQ data)::pMem) newToken (newToken())
	|(OR data)->
		_sam387 (828::pEtats) (Tok(OR data)::pMem) newToken (newToken())
	|(PLUS data)->
		_sam388 (828::pEtats) (Tok(PLUS data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam373 (828::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|(TIMES data)->
		_sam389 (828::pEtats) (Tok(TIMES data)::pMem) newToken (newToken())
	|_->samFail 828
and _sam829 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,pe2,e1,pMem = match pMem with |(EXPR_BLOC2 t2)::(EXPR_WMIN_ t1)::(EXPR_W_RET t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1, e2) = pe2 in
    let (p2, eL) = pb in
    (e1, (Hyper2.fusionPos p1 p2, pe2::eL))) in
		goto (List.hd pEtats) "expr_bloc" pEtats ((EXPR_BLOC valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,pe2,e1,pMem = match pMem with |(EXPR_BLOC2 t2)::(EXPR_WMIN_ t1)::(EXPR_W_RET t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1, e2) = pe2 in
    let (p2, eL) = pb in
    (e1, (Hyper2.fusionPos p1 p2, pe2::eL))) in
		goto (List.hd pEtats) "expr_bloc" pEtats ((EXPR_BLOC valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,pe2,e1,pMem = match pMem with |(EXPR_BLOC2 t2)::(EXPR_WMIN_ t1)::(EXPR_W_RET t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1, e2) = pe2 in
    let (p2, eL) = pb in
    (e1, (Hyper2.fusionPos p1 p2, pe2::eL))) in
		goto (List.hd pEtats) "expr_bloc" pEtats ((EXPR_BLOC valeur)::pMem) newToken (END data)
	|_->samFail 829
and _sam830 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,pe2,e1,pMem = match pMem with |(EXPR_BLOC2 t2)::(EXPR_WMIN_ t1)::(EXPR_W_RET t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p1, e2) = pe2 in
    let (p2, eL) = pb in
    (e1, (Hyper2.fusionPos p1 p2, pe2::eL))) in
		goto (List.hd pEtats) "expr_bloc" pEtats ((EXPR_BLOC valeur)::pMem) newToken (END data)
	|_->samFail 830
and _sam831 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(EXPR_BLOC2 t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2, eL) = pb in
    (Hyper2.fusionPos p1 p2, (e::eL))) in
		goto (List.hd pEtats) "expr_bloc2" pEtats ((EXPR_BLOC2 valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(EXPR_BLOC2 t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2, eL) = pb in
    (Hyper2.fusionPos p1 p2, (e::eL))) in
		goto (List.hd pEtats) "expr_bloc2" pEtats ((EXPR_BLOC2 valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(EXPR_BLOC2 t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2, eL) = pb in
    (Hyper2.fusionPos p1 p2, (e::eL))) in
		goto (List.hd pEtats) "expr_bloc2" pEtats ((EXPR_BLOC2 valeur)::pMem) newToken (END data)
	|_->samFail 831
and _sam832 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(EXPR_BLOC2 t2)::(EXPR t1)::(Tok (SEMICOLON t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2, eL) = pb in
    (Hyper2.fusionPos p1 p2, (e::eL))) in
		goto (List.hd pEtats) "expr_bloc2" pEtats ((EXPR_BLOC2 valeur)::pMem) newToken (END data)
	|_->samFail 832
and _sam833 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(ELSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(EXPR_BLOC2 t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let p2,eL = pb in
    (Hyper2.fusionPos p1 p2, eL)) in
		goto (List.hd pEtats) "expr_bloc2" pEtats ((EXPR_BLOC2 valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(EXPR_BLOC2 t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let p2,eL = pb in
    (Hyper2.fusionPos p1 p2, eL)) in
		goto (List.hd pEtats) "expr_bloc2" pEtats ((EXPR_BLOC2 valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(EXPR_BLOC2 t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let p2,eL = pb in
    (Hyper2.fusionPos p1 p2, eL)) in
		goto (List.hd pEtats) "expr_bloc2" pEtats ((EXPR_BLOC2 valeur)::pMem) newToken (END data)
	|_->samFail 833
and _sam834 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,p1,pMem = match pMem with |(EXPR_BLOC2 t1)::(Tok (SEMICOLON t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
    let p2,eL = pb in
    (Hyper2.fusionPos p1 p2, eL)) in
		goto (List.hd pEtats) "expr_bloc2" pEtats ((EXPR_BLOC2 valeur)::pMem) newToken (END data)
	|_->samFail 834
and _sam835 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam845 (835::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam847 (835::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam22 (835::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam853 (835::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam855 (835::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam935 (835::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam264 (835::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam310 (835::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam869 (835::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam374 (835::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam11 (835::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam375 (835::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam877 (835::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (835::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 835
and _sam836 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam845 (836::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam847 (836::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam22 (836::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam853 (836::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam855 (836::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam935 (836::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam264 (836::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam310 (836::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam869 (836::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam374 (836::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam11 (836::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam375 (836::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam877 (836::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (836::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 836
and _sam837 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam845 (837::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam847 (837::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam22 (837::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam853 (837::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam855 (837::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam935 (837::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam264 (837::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam310 (837::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam869 (837::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam374 (837::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam11 (837::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam375 (837::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam877 (837::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (837::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 837
and _sam838 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam845 (838::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam847 (838::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam22 (838::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam853 (838::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam855 (838::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam935 (838::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam264 (838::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam310 (838::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam869 (838::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam374 (838::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam11 (838::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam375 (838::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam877 (838::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (838::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 838
and _sam839 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam845 (839::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam847 (839::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam22 (839::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam853 (839::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam855 (839::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam935 (839::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam264 (839::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam310 (839::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam869 (839::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam374 (839::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam11 (839::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam375 (839::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam877 (839::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (839::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 839
and _sam840 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam845 (840::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam847 (840::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam22 (840::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam853 (840::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam855 (840::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam935 (840::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam264 (840::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam310 (840::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam869 (840::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam374 (840::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam11 (840::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam375 (840::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam877 (840::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (840::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 840
and _sam841 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam845 (841::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam847 (841::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam22 (841::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam853 (841::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam855 (841::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam935 (841::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam264 (841::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam310 (841::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam869 (841::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam374 (841::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam11 (841::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam375 (841::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam877 (841::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (841::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 841
and _sam842 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam845 (842::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam847 (842::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam22 (842::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam853 (842::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam855 (842::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam935 (842::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam264 (842::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam310 (842::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam869 (842::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam374 (842::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam11 (842::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam375 (842::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam877 (842::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (842::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 842
and _sam843 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
		_sam845 (843::pEtats) (Tok(CHAINE data)::pMem) newToken (newToken())
	|(ENTIER_IDENT data)->
		_sam847 (843::pEtats) (Tok(ENTIER_IDENT data)::pMem) newToken (newToken())
	|(ENTIER_PARG data)->
		_sam22 (843::pEtats) (Tok(ENTIER_PARG data)::pMem) newToken (newToken())
	|(FALSE data)->
		_sam853 (843::pEtats) (Tok(FALSE data)::pMem) newToken (newToken())
	|(FOR data)->
		_sam855 (843::pEtats) (Tok(FOR data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam935 (843::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(IDENT_PARG data)->
		_sam264 (843::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|(IF data)->
		_sam310 (843::pEtats) (Tok(IF data)::pMem) newToken (newToken())
	|(INT data)->
		_sam869 (843::pEtats) (Tok(INT data)::pMem) newToken (newToken())
	|(NOT data)->
		_sam374 (843::pEtats) (Tok(NOT data)::pMem) newToken (newToken())
	|(PARG data)->
		_sam11 (843::pEtats) (Tok(PARG data)::pMem) newToken (newToken())
	|(RETURN data)->
		_sam375 (843::pEtats) (Tok(RETURN data)::pMem) newToken (newToken())
	|(TRUE data)->
		_sam877 (843::pEtats) (Tok(TRUE data)::pMem) newToken (newToken())
	|(WHILE data)->
		_sam395 (843::pEtats) (Tok(WHILE data)::pMem) newToken (newToken())
	|_->samFail 843
and _sam844 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 844
and _sam845 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(END data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let ps,pMem = match pMem with |(Tok (CHAINE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,s) = ps in (p, Echaine s)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 845
and _sam846 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 846
and _sam847 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pb,pMem = match pMem with |(Tok (ENTIER_IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
  	  let (p,i,s) = pb in (p, EentierIdent (p, i, s))
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 847
and _sam848 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam850 (848::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 848
and _sam849 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam851 (849::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 849
and _sam850 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 850
and _sam851 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,pi,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (ENTIER_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Hyper2.fusionPos p p2, EentierParG (p, i, pb)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 851
and _sam852 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 852
and _sam853 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (FALSE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Efalse)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 853
and _sam854 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam856 (854::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 854
and _sam855 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam857 (855::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 855
and _sam856 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam235 (856::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|_->samFail 856
and _sam857 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
		_sam236 (857::pEtats) (Tok(AFFECT data)::pMem) newToken (newToken())
	|_->samFail 857
and _sam858 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
		_sam860 (858::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 858
and _sam859 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
		_sam861 (859::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|_->samFail 859
and _sam860 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 860
and _sam861 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let p2,e2b,e1,pi,p1,pMem = match pMem with |(Tok (END t6))::(EXPR_BLOC t5)::_::(EXPR t3)::_::(Tok (IDENT t1))::(Tok (FOR t0))::tl -> t6,t5,t3,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (p,i) = pi in
  		let (e2, b) = e2b in
      Hyper2.fusionPos p1 p2, Efor ((i : ident), e1, e2, b)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 861
and _sam862 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam864 (862::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 862
and _sam863 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam865 (863::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 863
and _sam864 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 864
and _sam865 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,l,pi,pMem = match pMem with |(Tok (PARD t2))::(SEPARATED_LIST_COMMA_EXPR t1)::(Tok (IDENT_PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos p p2, Eapplication (p, i, l)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 865
and _sam866 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 866
and _sam867 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pel,eb,p1,pMem = match pMem with |(ELSE_EXP t2)::(EXPR_BLOC t1)::(Tok (IF t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
  		let (e, b) = eb in
      let (p2, el) = pel in
	    Hyper2.fusionPos p1 p2, Eif (e, b, el)
    ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 867
and _sam868 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 868
and _sam869 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (INT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in (p,Eentier i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 869
and _sam870 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam872 (870::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 870
and _sam871 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam873 (871::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 871
and _sam872 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 872
and _sam873 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let p2,pb,p1,pMem = match pMem with |(Tok (PARD t2))::(BLOC1 t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( Hyper2.fusionPos p1 p2, Ebloc1 pb ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 873
and _sam874 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 874
and _sam875 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,p1,pMem = match pMem with |(Tok (PARD_IDENT t2))::(EXPR t1)::(Tok (PARG t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,i) = pi in
    Hyper2.fusionPos p1 p2, EparDIdent (e, p2, i)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 875
and _sam876 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 876
and _sam877 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(END data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let p,pMem = match pMem with |(Tok (TRUE t0))::tl -> t0,tl |_ -> assert false in
			let valeur = ((p, Etrue)) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 877
and _sam878 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 878
and _sam879 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pl,pMem = match pMem with |(LVALUE_WMIN_ t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,l) = pl in p, Elvalue l) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 879
and _sam880 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 880
and _sam881 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (DOT data)
	|(END data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let w,pMem = match pMem with |(WHILEEXP t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ( w ) in
		goto (List.hd pEtats) "expr_wMin_" pEtats ((EXPR_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 881
and _sam882 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e),Eminus e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e),Eminus e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e),Eminus e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e),Eminus e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e),Eminus e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e),Eminus e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e),Eminus e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e),Eminus e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e),Eminus e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(NOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e),Eminus e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e),Eminus e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e),Eminus e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e),Eminus e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (MINUS t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e),Eminus e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 882
and _sam883 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(NOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (NOT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p (fst e), Enot e) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 883
and _sam884 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(NOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let e,p1,pMem = match pMem with |(EXPR_W_RET t1)::(Tok (RETURN t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (Hyper2.fusionPos p1 (fst e), Ereturn (p1, Some e)) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 884
and _sam885 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR_W_RET t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR_W_RET t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR_W_RET t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR_W_RET t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR_W_RET t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR_W_RET t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR_W_RET t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR_W_RET t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR_W_RET t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR_W_RET t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR_W_RET t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR_W_RET t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR_W_RET t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let e,pl,pMem = match pMem with |(EXPR_W_RET t2)::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
  		match pl with
  			|p, Elvalue l -> Hyper2.fusionPos p (fst e), ElvalueAffect (p, l, e)
  			| _ -> raise Ast.Parsing_Error
  		) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 885
and _sam886 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (AND t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, And, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 886
and _sam887 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Eq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 887
and _sam888 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (EXP t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Exp, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 888
and _sam889 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (G t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Gr, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 889
and _sam890 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (GEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Geq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 890
and _sam891 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (L t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Lo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 891
and _sam892 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (LEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Leq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 892
and _sam893 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MINUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Minus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 893
and _sam894 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (MODULO t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Modulo, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 894
and _sam895 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (NEQ t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Neq, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 895
and _sam896 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (OR t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Or, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 896
and _sam897 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (PLUS t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Plus, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 897
and _sam898 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (CHAINE data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (ENTIER_PARG data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (FOR data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (INT data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (NOT data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (PARG data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (RETURN data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pe2,p,pe1,pMem = match pMem with |(EXPR_W_RET t2)::(Tok (TIMES t1))::(EXPR t0)::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = ( let (p1, e1) = pe1 in let (p2,e2) = pe2 in (Hyper2.fusionPos p1 p2) , Ebinop (p, Times, pe1, pe2) ) in
		goto (List.hd pEtats) "expr_w_Ret" pEtats ((EXPR_W_RET valeur)::pMem) newToken (WHILE data)
	|_->samFail 898
and _sam899 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
			let declarations,pMem = match pMem with |(DECLARATIONS_LIST t0)::tl -> t0,tl |_ -> assert false in
			let valeur = (DeclarationList declarations) in
		raise (Output valeur)
	|_->samFail 899
and _sam900 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT_PARG data)->
		_sam901 (900::pEtats) (Tok(IDENT_PARG data)::pMem) newToken (newToken())
	|_->samFail 900
and _sam901 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam945 (901::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats=901::pEtats in
			let valeur = ([]) in
		goto (List.hd pEtats) "separated_list_COMMA_param" pEtats ((SEPARATED_LIST_COMMA_PARAM valeur)::pMem) newToken (PARD data)
	|_->samFail 901
and _sam902 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
		_sam96 (902::pEtats) (Tok(PARD data)::pMem) newToken (newToken())
	|_->samFail 902
and _sam903 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
			let pEtats = match pEtats with |_::_::_::_::t -> t |_ -> assert false in
			let pb,parameters,pig,pMem = match pMem with |(BLOC_END t4)::_::(SEPARATED_LIST_COMMA_PARAM t2)::(Tok (IDENT_PARG t1))::_::tl -> t4,t2,t1,tl |_ -> assert false in
			let valeur = (
      let (p1,ig) = pig in
      let (pEnd, (p,eL)) = pb in
      Dfonction (p1,ig, parameters, p1, Any, (p,eL), "")
    ) in
		goto (List.hd pEtats) "fonction" pEtats ((FONCTION valeur)::pMem) newToken EOF
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::_::_::t -> t |_ -> assert false in
			let pb,parameters,pig,pMem = match pMem with |(BLOC_END t4)::_::(SEPARATED_LIST_COMMA_PARAM t2)::(Tok (IDENT_PARG t1))::_::tl -> t4,t2,t1,tl |_ -> assert false in
			let valeur = (
      let (p1,ig) = pig in
      let (pEnd, (p,eL)) = pb in
      Dfonction (p1,ig, parameters, p1, Any, (p,eL), "")
    ) in
		goto (List.hd pEtats) "fonction" pEtats ((FONCTION valeur)::pMem) newToken (SEMICOLON data)
	|_->samFail 903
and _sam904 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
			let pEtats = match pEtats with |_::_::_::_::_::t -> t |_ -> assert false in
			let pb,e,parameters,pig,pMem = match pMem with |(BLOC_END t5)::(EXPR t4)::_::(SEPARATED_LIST_COMMA_PARAM t2)::(Tok (IDENT_PARG t1))::_::tl -> t5,t4,t2,t1,tl |_ -> assert false in
			let valeur = (
      let (p1,ig) = pig in
      let (pEnd, (p,eL)) = pb in
      Dfonction (p1,ig, parameters, p1, Any, (Hyper2.fusionPos (fst e) p, e::eL), "")
    ) in
		goto (List.hd pEtats) "fonction" pEtats ((FONCTION valeur)::pMem) newToken EOF
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::_::_::_::t -> t |_ -> assert false in
			let pb,e,parameters,pig,pMem = match pMem with |(BLOC_END t5)::(EXPR t4)::_::(SEPARATED_LIST_COMMA_PARAM t2)::(Tok (IDENT_PARG t1))::_::tl -> t5,t4,t2,t1,tl |_ -> assert false in
			let valeur = (
      let (p1,ig) = pig in
      let (pEnd, (p,eL)) = pb in
      Dfonction (p1,ig, parameters, p1, Any, (Hyper2.fusionPos (fst e) p, e::eL), "")
    ) in
		goto (List.hd pEtats) "fonction" pEtats ((FONCTION valeur)::pMem) newToken (SEMICOLON data)
	|_->samFail 904
and _sam905 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
			let pEtats = match pEtats with |_::_::_::_::_::t -> t |_ -> assert false in
			let pb,pt,parameters,pig,pMem = match pMem with |(BLOC_END t5)::(TYPAGE t4)::_::(SEPARATED_LIST_COMMA_PARAM t2)::(Tok (IDENT_PARG t1))::_::tl -> t5,t4,t2,t1,tl |_ -> assert false in
			let valeur = (
      let (p1,ig) = pig in
      let (pEnd, (p,eL)) = pb in
      let typ,p2 = match pt with
        | (p, "Int64") -> Int64, p
        | (p, "Bool") -> Bool, p
        | (p, "String") -> String, p
        | (p, "Any") -> Any, p
        | (p, "Nothing") -> Nothing, p
        | (p, s) -> S s, p
      in
      Dfonction (p1,ig, parameters, p2, typ, (p,eL), "")
    ) in
		goto (List.hd pEtats) "fonction" pEtats ((FONCTION valeur)::pMem) newToken EOF
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::_::_::_::t -> t |_ -> assert false in
			let pb,pt,parameters,pig,pMem = match pMem with |(BLOC_END t5)::(TYPAGE t4)::_::(SEPARATED_LIST_COMMA_PARAM t2)::(Tok (IDENT_PARG t1))::_::tl -> t5,t4,t2,t1,tl |_ -> assert false in
			let valeur = (
      let (p1,ig) = pig in
      let (pEnd, (p,eL)) = pb in
      let typ,p2 = match pt with
        | (p, "Int64") -> Int64, p
        | (p, "Bool") -> Bool, p
        | (p, "String") -> String, p
        | (p, "Any") -> Any, p
        | (p, "Nothing") -> Nothing, p
        | (p, s) -> S s, p
      in
      Dfonction (p1,ig, parameters, p2, typ, (p,eL), "")
    ) in
		goto (List.hd pEtats) "fonction" pEtats ((FONCTION valeur)::pMem) newToken (SEMICOLON data)
	|_->samFail 905
and _sam906 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let pb,e,pt,parameters,pig,pMem = match pMem with |(BLOC_END t6)::(EXPR t5)::(TYPAGE t4)::_::(SEPARATED_LIST_COMMA_PARAM t2)::(Tok (IDENT_PARG t1))::_::tl -> t6,t5,t4,t2,t1,tl |_ -> assert false in
			let valeur = (
      let (p1,ig) = pig in
      let (pEnd, (p,eL)) = pb in
      let typ,p2 = match pt with
        | (p, "Int64") -> Int64, p
        | (p, "Bool") -> Bool, p
        | (p, "String") -> String, p
        | (p, "Any") -> Any, p
        | (p, "Nothing") -> Nothing, p
        | (p, s) -> S s, p
      in
      Dfonction (p1,ig, parameters, p2, typ, (Hyper2.fusionPos (fst e) p, e::eL), "")
    ) in
		goto (List.hd pEtats) "fonction" pEtats ((FONCTION valeur)::pMem) newToken EOF
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::_::_::_::_::t -> t |_ -> assert false in
			let pb,e,pt,parameters,pig,pMem = match pMem with |(BLOC_END t6)::(EXPR t5)::(TYPAGE t4)::_::(SEPARATED_LIST_COMMA_PARAM t2)::(Tok (IDENT_PARG t1))::_::tl -> t6,t5,t4,t2,t1,tl |_ -> assert false in
			let valeur = (
      let (p1,ig) = pig in
      let (pEnd, (p,eL)) = pb in
      let typ,p2 = match pt with
        | (p, "Int64") -> Int64, p
        | (p, "Bool") -> Bool, p
        | (p, "String") -> String, p
        | (p, "Any") -> Any, p
        | (p, "Nothing") -> Nothing, p
        | (p, s) -> S s, p
      in
      Dfonction (p1,ig, parameters, p2, typ, (Hyper2.fusionPos (fst e) p, e::eL), "")
    ) in
		goto (List.hd pEtats) "fonction" pEtats ((FONCTION valeur)::pMem) newToken (SEMICOLON data)
	|_->samFail 906
and _sam907 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (INT data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (WHILE data)
	|_->samFail 907
and _sam908 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (INT data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (WHILE data)
	|_->samFail 908
and _sam909 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TIMES data)
	|_->samFail 909
and _sam910 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TIMES data)
	|_->samFail 910
and _sam911 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TIMES data)
	|_->samFail 911
and _sam912 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TIMES data)
	|_->samFail 912
and _sam913 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (DOT data)
	|EOF->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken EOF
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TIMES data)
	|_->samFail 913
and _sam914 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TIMES data)
	|_->samFail 914
and _sam915 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TIMES data)
	|_->samFail 915
and _sam916 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam925 (916::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 916
and _sam917 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam926 (917::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 917
and _sam918 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam927 (918::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 918
and _sam919 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam928 (919::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 919
and _sam920 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam929 (920::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 920
and _sam921 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam930 (921::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 921
and _sam922 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam931 (922::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 922
and _sam923 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam932 (923::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 923
and _sam924 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam933 (924::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 924
and _sam925 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (WHILE data)
	|_->samFail 925
and _sam926 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (WHILE data)
	|_->samFail 926
and _sam927 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TIMES data)
	|_->samFail 927
and _sam928 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TIMES data)
	|_->samFail 928
and _sam929 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TIMES data)
	|_->samFail 929
and _sam930 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TIMES data)
	|_->samFail 930
and _sam931 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (DOT data)
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TIMES data)
	|_->samFail 931
and _sam932 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TIMES data)
	|_->samFail 932
and _sam933 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue" pEtats ((LVALUE valeur)::pMem) newToken (TIMES data)
	|_->samFail 933
and _sam934 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 934
and _sam935 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (let (p,i) = pi in p,Lident (p,i)) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 935
and _sam936 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam938 (936::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 936
and _sam937 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam939 (937::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 937
and _sam938 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 938
and _sam939 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pi,e,pMem = match pMem with |(Tok (IDENT t2))::_::(EXPR_WMIN_ t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (
    let (p,i) = pi in
    Hyper2.fusionPos (fst e) p, Lindex (e, p, (i : ident))) in
		goto (List.hd pEtats) "lvalue_wMin_" pEtats ((LVALUE_WMIN_ valeur)::pMem) newToken (TIMES data)
	|_->samFail 939
and _sam940 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam945 (940::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 940
and _sam941 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
		_sam949 (941::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam946 (941::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam941 (941::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|_->samFail 941
and _sam942 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
		_sam949 (942::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam946 (942::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam941 (942::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|_->samFail 942
and _sam943 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
		_sam949 (943::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam946 (943::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam941 (943::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|_->samFail 943
and _sam944 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
		_sam949 (944::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(IDENT data)->
		_sam946 (944::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam941 (944::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|_->samFail 944
and _sam945 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(COMMA data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
      let (p1,i) = pi in
      Param (p1, i, p1, Any)
    ) in
		goto (List.hd pEtats) "param" pEtats ((PARAM valeur)::pMem) newToken (COMMA data)
	|(PARD data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
      let (p1,i) = pi in
      Param (p1, i, p1, Any)
    ) in
		goto (List.hd pEtats) "param" pEtats ((PARAM valeur)::pMem) newToken (PARD data)
	|TYPE->
		_sam966 (945::pEtats) (Tok TYPE::pMem) newToken (newToken())
	|_->samFail 945
and _sam946 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
      let (p1,i) = pi in
      Param (p1, i, p1, Any)
    ) in
		goto (List.hd pEtats) "param" pEtats ((PARAM valeur)::pMem) newToken (END data)
	|(SEMICOLON data)->
			let pi,pMem = match pMem with |(Tok (IDENT t0))::tl -> t0,tl |_ -> assert false in
			let valeur = (
      let (p1,i) = pi in
      Param (p1, i, p1, Any)
    ) in
		goto (List.hd pEtats) "param" pEtats ((PARAM valeur)::pMem) newToken (SEMICOLON data)
	|TYPE->
		_sam967 (946::pEtats) (Tok TYPE::pMem) newToken (newToken())
	|_->samFail 946
and _sam947 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(COMMA data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pi,pMem = match pMem with |(TYPAGE t1)::(Tok (IDENT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p1,i) = pi in
      let typ,p2 = match pb with
        | (p, "Int64") -> Int64, p
        | (p, "Bool") -> Bool, p
        | (p, "String") -> String, p
        | (p, "Any") -> Any, p
        | (p, "Nothing") -> Nothing, p
        | (p, s) -> S s, p
      in
      Param (p1, i, p2, typ)
    ) in
		goto (List.hd pEtats) "param" pEtats ((PARAM valeur)::pMem) newToken (COMMA data)
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pi,pMem = match pMem with |(TYPAGE t1)::(Tok (IDENT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p1,i) = pi in
      let typ,p2 = match pb with
        | (p, "Int64") -> Int64, p
        | (p, "Bool") -> Bool, p
        | (p, "String") -> String, p
        | (p, "Any") -> Any, p
        | (p, "Nothing") -> Nothing, p
        | (p, s) -> S s, p
      in
      Param (p1, i, p2, typ)
    ) in
		goto (List.hd pEtats) "param" pEtats ((PARAM valeur)::pMem) newToken (PARD data)
	|_->samFail 947
and _sam948 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pi,pMem = match pMem with |(TYPAGE t1)::(Tok (IDENT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p1,i) = pi in
      let typ,p2 = match pb with
        | (p, "Int64") -> Int64, p
        | (p, "Bool") -> Bool, p
        | (p, "String") -> String, p
        | (p, "Any") -> Any, p
        | (p, "Nothing") -> Nothing, p
        | (p, s) -> S s, p
      in
      Param (p1, i, p2, typ)
    ) in
		goto (List.hd pEtats) "param" pEtats ((PARAM valeur)::pMem) newToken (END data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pb,pi,pMem = match pMem with |(TYPAGE t1)::(Tok (IDENT t0))::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (
      let (p1,i) = pi in
      let typ,p2 = match pb with
        | (p, "Int64") -> Int64, p
        | (p, "Bool") -> Bool, p
        | (p, "String") -> String, p
        | (p, "Any") -> Any, p
        | (p, "Nothing") -> Nothing, p
        | (p, s) -> S s, p
      in
      Param (p1, i, p2, typ)
    ) in
		goto (List.hd pEtats) "param" pEtats ((PARAM valeur)::pMem) newToken (SEMICOLON data)
	|_->samFail 948
and _sam949 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
			let pMem = match pMem with |_::tl -> tl |_ -> assert false in
			let valeur = ([]) in
		goto (List.hd pEtats) "param_list" pEtats ((PARAM_LIST valeur)::pMem) newToken EOF
	|(SEMICOLON data)->
			let pMem = match pMem with |_::tl -> tl |_ -> assert false in
			let valeur = ([]) in
		goto (List.hd pEtats) "param_list" pEtats ((PARAM_LIST valeur)::pMem) newToken (SEMICOLON data)
	|_->samFail 949
and _sam950 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pl,pMem = match pMem with |(PARAM_LIST t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pl) in
		goto (List.hd pEtats) "param_list" pEtats ((PARAM_LIST valeur)::pMem) newToken EOF
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pl,pMem = match pMem with |(PARAM_LIST t1)::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pl) in
		goto (List.hd pEtats) "param_list" pEtats ((PARAM_LIST valeur)::pMem) newToken (SEMICOLON data)
	|_->samFail 950
and _sam951 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
		_sam952 (951::pEtats) (Tok(END data)::pMem) newToken (newToken())
	|(SEMICOLON data)->
		_sam942 (951::pEtats) (Tok(SEMICOLON data)::pMem) newToken (newToken())
	|_->samFail 951
and _sam952 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let p,pMem = match pMem with |_::(PARAM t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ([p]) in
		goto (List.hd pEtats) "param_list" pEtats ((PARAM_LIST valeur)::pMem) newToken EOF
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let p,pMem = match pMem with |_::(PARAM t0)::tl -> t0,tl |_ -> assert false in
			let valeur = ([p]) in
		goto (List.hd pEtats) "param_list" pEtats ((PARAM_LIST valeur)::pMem) newToken (SEMICOLON data)
	|_->samFail 952
and _sam953 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pl,p,pMem = match pMem with |(PARAM_LIST t2)::_::(PARAM t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (p::pl) in
		goto (List.hd pEtats) "param_list" pEtats ((PARAM_LIST valeur)::pMem) newToken EOF
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pl,p,pMem = match pMem with |(PARAM_LIST t2)::_::(PARAM t0)::tl -> t2,t0,tl |_ -> assert false in
			let valeur = (p::pl) in
		goto (List.hd pEtats) "param_list" pEtats ((PARAM_LIST valeur)::pMem) newToken (SEMICOLON data)
	|_->samFail 953
and _sam954 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let eL,e,pMem = match pMem with |(SEPARATED_LIST_C_E t1)::(EXPR t0)::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (e::eL) in
		goto (List.hd pEtats) "separated_list_COMMA_expr" pEtats ((SEPARATED_LIST_COMMA_EXPR valeur)::pMem) newToken (PARD data)
	|_->samFail 954
and _sam955 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(COMMA data)->
		_sam940 (955::pEtats) (Tok(COMMA data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats=955::pEtats in
			let valeur = ([]) in
		goto (List.hd pEtats) "separated_list_C_P" pEtats ((SEPARATED_LIST_C_P valeur)::pMem) newToken (PARD data)
	|_->samFail 955
and _sam956 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pL,p,pMem = match pMem with |(SEPARATED_LIST_C_P t1)::(PARAM t0)::tl -> t1,t0,tl |_ -> assert false in
			let valeur = (p::pL) in
		goto (List.hd pEtats) "separated_list_COMMA_param" pEtats ((SEPARATED_LIST_COMMA_PARAM valeur)::pMem) newToken (PARD data)
	|_->samFail 956
and _sam957 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let eL,e,pMem = match pMem with |(SEPARATED_LIST_C_E t2)::(EXPR t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (e::eL) in
		goto (List.hd pEtats) "separated_list_C_E" pEtats ((SEPARATED_LIST_C_E valeur)::pMem) newToken (PARD data)
	|_->samFail 957
and _sam958 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(COMMA data)->
		_sam940 (958::pEtats) (Tok(COMMA data)::pMem) newToken (newToken())
	|(PARD data)->
			let pEtats=958::pEtats in
			let valeur = ([]) in
		goto (List.hd pEtats) "separated_list_C_P" pEtats ((SEPARATED_LIST_C_P valeur)::pMem) newToken (PARD data)
	|_->samFail 958
and _sam959 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pL,p,pMem = match pMem with |(SEPARATED_LIST_C_P t2)::(PARAM t1)::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (p::pL) in
		goto (List.hd pEtats) "separated_list_C_P" pEtats ((SEPARATED_LIST_C_P valeur)::pMem) newToken (PARD data)
	|_->samFail 959
and _sam960 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(STRUCT data)->
		_sam961 (960::pEtats) (Tok(STRUCT data)::pMem) newToken (newToken())
	|_->samFail 960
and _sam961 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam943 (961::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 961
and _sam962 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let parameters,pi,pMem = match pMem with |(PARAM_LIST t3)::(Tok (IDENT t2))::_::_::tl -> t3,t2,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Dstruct (true, p, i, parameters)
    ) in
		goto (List.hd pEtats) "structure" pEtats ((STRUCTURE valeur)::pMem) newToken EOF
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let parameters,pi,pMem = match pMem with |(PARAM_LIST t3)::(Tok (IDENT t2))::_::_::tl -> t3,t2,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Dstruct (true, p, i, parameters)
    ) in
		goto (List.hd pEtats) "structure" pEtats ((STRUCTURE valeur)::pMem) newToken (SEMICOLON data)
	|_->samFail 962
and _sam963 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam944 (963::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 963
and _sam964 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let parameters,pi,pMem = match pMem with |(PARAM_LIST t2)::(Tok (IDENT t1))::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Dstruct (false, p, i, parameters)
    ) in
		goto (List.hd pEtats) "structure" pEtats ((STRUCTURE valeur)::pMem) newToken EOF
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let parameters,pi,pMem = match pMem with |(PARAM_LIST t2)::(Tok (IDENT t1))::_::tl -> t2,t1,tl |_ -> assert false in
			let valeur = (
      let (p,i) = pi in
      Dstruct (false, p, i, parameters)
    ) in
		goto (List.hd pEtats) "structure" pEtats ((STRUCTURE valeur)::pMem) newToken (SEMICOLON data)
	|_->samFail 964
and _sam965 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam968 (965::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 965
and _sam966 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam969 (966::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 966
and _sam967 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(IDENT data)->
		_sam970 (967::pEtats) (Tok(IDENT data)::pMem) newToken (newToken())
	|_->samFail 967
and _sam968 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(CHAINE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pi,pMem = match pMem with |(Tok (IDENT t1))::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pi) in
		goto (List.hd pEtats) "typage" pEtats ((TYPAGE valeur)::pMem) newToken (CHAINE data)
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pi,pMem = match pMem with |(Tok (IDENT t1))::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pi) in
		goto (List.hd pEtats) "typage" pEtats ((TYPAGE valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pi,pMem = match pMem with |(Tok (IDENT t1))::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pi) in
		goto (List.hd pEtats) "typage" pEtats ((TYPAGE valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pi,pMem = match pMem with |(Tok (IDENT t1))::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pi) in
		goto (List.hd pEtats) "typage" pEtats ((TYPAGE valeur)::pMem) newToken (ENTIER_PARG data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pi,pMem = match pMem with |(Tok (IDENT t1))::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pi) in
		goto (List.hd pEtats) "typage" pEtats ((TYPAGE valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pi,pMem = match pMem with |(Tok (IDENT t1))::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pi) in
		goto (List.hd pEtats) "typage" pEtats ((TYPAGE valeur)::pMem) newToken (FOR data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pi,pMem = match pMem with |(Tok (IDENT t1))::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pi) in
		goto (List.hd pEtats) "typage" pEtats ((TYPAGE valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pi,pMem = match pMem with |(Tok (IDENT t1))::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pi) in
		goto (List.hd pEtats) "typage" pEtats ((TYPAGE valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pi,pMem = match pMem with |(Tok (IDENT t1))::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pi) in
		goto (List.hd pEtats) "typage" pEtats ((TYPAGE valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pi,pMem = match pMem with |(Tok (IDENT t1))::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pi) in
		goto (List.hd pEtats) "typage" pEtats ((TYPAGE valeur)::pMem) newToken (INT data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pi,pMem = match pMem with |(Tok (IDENT t1))::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pi) in
		goto (List.hd pEtats) "typage" pEtats ((TYPAGE valeur)::pMem) newToken (MINUS data)
	|(NOT data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pi,pMem = match pMem with |(Tok (IDENT t1))::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pi) in
		goto (List.hd pEtats) "typage" pEtats ((TYPAGE valeur)::pMem) newToken (NOT data)
	|(PARG data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pi,pMem = match pMem with |(Tok (IDENT t1))::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pi) in
		goto (List.hd pEtats) "typage" pEtats ((TYPAGE valeur)::pMem) newToken (PARG data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pi,pMem = match pMem with |(Tok (IDENT t1))::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pi) in
		goto (List.hd pEtats) "typage" pEtats ((TYPAGE valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pi,pMem = match pMem with |(Tok (IDENT t1))::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pi) in
		goto (List.hd pEtats) "typage" pEtats ((TYPAGE valeur)::pMem) newToken (SEMICOLON data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pi,pMem = match pMem with |(Tok (IDENT t1))::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pi) in
		goto (List.hd pEtats) "typage" pEtats ((TYPAGE valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pi,pMem = match pMem with |(Tok (IDENT t1))::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pi) in
		goto (List.hd pEtats) "typage" pEtats ((TYPAGE valeur)::pMem) newToken (WHILE data)
	|_->samFail 968
and _sam969 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(COMMA data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pi,pMem = match pMem with |(Tok (IDENT t1))::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pi) in
		goto (List.hd pEtats) "typage" pEtats ((TYPAGE valeur)::pMem) newToken (COMMA data)
	|(PARD data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pi,pMem = match pMem with |(Tok (IDENT t1))::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pi) in
		goto (List.hd pEtats) "typage" pEtats ((TYPAGE valeur)::pMem) newToken (PARD data)
	|_->samFail 969
and _sam970 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(END data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pi,pMem = match pMem with |(Tok (IDENT t1))::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pi) in
		goto (List.hd pEtats) "typage" pEtats ((TYPAGE valeur)::pMem) newToken (END data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::t -> t |_ -> assert false in
			let pi,pMem = match pMem with |(Tok (IDENT t1))::_::tl -> t1,tl |_ -> assert false in
			let valeur = (pi) in
		goto (List.hd pEtats) "typage" pEtats ((TYPAGE valeur)::pMem) newToken (SEMICOLON data)
	|_->samFail 970
and _sam971 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (WHILE data)
	|_->samFail 971
and _sam972 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (WHILE data)
	|_->samFail 972
and _sam973 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 973
and _sam974 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 974
and _sam975 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 975
and _sam976 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 976
and _sam977 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (DOT data)
	|EOF->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 977
and _sam978 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 978
and _sam979 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::t -> t |_ -> assert false in
			let pb,e,p1,pMem = match pMem with |(BLOC_END t2)::(EXPR t1)::(Tok (WHILE t0))::tl -> t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,b) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e, b)) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 979
and _sam980 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (WHILE data)
	|_->samFail 980
and _sam981 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AND data)
	|(CHAINE data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (CHAINE data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (END data)
	|(ENTIER_IDENT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (ENTIER_IDENT data)
	|(ENTIER_PARG data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (ENTIER_PARG data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EXP data)
	|(FALSE data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (FALSE data)
	|(FOR data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (FOR data)
	|(G data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (GEQ data)
	|(IDENT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (IDENT data)
	|(IDENT_PARG data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (IDENT_PARG data)
	|(IF data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (IF data)
	|(INT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (INT data)
	|(L data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NEQ data)
	|(NOT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NOT data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (OR data)
	|(PARG data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PARG data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PLUS data)
	|(RETURN data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (RETURN data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TIMES data)
	|(TRUE data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TRUE data)
	|(WHILE data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (WHILE data)
	|_->samFail 981
and _sam982 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AND data)
	|(COLON data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (COLON data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 982
and _sam983 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AND data)
	|(COMMA data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (COMMA data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PLUS data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 983
and _sam984 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (DOT data)
	|(ELSE data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (ELSE data)
	|(ELSEIF data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (ELSEIF data)
	|(END data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 984
and _sam985 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (DOT data)
	|(END data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (END data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 985
and _sam986 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (DOT data)
	|EOF->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken EOF
	|(EQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (OR data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 986
and _sam987 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PARD data)
	|(PARD_IDENT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PARD_IDENT data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 987
and _sam988 (pEtats: int list) (pMem:rulesType list) (newToken:unit -> token) = function
	|(AFFECT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AFFECT data)
	|(AND data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (AND data)
	|(DOT data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (DOT data)
	|(EQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EQ data)
	|(EXP data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (EXP data)
	|(G data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (G data)
	|(GEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (GEQ data)
	|(L data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (L data)
	|(LEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (LEQ data)
	|(MINUS data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MINUS data)
	|(MODULO data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (MODULO data)
	|(NEQ data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (NEQ data)
	|(OR data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (OR data)
	|(PARD data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PARD data)
	|(PLUS data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (PLUS data)
	|(SEMICOLON data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (SEMICOLON data)
	|(TIMES data)->
			let pEtats = match pEtats with |_::_::_::t -> t |_ -> assert false in
			let pb,e2,e1,p1,pMem = match pMem with |(BLOC_END t3)::(EXPR_WMIN_ t2)::(EXPR_W_RET t1)::(Tok (WHILE t0))::tl -> t3,t2,t1,t0,tl |_ -> assert false in
			let valeur = (
    let (p2,(p,eL)) = pb in
    Hyper2.fusionPos p1 p2, Ewhile (e1, (Hyper2.fusionPos (fst e2) p, e2::eL))) in
		goto (List.hd pEtats) "whileExp" pEtats ((WHILEEXP valeur)::pMem) newToken (TIMES data)
	|_->samFail 988
and goto i readRule = match i,readRule with
|1,"bloc1"->_sam594
|1,"expr"->_sam23
|1,"lvalue"->_sam812
|1,"whileExp"->_sam821
|2,"bloc1"->_sam595
|2,"expr"->_sam24
|2,"lvalue"->_sam812
|2,"whileExp"->_sam821
|3,"bloc1"->_sam597
|3,"expr"->_sam25
|3,"lvalue"->_sam812
|3,"whileExp"->_sam821
|4,"bloc1"->_sam596
|4,"expr"->_sam26
|4,"lvalue"->_sam812
|4,"whileExp"->_sam821
|5,"bloc1"->_sam599
|5,"expr"->_sam27
|5,"lvalue"->_sam812
|5,"whileExp"->_sam821
|6,"bloc1"->_sam598
|6,"expr"->_sam28
|6,"lvalue"->_sam812
|6,"whileExp"->_sam821
|7,"bloc1"->_sam600
|7,"expr"->_sam29
|7,"lvalue"->_sam812
|7,"whileExp"->_sam821
|8,"bloc1"->_sam601
|8,"expr"->_sam30
|8,"lvalue"->_sam812
|8,"whileExp"->_sam821
|9,"bloc1"->_sam602
|9,"expr"->_sam31
|9,"lvalue"->_sam812
|9,"whileExp"->_sam821
|10,"bloc1"->_sam870
|10,"expr"->_sam32
|10,"lvalue"->_sam812
|10,"whileExp"->_sam821
|11,"bloc1"->_sam871
|11,"expr"->_sam33
|11,"lvalue"->_sam812
|11,"whileExp"->_sam821
|12,"bloc1"->_sam468
|12,"expr"->_sam34
|12,"lvalue"->_sam813
|12,"whileExp"->_sam822
|13,"bloc1"->_sam469
|13,"expr"->_sam34
|13,"lvalue"->_sam813
|13,"whileExp"->_sam822
|14,"bloc1"->_sam471
|14,"expr"->_sam34
|14,"lvalue"->_sam813
|14,"whileExp"->_sam822
|15,"bloc1"->_sam470
|15,"expr"->_sam34
|15,"lvalue"->_sam813
|15,"whileExp"->_sam822
|16,"bloc1"->_sam473
|16,"expr"->_sam34
|16,"lvalue"->_sam813
|16,"whileExp"->_sam822
|17,"bloc1"->_sam472
|17,"expr"->_sam34
|17,"lvalue"->_sam813
|17,"whileExp"->_sam822
|18,"bloc1"->_sam474
|18,"expr"->_sam34
|18,"lvalue"->_sam813
|18,"whileExp"->_sam822
|19,"bloc1"->_sam475
|19,"expr"->_sam34
|19,"lvalue"->_sam813
|19,"whileExp"->_sam822
|20,"bloc1"->_sam476
|20,"expr"->_sam34
|20,"lvalue"->_sam813
|20,"whileExp"->_sam822
|21,"bloc1"->_sam848
|21,"expr"->_sam34
|21,"lvalue"->_sam813
|21,"whileExp"->_sam822
|22,"bloc1"->_sam849
|22,"expr"->_sam34
|22,"lvalue"->_sam813
|22,"whileExp"->_sam822
|23,"bloc1bis"->_sam35
|24,"bloc1bis"->_sam35
|25,"bloc1bis"->_sam35
|26,"bloc1bis"->_sam35
|27,"bloc1bis"->_sam35
|28,"bloc1bis"->_sam35
|29,"bloc1bis"->_sam35
|30,"bloc1bis"->_sam35
|31,"bloc1bis"->_sam35
|32,"bloc1bis"->_sam35
|33,"bloc1bis"->_sam35
|34,"bloc1bis"->_sam35
|36,"bloc1bis"->_sam38
|36,"expr"->_sam37
|36,"lvalue"->_sam813
|36,"whileExp"->_sam822
|37,"bloc1bis"->_sam39
|40,"bloc_END"->_sam110
|40,"expr"->_sam41
|40,"lvalue"->_sam809
|40,"whileExp"->_sam818
|41,"bloc_END"->_sam120
|42,"bloc_END"->_sam164
|42,"expr"->_sam43
|42,"lvalue"->_sam809
|42,"whileExp"->_sam818
|43,"bloc_END"->_sam173
|44,"bloc_END"->_sam971
|45,"bloc_END"->_sam980
|46,"bloc_END"->_sam111
|46,"expr"->_sam47
|46,"lvalue"->_sam809
|46,"whileExp"->_sam818
|47,"bloc_END"->_sam121
|48,"bloc_END"->_sam165
|48,"expr"->_sam49
|48,"lvalue"->_sam809
|48,"whileExp"->_sam818
|49,"bloc_END"->_sam174
|50,"bloc_END"->_sam972
|51,"bloc_END"->_sam981
|52,"bloc_END"->_sam112
|52,"expr"->_sam53
|52,"lvalue"->_sam809
|52,"whileExp"->_sam818
|53,"bloc_END"->_sam122
|54,"bloc_END"->_sam166
|54,"expr"->_sam55
|54,"lvalue"->_sam809
|54,"whileExp"->_sam818
|55,"bloc_END"->_sam175
|56,"bloc_END"->_sam973
|57,"bloc_END"->_sam982
|58,"bloc_END"->_sam113
|58,"expr"->_sam59
|58,"lvalue"->_sam809
|58,"whileExp"->_sam818
|59,"bloc_END"->_sam123
|60,"bloc_END"->_sam167
|60,"expr"->_sam61
|60,"lvalue"->_sam809
|60,"whileExp"->_sam818
|61,"bloc_END"->_sam176
|62,"bloc_END"->_sam974
|63,"bloc_END"->_sam983
|64,"bloc_END"->_sam114
|64,"expr"->_sam65
|64,"lvalue"->_sam809
|64,"whileExp"->_sam818
|65,"bloc_END"->_sam124
|66,"bloc_END"->_sam168
|66,"expr"->_sam67
|66,"lvalue"->_sam809
|66,"whileExp"->_sam818
|67,"bloc_END"->_sam177
|68,"bloc_END"->_sam975
|69,"bloc_END"->_sam984
|70,"bloc_END"->_sam115
|70,"expr"->_sam71
|70,"lvalue"->_sam809
|70,"whileExp"->_sam818
|71,"bloc_END"->_sam125
|72,"bloc_END"->_sam169
|72,"expr"->_sam73
|72,"lvalue"->_sam809
|72,"whileExp"->_sam818
|73,"bloc_END"->_sam178
|74,"bloc_END"->_sam976
|75,"bloc_END"->_sam985
|76,"bloc_END"->_sam116
|76,"expr"->_sam77
|76,"lvalue"->_sam809
|76,"whileExp"->_sam818
|77,"bloc_END"->_sam126
|78,"bloc_END"->_sam170
|78,"expr"->_sam79
|78,"lvalue"->_sam809
|78,"whileExp"->_sam818
|79,"bloc_END"->_sam179
|80,"bloc_END"->_sam977
|81,"bloc_END"->_sam986
|82,"bloc_END"->_sam117
|82,"expr"->_sam83
|82,"lvalue"->_sam809
|82,"whileExp"->_sam818
|83,"bloc_END"->_sam127
|84,"bloc_END"->_sam171
|84,"expr"->_sam85
|84,"lvalue"->_sam809
|84,"whileExp"->_sam818
|85,"bloc_END"->_sam180
|86,"bloc_END"->_sam978
|87,"bloc_END"->_sam987
|88,"bloc_END"->_sam118
|88,"expr"->_sam89
|88,"lvalue"->_sam809
|88,"whileExp"->_sam818
|89,"bloc_END"->_sam128
|90,"bloc_END"->_sam172
|90,"expr"->_sam91
|90,"lvalue"->_sam809
|90,"whileExp"->_sam818
|91,"bloc_END"->_sam181
|92,"bloc_END"->_sam979
|93,"bloc_END"->_sam988
|94,"bloc_END"->_sam119
|94,"expr"->_sam95
|94,"lvalue"->_sam809
|94,"whileExp"->_sam818
|95,"bloc_END"->_sam129
|96,"bloc_END"->_sam903
|96,"expr"->_sam98
|96,"lvalue"->_sam809
|96,"typage"->_sam97
|96,"whileExp"->_sam818
|97,"bloc_END"->_sam905
|97,"expr"->_sam99
|97,"lvalue"->_sam809
|97,"whileExp"->_sam818
|98,"bloc_END"->_sam904
|99,"bloc_END"->_sam906
|130,"declarations_list"->_sam137
|130,"expr"->_sam135
|130,"fonction"->_sam138
|130,"lvalue"->_sam811
|130,"structure"->_sam141
|130,"whileExp"->_sam820
|131,"declarations_list"->_sam140
|131,"expr"->_sam135
|131,"fonction"->_sam138
|131,"lvalue"->_sam811
|131,"structure"->_sam141
|131,"whileExp"->_sam820
|132,"declarations_list"->_sam143
|132,"expr"->_sam135
|132,"fonction"->_sam138
|132,"lvalue"->_sam811
|132,"structure"->_sam141
|132,"whileExp"->_sam820
|133,"declarations_list"->_sam899
|133,"expr"->_sam135
|133,"fonction"->_sam138
|133,"lvalue"->_sam811
|133,"structure"->_sam141
|133,"whileExp"->_sam820
|144,"else_exp"->_sam191
|145,"else_exp"->_sam561
|146,"else_exp"->_sam192
|147,"else_exp"->_sam563
|148,"else_exp"->_sam193
|149,"else_exp"->_sam558
|150,"else_exp"->_sam194
|151,"else_exp"->_sam559
|152,"else_exp"->_sam195
|153,"else_exp"->_sam560
|154,"else_exp"->_sam866
|155,"else_exp"->_sam196
|156,"else_exp"->_sam562
|157,"else_exp"->_sam867
|158,"else_exp"->_sam197
|159,"else_exp"->_sam564
|160,"else_exp"->_sam198
|161,"else_exp"->_sam565
|162,"else_exp"->_sam199
|163,"else_exp"->_sam566
|182,"expr"->_sam699
|182,"expr_bloc"->_sam144
|182,"expr_w_Ret"->_sam825
|182,"lvalue"->_sam808
|182,"whileExp"->_sam817
|183,"expr"->_sam699
|183,"expr_bloc"->_sam146
|183,"expr_w_Ret"->_sam825
|183,"lvalue"->_sam808
|183,"whileExp"->_sam817
|184,"expr"->_sam699
|184,"expr_bloc"->_sam148
|184,"expr_w_Ret"->_sam825
|184,"lvalue"->_sam808
|184,"whileExp"->_sam817
|185,"expr"->_sam699
|185,"expr_bloc"->_sam150
|185,"expr_w_Ret"->_sam825
|185,"lvalue"->_sam808
|185,"whileExp"->_sam817
|186,"expr"->_sam699
|186,"expr_bloc"->_sam152
|186,"expr_w_Ret"->_sam825
|186,"lvalue"->_sam808
|186,"whileExp"->_sam817
|187,"expr"->_sam699
|187,"expr_bloc"->_sam155
|187,"expr_w_Ret"->_sam825
|187,"lvalue"->_sam808
|187,"whileExp"->_sam817
|188,"expr"->_sam699
|188,"expr_bloc"->_sam158
|188,"expr_w_Ret"->_sam825
|188,"lvalue"->_sam808
|188,"whileExp"->_sam817
|189,"expr"->_sam699
|189,"expr_bloc"->_sam160
|189,"expr_w_Ret"->_sam825
|189,"lvalue"->_sam808
|189,"whileExp"->_sam817
|190,"expr"->_sam699
|190,"expr_bloc"->_sam162
|190,"expr_w_Ret"->_sam825
|190,"lvalue"->_sam808
|190,"whileExp"->_sam817
|209,"expr"->_sam513
|209,"lvalue"->_sam805
|209,"whileExp"->_sam814
|210,"expr"->_sam514
|210,"lvalue"->_sam805
|210,"whileExp"->_sam814
|211,"expr"->_sam515
|211,"lvalue"->_sam805
|211,"whileExp"->_sam814
|212,"expr"->_sam516
|212,"lvalue"->_sam805
|212,"whileExp"->_sam814
|213,"expr"->_sam517
|213,"lvalue"->_sam805
|213,"whileExp"->_sam814
|214,"expr"->_sam518
|214,"lvalue"->_sam805
|214,"whileExp"->_sam814
|215,"expr"->_sam519
|215,"lvalue"->_sam805
|215,"whileExp"->_sam814
|216,"expr"->_sam520
|216,"lvalue"->_sam805
|216,"whileExp"->_sam814
|217,"expr"->_sam521
|217,"lvalue"->_sam805
|217,"whileExp"->_sam814
|218,"expr"->_sam576
|218,"lvalue"->_sam805
|218,"whileExp"->_sam814
|219,"expr"->_sam585
|219,"lvalue"->_sam805
|219,"whileExp"->_sam814
|220,"expr"->_sam621
|220,"lvalue"->_sam805
|220,"whileExp"->_sam814
|221,"expr"->_sam639
|221,"lvalue"->_sam805
|221,"whileExp"->_sam814
|222,"expr"->_sam640
|222,"lvalue"->_sam805
|222,"whileExp"->_sam814
|223,"expr"->_sam641
|223,"lvalue"->_sam805
|223,"whileExp"->_sam814
|224,"expr"->_sam642
|224,"lvalue"->_sam805
|224,"whileExp"->_sam814
|225,"expr"->_sam643
|225,"lvalue"->_sam805
|225,"whileExp"->_sam814
|226,"expr"->_sam644
|226,"lvalue"->_sam805
|226,"whileExp"->_sam814
|227,"expr"->_sam645
|227,"lvalue"->_sam805
|227,"whileExp"->_sam814
|228,"expr"->_sam646
|228,"lvalue"->_sam805
|228,"whileExp"->_sam814
|229,"expr"->_sam647
|229,"lvalue"->_sam805
|229,"whileExp"->_sam814
|230,"expr"->_sam648
|230,"lvalue"->_sam805
|230,"whileExp"->_sam814
|231,"expr"->_sam649
|231,"lvalue"->_sam805
|231,"whileExp"->_sam814
|232,"expr"->_sam650
|232,"lvalue"->_sam805
|232,"whileExp"->_sam814
|233,"expr"->_sam651
|233,"lvalue"->_sam805
|233,"whileExp"->_sam814
|234,"expr"->_sam652
|234,"lvalue"->_sam805
|234,"whileExp"->_sam814
|235,"expr"->_sam653
|235,"lvalue"->_sam805
|235,"whileExp"->_sam814
|236,"expr"->_sam654
|236,"lvalue"->_sam805
|236,"whileExp"->_sam814
|237,"expr"->_sam669
|237,"lvalue"->_sam806
|237,"separated_list_COMMA_expr"->_sam540
|237,"whileExp"->_sam815
|238,"expr"->_sam669
|238,"lvalue"->_sam806
|238,"separated_list_COMMA_expr"->_sam541
|238,"whileExp"->_sam815
|239,"expr"->_sam669
|239,"lvalue"->_sam806
|239,"separated_list_COMMA_expr"->_sam543
|239,"whileExp"->_sam815
|240,"expr"->_sam669
|240,"lvalue"->_sam806
|240,"separated_list_COMMA_expr"->_sam542
|240,"whileExp"->_sam815
|241,"expr"->_sam669
|241,"lvalue"->_sam806
|241,"separated_list_COMMA_expr"->_sam545
|241,"whileExp"->_sam815
|242,"expr"->_sam669
|242,"lvalue"->_sam806
|242,"separated_list_COMMA_expr"->_sam544
|242,"whileExp"->_sam815
|243,"expr"->_sam669
|243,"lvalue"->_sam806
|243,"separated_list_COMMA_expr"->_sam546
|243,"whileExp"->_sam815
|244,"expr"->_sam669
|244,"lvalue"->_sam806
|244,"separated_list_COMMA_expr"->_sam547
|244,"whileExp"->_sam815
|245,"expr"->_sam669
|245,"lvalue"->_sam806
|245,"separated_list_COMMA_expr"->_sam548
|245,"whileExp"->_sam815
|246,"expr"->_sam577
|246,"lvalue"->_sam806
|246,"whileExp"->_sam815
|247,"expr"->_sam586
|247,"lvalue"->_sam806
|247,"whileExp"->_sam815
|248,"expr"->_sam622
|248,"lvalue"->_sam806
|248,"whileExp"->_sam815
|249,"expr"->_sam655
|249,"lvalue"->_sam806
|249,"whileExp"->_sam815
|250,"expr"->_sam656
|250,"lvalue"->_sam806
|250,"whileExp"->_sam815
|251,"expr"->_sam657
|251,"lvalue"->_sam806
|251,"whileExp"->_sam815
|252,"expr"->_sam658
|252,"lvalue"->_sam806
|252,"whileExp"->_sam815
|253,"expr"->_sam659
|253,"lvalue"->_sam806
|253,"whileExp"->_sam815
|254,"expr"->_sam660
|254,"lvalue"->_sam806
|254,"whileExp"->_sam815
|255,"expr"->_sam661
|255,"lvalue"->_sam806
|255,"whileExp"->_sam815
|256,"expr"->_sam662
|256,"lvalue"->_sam806
|256,"whileExp"->_sam815
|257,"expr"->_sam663
|257,"lvalue"->_sam806
|257,"whileExp"->_sam815
|258,"expr"->_sam664
|258,"lvalue"->_sam806
|258,"whileExp"->_sam815
|259,"expr"->_sam665
|259,"lvalue"->_sam806
|259,"whileExp"->_sam815
|260,"expr"->_sam666
|260,"lvalue"->_sam806
|260,"whileExp"->_sam815
|261,"expr"->_sam667
|261,"lvalue"->_sam806
|261,"whileExp"->_sam815
|262,"expr"->_sam668
|262,"lvalue"->_sam806
|262,"whileExp"->_sam815
|263,"expr"->_sam669
|263,"lvalue"->_sam806
|263,"separated_list_COMMA_expr"->_sam862
|263,"whileExp"->_sam815
|264,"expr"->_sam669
|264,"lvalue"->_sam806
|264,"separated_list_COMMA_expr"->_sam863
|264,"whileExp"->_sam815
|265,"expr"->_sam670
|265,"lvalue"->_sam806
|265,"whileExp"->_sam815
|266,"expr"->_sam699
|266,"expr_bloc"->_sam149
|266,"expr_w_Ret"->_sam825
|266,"lvalue"->_sam808
|266,"whileExp"->_sam817
|267,"expr"->_sam699
|267,"expr_bloc"->_sam151
|267,"expr_w_Ret"->_sam825
|267,"lvalue"->_sam808
|267,"whileExp"->_sam817
|268,"expr"->_sam699
|268,"expr_bloc"->_sam145
|268,"expr_w_Ret"->_sam825
|268,"lvalue"->_sam808
|268,"whileExp"->_sam817
|269,"expr"->_sam699
|269,"expr_bloc"->_sam153
|269,"expr_w_Ret"->_sam825
|269,"lvalue"->_sam808
|269,"whileExp"->_sam817
|270,"expr"->_sam699
|270,"expr_bloc"->_sam147
|270,"expr_w_Ret"->_sam825
|270,"lvalue"->_sam808
|270,"whileExp"->_sam817
|271,"expr"->_sam699
|271,"expr_bloc"->_sam156
|271,"expr_w_Ret"->_sam825
|271,"lvalue"->_sam808
|271,"whileExp"->_sam817
|272,"expr"->_sam699
|272,"expr_bloc"->_sam159
|272,"expr_w_Ret"->_sam825
|272,"lvalue"->_sam808
|272,"whileExp"->_sam817
|273,"expr"->_sam699
|273,"expr_bloc"->_sam161
|273,"expr_w_Ret"->_sam825
|273,"lvalue"->_sam808
|273,"whileExp"->_sam817
|274,"expr"->_sam699
|274,"expr_bloc"->_sam163
|274,"expr_w_Ret"->_sam825
|274,"lvalue"->_sam808
|274,"whileExp"->_sam817
|275,"expr"->_sam578
|275,"expr_w_Ret"->_sam882
|275,"lvalue"->_sam808
|275,"whileExp"->_sam817
|276,"expr"->_sam579
|276,"lvalue"->_sam807
|276,"whileExp"->_sam816
|277,"expr"->_sam587
|277,"expr_w_Ret"->_sam883
|277,"lvalue"->_sam808
|277,"whileExp"->_sam817
|278,"expr"->_sam588
|278,"lvalue"->_sam807
|278,"whileExp"->_sam816
|279,"expr"->_sam623
|279,"expr_w_Ret"->_sam884
|279,"lvalue"->_sam808
|279,"whileExp"->_sam817
|280,"expr"->_sam624
|280,"lvalue"->_sam807
|280,"whileExp"->_sam816
|281,"expr"->_sam671
|281,"expr_w_Ret"->_sam885
|281,"lvalue"->_sam808
|281,"whileExp"->_sam817
|282,"expr"->_sam672
|282,"lvalue"->_sam807
|282,"whileExp"->_sam816
|283,"expr"->_sam673
|283,"expr_w_Ret"->_sam886
|283,"lvalue"->_sam808
|283,"whileExp"->_sam817
|284,"expr"->_sam674
|284,"lvalue"->_sam807
|284,"whileExp"->_sam816
|285,"expr"->_sam675
|285,"expr_w_Ret"->_sam887
|285,"lvalue"->_sam808
|285,"whileExp"->_sam817
|286,"expr"->_sam676
|286,"lvalue"->_sam807
|286,"whileExp"->_sam816
|287,"expr"->_sam677
|287,"expr_w_Ret"->_sam888
|287,"lvalue"->_sam808
|287,"whileExp"->_sam817
|288,"expr"->_sam678
|288,"lvalue"->_sam807
|288,"whileExp"->_sam816
|289,"expr"->_sam679
|289,"expr_w_Ret"->_sam889
|289,"lvalue"->_sam808
|289,"whileExp"->_sam817
|290,"expr"->_sam680
|290,"lvalue"->_sam807
|290,"whileExp"->_sam816
|291,"expr"->_sam681
|291,"expr_w_Ret"->_sam890
|291,"lvalue"->_sam808
|291,"whileExp"->_sam817
|292,"expr"->_sam682
|292,"lvalue"->_sam807
|292,"whileExp"->_sam816
|293,"expr"->_sam683
|293,"expr_w_Ret"->_sam891
|293,"lvalue"->_sam808
|293,"whileExp"->_sam817
|294,"expr"->_sam684
|294,"lvalue"->_sam807
|294,"whileExp"->_sam816
|295,"expr"->_sam685
|295,"expr_w_Ret"->_sam892
|295,"lvalue"->_sam808
|295,"whileExp"->_sam817
|296,"expr"->_sam686
|296,"lvalue"->_sam807
|296,"whileExp"->_sam816
|297,"expr"->_sam687
|297,"expr_w_Ret"->_sam893
|297,"lvalue"->_sam808
|297,"whileExp"->_sam817
|298,"expr"->_sam688
|298,"lvalue"->_sam807
|298,"whileExp"->_sam816
|299,"expr"->_sam689
|299,"expr_w_Ret"->_sam894
|299,"lvalue"->_sam808
|299,"whileExp"->_sam817
|300,"expr"->_sam690
|300,"lvalue"->_sam807
|300,"whileExp"->_sam816
|301,"expr"->_sam691
|301,"expr_w_Ret"->_sam895
|301,"lvalue"->_sam808
|301,"whileExp"->_sam817
|302,"expr"->_sam692
|302,"lvalue"->_sam807
|302,"whileExp"->_sam816
|303,"expr"->_sam693
|303,"expr_w_Ret"->_sam896
|303,"lvalue"->_sam808
|303,"whileExp"->_sam817
|304,"expr"->_sam694
|304,"lvalue"->_sam807
|304,"whileExp"->_sam816
|305,"expr"->_sam695
|305,"expr_w_Ret"->_sam897
|305,"lvalue"->_sam808
|305,"whileExp"->_sam817
|306,"expr"->_sam696
|306,"lvalue"->_sam807
|306,"whileExp"->_sam816
|307,"expr"->_sam697
|307,"expr_w_Ret"->_sam898
|307,"lvalue"->_sam808
|307,"whileExp"->_sam817
|308,"expr"->_sam698
|308,"lvalue"->_sam807
|308,"whileExp"->_sam816
|309,"expr"->_sam699
|309,"expr_bloc"->_sam154
|309,"expr_w_Ret"->_sam825
|309,"lvalue"->_sam808
|309,"whileExp"->_sam817
|310,"expr"->_sam699
|310,"expr_bloc"->_sam157
|310,"expr_w_Ret"->_sam825
|310,"lvalue"->_sam808
|310,"whileExp"->_sam817
|311,"expr"->_sam700
|311,"expr_bloc2"->_sam833
|311,"lvalue"->_sam807
|311,"whileExp"->_sam816
|312,"expr"->_sam701
|312,"lvalue"->_sam807
|312,"whileExp"->_sam816
|313,"expr"->_sam702
|313,"lvalue"->_sam807
|313,"whileExp"->_sam816
|314,"expr"->_sam703
|314,"lvalue"->_sam807
|314,"whileExp"->_sam816
|315,"expr"->_sam704
|315,"lvalue"->_sam807
|315,"whileExp"->_sam816
|316,"expr"->_sam705
|316,"lvalue"->_sam807
|316,"whileExp"->_sam816
|317,"expr"->_sam706
|317,"lvalue"->_sam807
|317,"whileExp"->_sam816
|318,"expr"->_sam707
|318,"lvalue"->_sam807
|318,"whileExp"->_sam816
|319,"expr"->_sam708
|319,"lvalue"->_sam807
|319,"whileExp"->_sam816
|320,"expr"->_sam709
|320,"lvalue"->_sam807
|320,"whileExp"->_sam816
|321,"expr"->_sam710
|321,"lvalue"->_sam807
|321,"whileExp"->_sam816
|322,"expr"->_sam711
|322,"lvalue"->_sam807
|322,"whileExp"->_sam816
|323,"expr"->_sam712
|323,"lvalue"->_sam807
|323,"whileExp"->_sam816
|324,"expr"->_sam713
|324,"lvalue"->_sam807
|324,"whileExp"->_sam816
|325,"expr"->_sam714
|325,"lvalue"->_sam807
|325,"whileExp"->_sam816
|326,"expr"->_sam715
|326,"lvalue"->_sam807
|326,"whileExp"->_sam816
|327,"expr"->_sam716
|327,"lvalue"->_sam807
|327,"whileExp"->_sam816
|328,"expr"->_sam745
|328,"expr_bloc"->_sam522
|328,"expr_w_Ret"->_sam826
|328,"lvalue"->_sam810
|328,"whileExp"->_sam819
|329,"expr"->_sam745
|329,"expr_bloc"->_sam523
|329,"expr_w_Ret"->_sam826
|329,"lvalue"->_sam810
|329,"whileExp"->_sam819
|330,"expr"->_sam745
|330,"expr_bloc"->_sam525
|330,"expr_w_Ret"->_sam826
|330,"lvalue"->_sam810
|330,"whileExp"->_sam819
|331,"expr"->_sam745
|331,"expr_bloc"->_sam524
|331,"expr_w_Ret"->_sam826
|331,"lvalue"->_sam810
|331,"whileExp"->_sam819
|332,"expr"->_sam745
|332,"expr_bloc"->_sam527
|332,"expr_w_Ret"->_sam826
|332,"lvalue"->_sam810
|332,"whileExp"->_sam819
|333,"expr"->_sam745
|333,"expr_bloc"->_sam526
|333,"expr_w_Ret"->_sam826
|333,"lvalue"->_sam810
|333,"whileExp"->_sam819
|334,"expr"->_sam745
|334,"expr_bloc"->_sam528
|334,"expr_w_Ret"->_sam826
|334,"lvalue"->_sam810
|334,"whileExp"->_sam819
|335,"expr"->_sam745
|335,"expr_bloc"->_sam529
|335,"expr_w_Ret"->_sam826
|335,"lvalue"->_sam810
|335,"whileExp"->_sam819
|336,"expr"->_sam745
|336,"expr_bloc"->_sam530
|336,"expr_w_Ret"->_sam826
|336,"lvalue"->_sam810
|336,"whileExp"->_sam819
|337,"expr"->_sam580
|337,"expr_w_Ret"->_sam882
|337,"lvalue"->_sam810
|337,"whileExp"->_sam819
|338,"expr"->_sam581
|338,"lvalue"->_sam809
|338,"whileExp"->_sam818
|339,"expr"->_sam589
|339,"expr_w_Ret"->_sam883
|339,"lvalue"->_sam810
|339,"whileExp"->_sam819
|340,"expr"->_sam590
|340,"lvalue"->_sam809
|340,"whileExp"->_sam818
|341,"expr"->_sam625
|341,"expr_w_Ret"->_sam884
|341,"lvalue"->_sam810
|341,"whileExp"->_sam819
|342,"expr"->_sam626
|342,"lvalue"->_sam809
|342,"whileExp"->_sam818
|343,"expr"->_sam717
|343,"expr_w_Ret"->_sam885
|343,"lvalue"->_sam810
|343,"whileExp"->_sam819
|344,"expr"->_sam718
|344,"lvalue"->_sam809
|344,"whileExp"->_sam818
|345,"expr"->_sam719
|345,"expr_w_Ret"->_sam886
|345,"lvalue"->_sam810
|345,"whileExp"->_sam819
|346,"expr"->_sam720
|346,"lvalue"->_sam809
|346,"whileExp"->_sam818
|347,"expr"->_sam721
|347,"expr_w_Ret"->_sam887
|347,"lvalue"->_sam810
|347,"whileExp"->_sam819
|348,"expr"->_sam722
|348,"lvalue"->_sam809
|348,"whileExp"->_sam818
|349,"expr"->_sam723
|349,"expr_w_Ret"->_sam888
|349,"lvalue"->_sam810
|349,"whileExp"->_sam819
|350,"expr"->_sam724
|350,"lvalue"->_sam809
|350,"whileExp"->_sam818
|351,"expr"->_sam725
|351,"expr_w_Ret"->_sam889
|351,"lvalue"->_sam810
|351,"whileExp"->_sam819
|352,"expr"->_sam726
|352,"lvalue"->_sam809
|352,"whileExp"->_sam818
|353,"expr"->_sam727
|353,"expr_w_Ret"->_sam890
|353,"lvalue"->_sam810
|353,"whileExp"->_sam819
|354,"expr"->_sam728
|354,"lvalue"->_sam809
|354,"whileExp"->_sam818
|355,"expr"->_sam729
|355,"expr_w_Ret"->_sam891
|355,"lvalue"->_sam810
|355,"whileExp"->_sam819
|356,"expr"->_sam730
|356,"lvalue"->_sam809
|356,"whileExp"->_sam818
|357,"expr"->_sam731
|357,"expr_w_Ret"->_sam892
|357,"lvalue"->_sam810
|357,"whileExp"->_sam819
|358,"expr"->_sam732
|358,"lvalue"->_sam809
|358,"whileExp"->_sam818
|359,"expr"->_sam733
|359,"expr_w_Ret"->_sam893
|359,"lvalue"->_sam810
|359,"whileExp"->_sam819
|360,"expr"->_sam734
|360,"lvalue"->_sam809
|360,"whileExp"->_sam818
|361,"expr"->_sam735
|361,"expr_w_Ret"->_sam894
|361,"lvalue"->_sam810
|361,"whileExp"->_sam819
|362,"expr"->_sam736
|362,"lvalue"->_sam809
|362,"whileExp"->_sam818
|363,"expr"->_sam737
|363,"expr_w_Ret"->_sam895
|363,"lvalue"->_sam810
|363,"whileExp"->_sam819
|364,"expr"->_sam738
|364,"lvalue"->_sam809
|364,"whileExp"->_sam818
|365,"expr"->_sam739
|365,"expr_w_Ret"->_sam896
|365,"lvalue"->_sam810
|365,"whileExp"->_sam819
|366,"expr"->_sam740
|366,"lvalue"->_sam809
|366,"whileExp"->_sam818
|367,"expr"->_sam741
|367,"expr_w_Ret"->_sam897
|367,"lvalue"->_sam810
|367,"whileExp"->_sam819
|368,"expr"->_sam742
|368,"lvalue"->_sam809
|368,"whileExp"->_sam818
|369,"expr"->_sam743
|369,"expr_w_Ret"->_sam898
|369,"lvalue"->_sam810
|369,"whileExp"->_sam819
|370,"expr"->_sam744
|370,"lvalue"->_sam809
|370,"whileExp"->_sam818
|371,"expr"->_sam745
|371,"expr_bloc"->_sam858
|371,"expr_w_Ret"->_sam826
|371,"lvalue"->_sam810
|371,"whileExp"->_sam819
|372,"expr"->_sam745
|372,"expr_bloc"->_sam859
|372,"expr_w_Ret"->_sam826
|372,"lvalue"->_sam810
|372,"whileExp"->_sam819
|373,"expr"->_sam746
|373,"expr_bloc2"->_sam834
|373,"lvalue"->_sam809
|373,"whileExp"->_sam818
|374,"expr"->_sam747
|374,"lvalue"->_sam809
|374,"whileExp"->_sam818
|375,"expr"->_sam748
|375,"lvalue"->_sam809
|375,"whileExp"->_sam818
|376,"expr"->_sam749
|376,"lvalue"->_sam809
|376,"whileExp"->_sam818
|377,"expr"->_sam750
|377,"lvalue"->_sam809
|377,"whileExp"->_sam818
|378,"expr"->_sam751
|378,"lvalue"->_sam809
|378,"whileExp"->_sam818
|379,"expr"->_sam752
|379,"lvalue"->_sam809
|379,"whileExp"->_sam818
|380,"expr"->_sam753
|380,"lvalue"->_sam809
|380,"whileExp"->_sam818
|381,"expr"->_sam754
|381,"lvalue"->_sam809
|381,"whileExp"->_sam818
|382,"expr"->_sam755
|382,"lvalue"->_sam809
|382,"whileExp"->_sam818
|383,"expr"->_sam756
|383,"lvalue"->_sam809
|383,"whileExp"->_sam818
|384,"expr"->_sam757
|384,"lvalue"->_sam809
|384,"whileExp"->_sam818
|385,"expr"->_sam758
|385,"lvalue"->_sam809
|385,"whileExp"->_sam818
|386,"expr"->_sam759
|386,"lvalue"->_sam809
|386,"whileExp"->_sam818
|387,"expr"->_sam760
|387,"lvalue"->_sam809
|387,"whileExp"->_sam818
|388,"expr"->_sam761
|388,"lvalue"->_sam809
|388,"whileExp"->_sam818
|389,"expr"->_sam762
|389,"lvalue"->_sam809
|389,"whileExp"->_sam818
|390,"expr"->_sam44
|390,"expr_w_Ret"->_sam835
|390,"lvalue"->_sam810
|390,"whileExp"->_sam819
|391,"expr"->_sam50
|391,"expr_w_Ret"->_sam836
|391,"lvalue"->_sam810
|391,"whileExp"->_sam819
|392,"expr"->_sam56
|392,"expr_w_Ret"->_sam837
|392,"lvalue"->_sam810
|392,"whileExp"->_sam819
|393,"expr"->_sam62
|393,"expr_w_Ret"->_sam838
|393,"lvalue"->_sam810
|393,"whileExp"->_sam819
|394,"expr"->_sam68
|394,"expr_w_Ret"->_sam839
|394,"lvalue"->_sam810
|394,"whileExp"->_sam819
|395,"expr"->_sam74
|395,"expr_w_Ret"->_sam840
|395,"lvalue"->_sam810
|395,"whileExp"->_sam819
|396,"expr"->_sam80
|396,"expr_w_Ret"->_sam841
|396,"lvalue"->_sam810
|396,"whileExp"->_sam819
|397,"expr"->_sam86
|397,"expr_w_Ret"->_sam842
|397,"lvalue"->_sam810
|397,"whileExp"->_sam819
|398,"expr"->_sam92
|398,"expr_w_Ret"->_sam843
|398,"lvalue"->_sam810
|398,"whileExp"->_sam819
|399,"expr"->_sam582
|399,"lvalue"->_sam811
|399,"whileExp"->_sam820
|400,"expr"->_sam591
|400,"lvalue"->_sam811
|400,"whileExp"->_sam820
|401,"expr"->_sam627
|401,"lvalue"->_sam811
|401,"whileExp"->_sam820
|402,"expr"->_sam763
|402,"lvalue"->_sam811
|402,"whileExp"->_sam820
|403,"expr"->_sam764
|403,"lvalue"->_sam811
|403,"whileExp"->_sam820
|404,"expr"->_sam765
|404,"lvalue"->_sam811
|404,"whileExp"->_sam820
|405,"expr"->_sam766
|405,"lvalue"->_sam811
|405,"whileExp"->_sam820
|406,"expr"->_sam767
|406,"lvalue"->_sam811
|406,"whileExp"->_sam820
|407,"expr"->_sam768
|407,"lvalue"->_sam811
|407,"whileExp"->_sam820
|408,"expr"->_sam769
|408,"lvalue"->_sam811
|408,"whileExp"->_sam820
|409,"expr"->_sam770
|409,"lvalue"->_sam811
|409,"whileExp"->_sam820
|410,"expr"->_sam771
|410,"lvalue"->_sam811
|410,"whileExp"->_sam820
|411,"expr"->_sam772
|411,"lvalue"->_sam811
|411,"whileExp"->_sam820
|412,"expr"->_sam773
|412,"lvalue"->_sam811
|412,"whileExp"->_sam820
|413,"expr"->_sam774
|413,"lvalue"->_sam811
|413,"whileExp"->_sam820
|414,"expr"->_sam775
|414,"lvalue"->_sam811
|414,"whileExp"->_sam820
|415,"expr"->_sam776
|415,"lvalue"->_sam811
|415,"whileExp"->_sam820
|416,"expr"->_sam583
|416,"lvalue"->_sam812
|416,"whileExp"->_sam821
|417,"expr"->_sam592
|417,"lvalue"->_sam812
|417,"whileExp"->_sam821
|418,"expr"->_sam628
|418,"lvalue"->_sam812
|418,"whileExp"->_sam821
|419,"expr"->_sam777
|419,"lvalue"->_sam812
|419,"whileExp"->_sam821
|420,"expr"->_sam778
|420,"lvalue"->_sam812
|420,"whileExp"->_sam821
|421,"expr"->_sam779
|421,"lvalue"->_sam812
|421,"whileExp"->_sam821
|422,"expr"->_sam780
|422,"lvalue"->_sam812
|422,"whileExp"->_sam821
|423,"expr"->_sam781
|423,"lvalue"->_sam812
|423,"whileExp"->_sam821
|424,"expr"->_sam782
|424,"lvalue"->_sam812
|424,"whileExp"->_sam821
|425,"expr"->_sam783
|425,"lvalue"->_sam812
|425,"whileExp"->_sam821
|426,"expr"->_sam784
|426,"lvalue"->_sam812
|426,"whileExp"->_sam821
|427,"expr"->_sam785
|427,"lvalue"->_sam812
|427,"whileExp"->_sam821
|428,"expr"->_sam786
|428,"lvalue"->_sam812
|428,"whileExp"->_sam821
|429,"expr"->_sam787
|429,"lvalue"->_sam812
|429,"whileExp"->_sam821
|430,"expr"->_sam788
|430,"lvalue"->_sam812
|430,"whileExp"->_sam821
|431,"expr"->_sam789
|431,"lvalue"->_sam812
|431,"whileExp"->_sam821
|432,"expr"->_sam790
|432,"lvalue"->_sam812
|432,"whileExp"->_sam821
|433,"expr"->_sam584
|433,"lvalue"->_sam813
|433,"whileExp"->_sam822
|434,"expr"->_sam593
|434,"lvalue"->_sam813
|434,"whileExp"->_sam822
|435,"expr"->_sam629
|435,"lvalue"->_sam813
|435,"whileExp"->_sam822
|436,"expr"->_sam791
|436,"lvalue"->_sam813
|436,"whileExp"->_sam822
|437,"expr"->_sam792
|437,"lvalue"->_sam813
|437,"whileExp"->_sam822
|438,"expr"->_sam793
|438,"lvalue"->_sam813
|438,"whileExp"->_sam822
|439,"expr"->_sam794
|439,"lvalue"->_sam813
|439,"whileExp"->_sam822
|440,"expr"->_sam795
|440,"lvalue"->_sam813
|440,"whileExp"->_sam822
|441,"expr"->_sam796
|441,"lvalue"->_sam813
|441,"whileExp"->_sam822
|442,"expr"->_sam797
|442,"lvalue"->_sam813
|442,"whileExp"->_sam822
|443,"expr"->_sam798
|443,"lvalue"->_sam813
|443,"whileExp"->_sam822
|444,"expr"->_sam799
|444,"lvalue"->_sam813
|444,"whileExp"->_sam822
|445,"expr"->_sam800
|445,"lvalue"->_sam813
|445,"whileExp"->_sam822
|446,"expr"->_sam801
|446,"lvalue"->_sam813
|446,"whileExp"->_sam822
|447,"expr"->_sam802
|447,"lvalue"->_sam813
|447,"whileExp"->_sam822
|448,"expr"->_sam803
|448,"lvalue"->_sam813
|448,"whileExp"->_sam822
|449,"expr"->_sam804
|449,"lvalue"->_sam813
|449,"whileExp"->_sam822
|669,"separated_list_C_E"->_sam954
|670,"separated_list_C_E"->_sam957
|699,"expr_bloc2"->_sam823
|700,"expr_bloc2"->_sam831
|745,"expr_bloc2"->_sam824
|746,"expr_bloc2"->_sam832
|825,"expr_wMin_"->_sam827
|825,"lvalue_wMin_"->_sam878
|825,"whileExp"->_sam880
|826,"expr_wMin_"->_sam828
|826,"lvalue_wMin_"->_sam879
|826,"whileExp"->_sam881
|827,"expr_bloc2"->_sam829
|828,"expr_bloc2"->_sam830
|835,"expr_wMin_"->_sam45
|835,"lvalue_wMin_"->_sam879
|835,"whileExp"->_sam881
|836,"expr_wMin_"->_sam51
|836,"lvalue_wMin_"->_sam879
|836,"whileExp"->_sam881
|837,"expr_wMin_"->_sam57
|837,"lvalue_wMin_"->_sam879
|837,"whileExp"->_sam881
|838,"expr_wMin_"->_sam63
|838,"lvalue_wMin_"->_sam879
|838,"whileExp"->_sam881
|839,"expr_wMin_"->_sam69
|839,"lvalue_wMin_"->_sam879
|839,"whileExp"->_sam881
|840,"expr_wMin_"->_sam75
|840,"lvalue_wMin_"->_sam879
|840,"whileExp"->_sam881
|841,"expr_wMin_"->_sam81
|841,"lvalue_wMin_"->_sam879
|841,"whileExp"->_sam881
|842,"expr_wMin_"->_sam87
|842,"lvalue_wMin_"->_sam879
|842,"whileExp"->_sam881
|843,"expr_wMin_"->_sam93
|843,"lvalue_wMin_"->_sam879
|843,"whileExp"->_sam881
|901,"param"->_sam955
|901,"separated_list_COMMA_param"->_sam902
|940,"param"->_sam958
|941,"param"->_sam951
|941,"param_list"->_sam950
|942,"param"->_sam951
|942,"param_list"->_sam953
|943,"param"->_sam951
|943,"param_list"->_sam962
|944,"param"->_sam951
|944,"param_list"->_sam964
|945,"typage"->_sam947
|946,"typage"->_sam948
|955,"separated_list_C_P"->_sam956
|958,"separated_list_C_P"->_sam959
|_,_->samFail (-1)


let fichier lexer lexbuf =
	let newTok = (fun () -> lexer lexbuf) in
	try 
		_sam133 [133] [] newTok (newTok ())
	with Output a -> a
		|a -> raise a

